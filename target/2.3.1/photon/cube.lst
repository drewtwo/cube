
/Users/drewowl/workspace/cube/target/2.3.1/photon/cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001ce4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1d00  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000009f4  20000000  080a1d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000590  200009f4  200009f4  000309f4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a26f8  080a26f8  000226f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2720  080a2720  00022720  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000cdedb  00000000  00000000  00022724  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000106cb  00000000  00000000  000f05ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00016c3d  00000000  00000000  00100cca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001e80  00000000  00000000  00117907  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004700  00000000  00000000  00119787  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000231a2  00000000  00000000  0011de87  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00025279  00000000  00000000  00141029  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ac313  00000000  00000000  001662a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004d7c  00000000  00000000  002125b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fcc3 	bl	80a19b8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fccb 	bl	80a19d4 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1d04 	.word	0x080a1d04
 80a004c:	200009f4 	.word	0x200009f4
 80a0050:	200009f4 	.word	0x200009f4
 80a0054:	20000f81 	.word	0x20000f81
 80a0058:	20000f81 	.word	0x20000f81

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fba1 	bl	80a17a4 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a1cd8 	.word	0x080a1cd8
 80a0080:	080a1cf4 	.word	0x080a1cf4

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b813 	b.w	80a00ae <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 fd9b 	bl	80a0bc4 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f001 bb3f 	b.w	80a1714 <_post_loop>

080a0096 <_Znaj>:
 80a0096:	f000 bf41 	b.w	80a0f1c <malloc>

080a009a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009a:	f000 bf47 	b.w	80a0f2c <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr

080a00ae <setup>:
  // Particle.function("drawLineAPI", drawLineAPI);
  // Particle.function("planarSpin", planarSpin);
  // Particle.function("planarFlop3D", planarFlop3D);
  // Particle.function("drawZRow", drawZRow);
  // Particle.function("drawWholeCube", drawWholeCube);
}
 80a00ae:	4770      	bx	lr

080a00b0 <_Z9drawWalls6String>:
    }
  }
}

int drawWalls(String cmd)
{
 80a00b0:	b570      	push	{r4, r5, r6, lr}
  ypos = ypos == 0 ? ypos = 3 : ypos - 1;
 80a00b2:	4918      	ldr	r1, [pc, #96]	; (80a0114 <_Z9drawWalls6String+0x64>)
 80a00b4:	4a18      	ldr	r2, [pc, #96]	; (80a0118 <_Z9drawWalls6String+0x68>)
 80a00b6:	680b      	ldr	r3, [r1, #0]
 80a00b8:	b94b      	cbnz	r3, 80a00ce <_Z9drawWalls6String+0x1e>
 80a00ba:	2303      	movs	r3, #3
 80a00bc:	600b      	str	r3, [r1, #0]
  if (ypos == 3)
  {
    color = color > 8 ? 0 : color + 1;
 80a00be:	6813      	ldr	r3, [r2, #0]
 80a00c0:	2b08      	cmp	r3, #8
 80a00c2:	bfcc      	ite	gt
 80a00c4:	2300      	movgt	r3, #0
 80a00c6:	3301      	addle	r3, #1
 80a00c8:	6013      	str	r3, [r2, #0]
 80a00ca:	2303      	movs	r3, #3
 80a00cc:	e003      	b.n	80a00d6 <_Z9drawWalls6String+0x26>
  ypos = ypos == 0 ? ypos = 3 : ypos - 1;
 80a00ce:	3b01      	subs	r3, #1
  if (ypos == 3)
 80a00d0:	2b03      	cmp	r3, #3
  ypos = ypos == 0 ? ypos = 3 : ypos - 1;
 80a00d2:	600b      	str	r3, [r1, #0]
  if (ypos == 3)
 80a00d4:	d0f3      	beq.n	80a00be <_Z9drawWalls6String+0xe>
  }
  for (int x = 0; x < 4; x++)
  {
    for (int z = 0; z < 4; z++)
    {
      grid[x][ypos][z][0] = allVariants[color][0];
 80a00d6:	6811      	ldr	r1, [r2, #0]
 80a00d8:	220c      	movs	r2, #12
 80a00da:	434a      	muls	r2, r1
 80a00dc:	480f      	ldr	r0, [pc, #60]	; (80a011c <_Z9drawWalls6String+0x6c>)
 80a00de:	1881      	adds	r1, r0, r2
      grid[x][ypos][z][1] = allVariants[color][1];
      grid[x][ypos][z][2] = allVariants[color][2];
 80a00e0:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
 80a00e4:	2130      	movs	r1, #48	; 0x30
      grid[x][ypos][z][0] = allVariants[color][0];
 80a00e6:	5884      	ldr	r4, [r0, r2]
 80a00e8:	4a0d      	ldr	r2, [pc, #52]	; (80a0120 <_Z9drawWalls6String+0x70>)
 80a00ea:	fb01 2303 	mla	r3, r1, r3, r2
      grid[x][ypos][z][2] = allVariants[color][2];
 80a00ee:	2100      	movs	r1, #0
 80a00f0:	461a      	mov	r2, r3
    for (int z = 0; z < 4; z++)
 80a00f2:	2000      	movs	r0, #0
 80a00f4:	3001      	adds	r0, #1
 80a00f6:	2804      	cmp	r0, #4
      grid[x][ypos][z][1] = allVariants[color][1];
 80a00f8:	e9c2 4500 	strd	r4, r5, [r2]
      grid[x][ypos][z][2] = allVariants[color][2];
 80a00fc:	6096      	str	r6, [r2, #8]
    for (int z = 0; z < 4; z++)
 80a00fe:	f102 020c 	add.w	r2, r2, #12
 80a0102:	d1f7      	bne.n	80a00f4 <_Z9drawWalls6String+0x44>
  for (int x = 0; x < 4; x++)
 80a0104:	3101      	adds	r1, #1
 80a0106:	2904      	cmp	r1, #4
 80a0108:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
 80a010c:	d1f0      	bne.n	80a00f0 <_Z9drawWalls6String+0x40>
    }
  }
  return 1;
}
 80a010e:	2001      	movs	r0, #1
 80a0110:	bd70      	pop	{r4, r5, r6, pc}
 80a0112:	bf00      	nop
 80a0114:	20000a08 	.word	0x20000a08
 80a0118:	200009f4 	.word	0x200009f4
 80a011c:	20000000 	.word	0x20000000
 80a0120:	20000480 	.word	0x20000480

080a0124 <_Z8drawXRow6String>:

int drawXRow(String cmd)
{
 80a0124:	b5f0      	push	{r4, r5, r6, r7, lr}
  int y = random(0, 4);
 80a0126:	2104      	movs	r1, #4
{
 80a0128:	b085      	sub	sp, #20
 80a012a:	4605      	mov	r5, r0
  int y = random(0, 4);
 80a012c:	2000      	movs	r0, #0
 80a012e:	f001 f886 	bl	80a123e <_Z6randomii>
  int z = random(0, 4);
  color = color > 8 ? 0 : color + 1;
 80a0132:	4c22      	ldr	r4, [pc, #136]	; (80a01bc <_Z8drawXRow6String+0x98>)
  int z = random(0, 4);
 80a0134:	2104      	movs	r1, #4
  int y = random(0, 4);
 80a0136:	9002      	str	r0, [sp, #8]
  int z = random(0, 4);
 80a0138:	2000      	movs	r0, #0
 80a013a:	f001 f880 	bl	80a123e <_Z6randomii>
  color = color > 8 ? 0 : color + 1;
 80a013e:	6823      	ldr	r3, [r4, #0]
  if (sscanf(cmd, "%d, %d, %d", &y, &z, &color) == 3)
 80a0140:	491f      	ldr	r1, [pc, #124]	; (80a01c0 <_Z8drawXRow6String+0x9c>)
  color = color > 8 ? 0 : color + 1;
 80a0142:	2b08      	cmp	r3, #8
 80a0144:	bfcc      	ite	gt
 80a0146:	2300      	movgt	r3, #0
 80a0148:	3301      	addle	r3, #1
 80a014a:	6023      	str	r3, [r4, #0]
  if (sscanf(cmd, "%d, %d, %d", &y, &z, &color) == 3)
 80a014c:	9400      	str	r4, [sp, #0]
  int z = random(0, 4);
 80a014e:	9003      	str	r0, [sp, #12]
  if (sscanf(cmd, "%d, %d, %d", &y, &z, &color) == 3)
 80a0150:	ab03      	add	r3, sp, #12
 80a0152:	6828      	ldr	r0, [r5, #0]
 80a0154:	aa02      	add	r2, sp, #8
 80a0156:	f000 fef9 	bl	80a0f4c <sscanf>
 80a015a:	e9dd 6102 	ldrd	r6, r1, [sp, #8]
 80a015e:	230c      	movs	r3, #12
 80a0160:	2803      	cmp	r0, #3
  {
    for (int x = 0; x < 4; x++)
    {
      grid[x][y][z][0] = allVariants[color][0];
 80a0162:	6820      	ldr	r0, [r4, #0]
 80a0164:	4d17      	ldr	r5, [pc, #92]	; (80a01c4 <_Z8drawXRow6String+0xa0>)
 80a0166:	fb03 f000 	mul.w	r0, r3, r0
 80a016a:	eb05 0400 	add.w	r4, r5, r0
 80a016e:	582f      	ldr	r7, [r5, r0]
 80a0170:	4a15      	ldr	r2, [pc, #84]	; (80a01c8 <_Z8drawXRow6String+0xa4>)
      grid[x][y][z][1] = allVariants[color][1];
 80a0172:	6865      	ldr	r5, [r4, #4]
  if (sscanf(cmd, "%d, %d, %d", &y, &z, &color) == 3)
 80a0174:	d111      	bne.n	80a019a <_Z8drawXRow6String+0x76>
 80a0176:	4359      	muls	r1, r3
 80a0178:	2330      	movs	r3, #48	; 0x30
 80a017a:	fb03 1306 	mla	r3, r3, r6, r1
 80a017e:	4413      	add	r3, r2
    for (int x = 0; x < 4; x++)
 80a0180:	2200      	movs	r2, #0
      grid[x][y][z][2] = allVariants[color][2];
 80a0182:	68a0      	ldr	r0, [r4, #8]
    for (int x = 0; x < 4; x++)
 80a0184:	3201      	adds	r2, #1
 80a0186:	2a04      	cmp	r2, #4
      grid[x][y][z][1] = allVariants[color][1];
 80a0188:	e9c3 7500 	strd	r7, r5, [r3]
      grid[x][y][z][2] = allVariants[color][2];
 80a018c:	6098      	str	r0, [r3, #8]
    for (int x = 0; x < 4; x++)
 80a018e:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
 80a0192:	d1f7      	bne.n	80a0184 <_Z8drawXRow6String+0x60>
      grid[x][y][z][1] = allVariants[color][1];
      grid[x][y][z][2] = allVariants[color][2];
    }
  }
  return 1;
}
 80a0194:	2001      	movs	r0, #1
 80a0196:	b005      	add	sp, #20
 80a0198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a019a:	2030      	movs	r0, #48	; 0x30
 80a019c:	4370      	muls	r0, r6
 80a019e:	fb03 0301 	mla	r3, r3, r1, r0
 80a01a2:	4413      	add	r3, r2
    for (int x = 0; x < 4; x++)
 80a01a4:	2200      	movs	r2, #0
      grid[x][y][z][2] = allVariants[color][2];
 80a01a6:	68a4      	ldr	r4, [r4, #8]
    for (int x = 0; x < 4; x++)
 80a01a8:	3201      	adds	r2, #1
 80a01aa:	2a04      	cmp	r2, #4
      grid[x][y][z][1] = allVariants[color][1];
 80a01ac:	e9c3 7500 	strd	r7, r5, [r3]
      grid[x][y][z][2] = allVariants[color][2];
 80a01b0:	609c      	str	r4, [r3, #8]
    for (int x = 0; x < 4; x++)
 80a01b2:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
 80a01b6:	d1f7      	bne.n	80a01a8 <_Z8drawXRow6String+0x84>
 80a01b8:	e7ec      	b.n	80a0194 <_Z8drawXRow6String+0x70>
 80a01ba:	bf00      	nop
 80a01bc:	200009f4 	.word	0x200009f4
 80a01c0:	080a1b88 	.word	0x080a1b88
 80a01c4:	20000000 	.word	0x20000000
 80a01c8:	20000480 	.word	0x20000480

080a01cc <_Z8drawYRow6String>:

int drawYRow(String cmd)
{
 80a01cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  int x = random(0, 4);
 80a01ce:	2104      	movs	r1, #4
{
 80a01d0:	b085      	sub	sp, #20
 80a01d2:	4605      	mov	r5, r0
  int x = random(0, 4);
 80a01d4:	2000      	movs	r0, #0
 80a01d6:	f001 f832 	bl	80a123e <_Z6randomii>
  int z = random(0, 4);
  color = color > 8 ? 0 : color + 1;
 80a01da:	4c22      	ldr	r4, [pc, #136]	; (80a0264 <_Z8drawYRow6String+0x98>)
  int z = random(0, 4);
 80a01dc:	2104      	movs	r1, #4
  int x = random(0, 4);
 80a01de:	9002      	str	r0, [sp, #8]
  int z = random(0, 4);
 80a01e0:	2000      	movs	r0, #0
 80a01e2:	f001 f82c 	bl	80a123e <_Z6randomii>
  color = color > 8 ? 0 : color + 1;
 80a01e6:	6823      	ldr	r3, [r4, #0]
  if (sscanf(cmd, "%d, %d, %d", &x, &z, &color) == 3)
 80a01e8:	491f      	ldr	r1, [pc, #124]	; (80a0268 <_Z8drawYRow6String+0x9c>)
  color = color > 8 ? 0 : color + 1;
 80a01ea:	2b08      	cmp	r3, #8
 80a01ec:	bfcc      	ite	gt
 80a01ee:	2300      	movgt	r3, #0
 80a01f0:	3301      	addle	r3, #1
 80a01f2:	6023      	str	r3, [r4, #0]
  if (sscanf(cmd, "%d, %d, %d", &x, &z, &color) == 3)
 80a01f4:	9400      	str	r4, [sp, #0]
  int z = random(0, 4);
 80a01f6:	9003      	str	r0, [sp, #12]
  if (sscanf(cmd, "%d, %d, %d", &x, &z, &color) == 3)
 80a01f8:	ab03      	add	r3, sp, #12
 80a01fa:	6828      	ldr	r0, [r5, #0]
 80a01fc:	aa02      	add	r2, sp, #8
 80a01fe:	f000 fea5 	bl	80a0f4c <sscanf>
 80a0202:	e9dd 6102 	ldrd	r6, r1, [sp, #8]
 80a0206:	230c      	movs	r3, #12
 80a0208:	2803      	cmp	r0, #3
  {
    for (int y = 0; y < 4; y++)
    {
      grid[x][y][z][0] = allVariants[color][0];
 80a020a:	6820      	ldr	r0, [r4, #0]
 80a020c:	4d17      	ldr	r5, [pc, #92]	; (80a026c <_Z8drawYRow6String+0xa0>)
 80a020e:	fb03 f000 	mul.w	r0, r3, r0
 80a0212:	eb05 0400 	add.w	r4, r5, r0
 80a0216:	582f      	ldr	r7, [r5, r0]
 80a0218:	4a15      	ldr	r2, [pc, #84]	; (80a0270 <_Z8drawYRow6String+0xa4>)
      grid[x][y][z][1] = allVariants[color][1];
 80a021a:	6865      	ldr	r5, [r4, #4]
  if (sscanf(cmd, "%d, %d, %d", &x, &z, &color) == 3)
 80a021c:	d111      	bne.n	80a0242 <_Z8drawYRow6String+0x76>
 80a021e:	4359      	muls	r1, r3
 80a0220:	23c0      	movs	r3, #192	; 0xc0
 80a0222:	fb03 1306 	mla	r3, r3, r6, r1
 80a0226:	4413      	add	r3, r2
    for (int y = 0; y < 4; y++)
 80a0228:	2200      	movs	r2, #0
      grid[x][y][z][2] = allVariants[color][2];
 80a022a:	68a0      	ldr	r0, [r4, #8]
    for (int y = 0; y < 4; y++)
 80a022c:	3201      	adds	r2, #1
 80a022e:	2a04      	cmp	r2, #4
      grid[x][y][z][1] = allVariants[color][1];
 80a0230:	e9c3 7500 	strd	r7, r5, [r3]
      grid[x][y][z][2] = allVariants[color][2];
 80a0234:	6098      	str	r0, [r3, #8]
    for (int y = 0; y < 4; y++)
 80a0236:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80a023a:	d1f7      	bne.n	80a022c <_Z8drawYRow6String+0x60>
      grid[x][y][z][1] = allVariants[color][1];
      grid[x][y][z][2] = allVariants[color][2];
    }
  }
  return 1;
}
 80a023c:	2001      	movs	r0, #1
 80a023e:	b005      	add	sp, #20
 80a0240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0242:	20c0      	movs	r0, #192	; 0xc0
 80a0244:	4370      	muls	r0, r6
 80a0246:	fb03 0301 	mla	r3, r3, r1, r0
 80a024a:	4413      	add	r3, r2
    for (int y = 0; y < 4; y++)
 80a024c:	2200      	movs	r2, #0
      grid[x][y][z][2] = allVariants[color][2];
 80a024e:	68a4      	ldr	r4, [r4, #8]
    for (int y = 0; y < 4; y++)
 80a0250:	3201      	adds	r2, #1
 80a0252:	2a04      	cmp	r2, #4
      grid[x][y][z][1] = allVariants[color][1];
 80a0254:	e9c3 7500 	strd	r7, r5, [r3]
      grid[x][y][z][2] = allVariants[color][2];
 80a0258:	609c      	str	r4, [r3, #8]
    for (int y = 0; y < 4; y++)
 80a025a:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80a025e:	d1f7      	bne.n	80a0250 <_Z8drawYRow6String+0x84>
 80a0260:	e7ec      	b.n	80a023c <_Z8drawYRow6String+0x70>
 80a0262:	bf00      	nop
 80a0264:	200009f4 	.word	0x200009f4
 80a0268:	080a1b88 	.word	0x080a1b88
 80a026c:	20000000 	.word	0x20000000
 80a0270:	20000480 	.word	0x20000480

080a0274 <_Z8drawZRow6String>:

int drawZRow(String cmd)
{
 80a0274:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a0276:	4605      	mov	r5, r0
  int x = random(0, 4);
 80a0278:	2104      	movs	r1, #4
 80a027a:	2000      	movs	r0, #0
 80a027c:	f000 ffdf 	bl	80a123e <_Z6randomii>
  int y = random(0, 4);
  color = color > 8 ? 0 : color + 1;
 80a0280:	4c21      	ldr	r4, [pc, #132]	; (80a0308 <_Z8drawZRow6String+0x94>)
  int y = random(0, 4);
 80a0282:	2104      	movs	r1, #4
  int x = random(0, 4);
 80a0284:	9002      	str	r0, [sp, #8]
  int y = random(0, 4);
 80a0286:	2000      	movs	r0, #0
 80a0288:	f000 ffd9 	bl	80a123e <_Z6randomii>
  color = color > 8 ? 0 : color + 1;
 80a028c:	6823      	ldr	r3, [r4, #0]
  if (sscanf(cmd, "%d, %d, %d", &x, &y, &color) == 3)
 80a028e:	491f      	ldr	r1, [pc, #124]	; (80a030c <_Z8drawZRow6String+0x98>)
  color = color > 8 ? 0 : color + 1;
 80a0290:	2b08      	cmp	r3, #8
 80a0292:	bfcc      	ite	gt
 80a0294:	2300      	movgt	r3, #0
 80a0296:	3301      	addle	r3, #1
 80a0298:	6023      	str	r3, [r4, #0]
  if (sscanf(cmd, "%d, %d, %d", &x, &y, &color) == 3)
 80a029a:	9400      	str	r4, [sp, #0]
  int y = random(0, 4);
 80a029c:	9003      	str	r0, [sp, #12]
  if (sscanf(cmd, "%d, %d, %d", &x, &y, &color) == 3)
 80a029e:	ab03      	add	r3, sp, #12
 80a02a0:	6828      	ldr	r0, [r5, #0]
 80a02a2:	aa02      	add	r2, sp, #8
 80a02a4:	f000 fe52 	bl	80a0f4c <sscanf>
 80a02a8:	210c      	movs	r1, #12
  {
    for (int z = 0; z < 4; z++)
    {
      grid[x][y][z][0] = allVariants[color][0];
 80a02aa:	6823      	ldr	r3, [r4, #0]
 80a02ac:	4d18      	ldr	r5, [pc, #96]	; (80a0310 <_Z8drawZRow6String+0x9c>)
 80a02ae:	4359      	muls	r1, r3
  if (sscanf(cmd, "%d, %d, %d", &x, &y, &color) == 3)
 80a02b0:	2803      	cmp	r0, #3
      grid[x][y][z][0] = allVariants[color][0];
 80a02b2:	eb05 0301 	add.w	r3, r5, r1
 80a02b6:	4a17      	ldr	r2, [pc, #92]	; (80a0314 <_Z8drawZRow6String+0xa0>)
 80a02b8:	586d      	ldr	r5, [r5, r1]
 80a02ba:	e9dd 6002 	ldrd	r6, r0, [sp, #8]
      grid[x][y][z][1] = allVariants[color][1];
      grid[x][y][z][2] = allVariants[color][2];
 80a02be:	e9d3 4101 	ldrd	r4, r1, [r3, #4]
  if (sscanf(cmd, "%d, %d, %d", &x, &y, &color) == 3)
 80a02c2:	d111      	bne.n	80a02e8 <_Z8drawZRow6String+0x74>
 80a02c4:	2330      	movs	r3, #48	; 0x30
 80a02c6:	4358      	muls	r0, r3
 80a02c8:	23c0      	movs	r3, #192	; 0xc0
 80a02ca:	fb03 0306 	mla	r3, r3, r6, r0
 80a02ce:	4413      	add	r3, r2
    for (int z = 0; z < 4; z++)
 80a02d0:	2200      	movs	r2, #0
 80a02d2:	3201      	adds	r2, #1
 80a02d4:	2a04      	cmp	r2, #4
      grid[x][y][z][1] = allVariants[color][1];
 80a02d6:	e9c3 5400 	strd	r5, r4, [r3]
      grid[x][y][z][2] = allVariants[color][2];
 80a02da:	6099      	str	r1, [r3, #8]
    for (int z = 0; z < 4; z++)
 80a02dc:	f103 030c 	add.w	r3, r3, #12
 80a02e0:	d1f7      	bne.n	80a02d2 <_Z8drawZRow6String+0x5e>
      grid[x][y][z][2] = allVariants[color][2];
      ;
    }
  }
  return 1;
}
 80a02e2:	2001      	movs	r0, #1
 80a02e4:	b004      	add	sp, #16
 80a02e6:	bd70      	pop	{r4, r5, r6, pc}
 80a02e8:	23c0      	movs	r3, #192	; 0xc0
 80a02ea:	4373      	muls	r3, r6
 80a02ec:	2630      	movs	r6, #48	; 0x30
 80a02ee:	fb06 3300 	mla	r3, r6, r0, r3
 80a02f2:	4413      	add	r3, r2
    for (int z = 0; z < 4; z++)
 80a02f4:	2200      	movs	r2, #0
 80a02f6:	3201      	adds	r2, #1
 80a02f8:	2a04      	cmp	r2, #4
      grid[x][y][z][1] = allVariants[color][1];
 80a02fa:	e9c3 5400 	strd	r5, r4, [r3]
      grid[x][y][z][2] = allVariants[color][2];
 80a02fe:	6099      	str	r1, [r3, #8]
    for (int z = 0; z < 4; z++)
 80a0300:	f103 030c 	add.w	r3, r3, #12
 80a0304:	d1f7      	bne.n	80a02f6 <_Z8drawZRow6String+0x82>
 80a0306:	e7ec      	b.n	80a02e2 <_Z8drawZRow6String+0x6e>
 80a0308:	200009f4 	.word	0x200009f4
 80a030c:	080a1b88 	.word	0x080a1b88
 80a0310:	20000000 	.word	0x20000000
 80a0314:	20000480 	.word	0x20000480

080a0318 <_Z13drawWholeCube6String>:
  }
  return 1;
}

int drawWholeCube(String cmd)
{
 80a0318:	b5f0      	push	{r4, r5, r6, r7, lr}
  color = color > 8 ? 0 : color + 1;
 80a031a:	4a14      	ldr	r2, [pc, #80]	; (80a036c <_Z13drawWholeCube6String+0x54>)
  {
    for (int y = 0; y < 4; y++)
    {
      for (int z = 0; z < 4; z++)
      {
        grid[x][y][z][0] = allVariants[color][0];
 80a031c:	4914      	ldr	r1, [pc, #80]	; (80a0370 <_Z13drawWholeCube6String+0x58>)
  color = color > 8 ? 0 : color + 1;
 80a031e:	6813      	ldr	r3, [r2, #0]
 80a0320:	f8df c050 	ldr.w	ip, [pc, #80]	; 80a0374 <_Z13drawWholeCube6String+0x5c>
 80a0324:	2b08      	cmp	r3, #8
 80a0326:	bfcc      	ite	gt
 80a0328:	2300      	movgt	r3, #0
 80a032a:	3301      	addle	r3, #1
 80a032c:	6013      	str	r3, [r2, #0]
        grid[x][y][z][0] = allVariants[color][0];
 80a032e:	220c      	movs	r2, #12
 80a0330:	4353      	muls	r3, r2
 80a0332:	18ca      	adds	r2, r1, r3
        grid[x][y][z][1] = allVariants[color][1];
        grid[x][y][z][2] = allVariants[color][2];
 80a0334:	e9d2 6701 	ldrd	r6, r7, [r2, #4]
 80a0338:	2200      	movs	r2, #0
        grid[x][y][z][0] = allVariants[color][0];
 80a033a:	58cd      	ldr	r5, [r1, r3]
    for (int y = 0; y < 4; y++)
 80a033c:	2100      	movs	r1, #0
 80a033e:	eb0c 0002 	add.w	r0, ip, r2
 80a0342:	4603      	mov	r3, r0
      for (int z = 0; z < 4; z++)
 80a0344:	2400      	movs	r4, #0
 80a0346:	3401      	adds	r4, #1
 80a0348:	2c04      	cmp	r4, #4
        grid[x][y][z][1] = allVariants[color][1];
 80a034a:	e9c3 5600 	strd	r5, r6, [r3]
        grid[x][y][z][2] = allVariants[color][2];
 80a034e:	609f      	str	r7, [r3, #8]
      for (int z = 0; z < 4; z++)
 80a0350:	f103 030c 	add.w	r3, r3, #12
 80a0354:	d1f7      	bne.n	80a0346 <_Z13drawWholeCube6String+0x2e>
    for (int y = 0; y < 4; y++)
 80a0356:	3101      	adds	r1, #1
 80a0358:	2904      	cmp	r1, #4
 80a035a:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80a035e:	d1f0      	bne.n	80a0342 <_Z13drawWholeCube6String+0x2a>
  for (int x = 0; x < 4; x++)
 80a0360:	32c0      	adds	r2, #192	; 0xc0
 80a0362:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80a0366:	d1e9      	bne.n	80a033c <_Z13drawWholeCube6String+0x24>
      }
    }
  }
  return 1;
}
 80a0368:	2001      	movs	r0, #1
 80a036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a036c:	200009f4 	.word	0x200009f4
 80a0370:	20000000 	.word	0x20000000
 80a0374:	20000480 	.word	0x20000480

080a0378 <_Z17crazyFollowColors6String>:

int crazyFollowColors(String cmd)
{
 80a0378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a037c:	2000      	movs	r0, #0
    for (int y = 0; y < 4; y++)
    {
      for (int z = 0; z < 4; z++)
      {
        color = color > 8 ? 0 : color + 1;
        grid[x][y][z][0] = allVariants[color][0];
 80a037e:	f04f 090c 	mov.w	r9, #12
 80a0382:	4917      	ldr	r1, [pc, #92]	; (80a03e0 <_Z17crazyFollowColors6String+0x68>)
 80a0384:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80a03e4 <_Z17crazyFollowColors6String+0x6c>
 80a0388:	680b      	ldr	r3, [r1, #0]
 80a038a:	f8df c05c 	ldr.w	ip, [pc, #92]	; 80a03e8 <_Z17crazyFollowColors6String+0x70>
    for (int y = 0; y < 4; y++)
 80a038e:	2400      	movs	r4, #0
 80a0390:	eb08 0500 	add.w	r5, r8, r0
 80a0394:	462a      	mov	r2, r5
      for (int z = 0; z < 4; z++)
 80a0396:	2600      	movs	r6, #0
        color = color > 8 ? 0 : color + 1;
 80a0398:	2b08      	cmp	r3, #8
 80a039a:	bfcc      	ite	gt
 80a039c:	2300      	movgt	r3, #0
 80a039e:	3301      	addle	r3, #1
        grid[x][y][z][0] = allVariants[color][0];
 80a03a0:	fb09 f703 	mul.w	r7, r9, r3
 80a03a4:	eb0c 0e07 	add.w	lr, ip, r7
 80a03a8:	f85c 7007 	ldr.w	r7, [ip, r7]
      for (int z = 0; z < 4; z++)
 80a03ac:	3601      	adds	r6, #1
        grid[x][y][z][0] = allVariants[color][0];
 80a03ae:	6017      	str	r7, [r2, #0]
        grid[x][y][z][1] = allVariants[color][1];
 80a03b0:	f8de 7004 	ldr.w	r7, [lr, #4]
      for (int z = 0; z < 4; z++)
 80a03b4:	2e04      	cmp	r6, #4
        grid[x][y][z][1] = allVariants[color][1];
 80a03b6:	6057      	str	r7, [r2, #4]
        grid[x][y][z][2] = allVariants[color][2];
 80a03b8:	f8de 7008 	ldr.w	r7, [lr, #8]
 80a03bc:	f102 020c 	add.w	r2, r2, #12
 80a03c0:	f842 7c04 	str.w	r7, [r2, #-4]
      for (int z = 0; z < 4; z++)
 80a03c4:	d1e8      	bne.n	80a0398 <_Z17crazyFollowColors6String+0x20>
    for (int y = 0; y < 4; y++)
 80a03c6:	3401      	adds	r4, #1
 80a03c8:	2c04      	cmp	r4, #4
 80a03ca:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80a03ce:	d1e1      	bne.n	80a0394 <_Z17crazyFollowColors6String+0x1c>
  for (int x = 0; x < 4; x++)
 80a03d0:	30c0      	adds	r0, #192	; 0xc0
 80a03d2:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 80a03d6:	d1da      	bne.n	80a038e <_Z17crazyFollowColors6String+0x16>
 80a03d8:	600b      	str	r3, [r1, #0]
      }
    }
  }
  return 1;
}
 80a03da:	2001      	movs	r0, #1
 80a03dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a03e0:	200009f4 	.word	0x200009f4
 80a03e4:	20000480 	.word	0x20000480
 80a03e8:	20000000 	.word	0x20000000

080a03ec <_Z9resetGridv>:
    resetGrid();
  }
}

void resetGrid()
{
 80a03ec:	2200      	movs	r2, #0
  {
    for (int y = 0; y < 4; y++)
    {
      for (int z = 0; z < 4; z++)
      {
        grid[x][y][z][0] = 4;
 80a03ee:	2104      	movs	r1, #4
{
 80a03f0:	b570      	push	{r4, r5, r6, lr}
 80a03f2:	4e0b      	ldr	r6, [pc, #44]	; (80a0420 <_Z9resetGridv+0x34>)
    for (int y = 0; y < 4; y++)
 80a03f4:	2000      	movs	r0, #0
 80a03f6:	18b4      	adds	r4, r6, r2
 80a03f8:	4623      	mov	r3, r4
      for (int z = 0; z < 4; z++)
 80a03fa:	2500      	movs	r5, #0
 80a03fc:	3501      	adds	r5, #1
 80a03fe:	2d04      	cmp	r5, #4
        grid[x][y][z][1] = 4;
 80a0400:	e9c3 1100 	strd	r1, r1, [r3]
        grid[x][y][z][2] = 4;
 80a0404:	6099      	str	r1, [r3, #8]
      for (int z = 0; z < 4; z++)
 80a0406:	f103 030c 	add.w	r3, r3, #12
 80a040a:	d1f7      	bne.n	80a03fc <_Z9resetGridv+0x10>
    for (int y = 0; y < 4; y++)
 80a040c:	3001      	adds	r0, #1
 80a040e:	2804      	cmp	r0, #4
 80a0410:	f104 0430 	add.w	r4, r4, #48	; 0x30
 80a0414:	d1f0      	bne.n	80a03f8 <_Z9resetGridv+0xc>
  for (int x = 0; x < 4; x++)
 80a0416:	32c0      	adds	r2, #192	; 0xc0
 80a0418:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80a041c:	d1ea      	bne.n	80a03f4 <_Z9resetGridv+0x8>
      }
    }
  }
}
 80a041e:	bd70      	pop	{r4, r5, r6, pc}
 80a0420:	20000480 	.word	0x20000480

080a0424 <_Z20checkAnimationChangev>:
{
 80a0424:	b538      	push	{r3, r4, r5, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0426:	f000 fc13 	bl	80a0c50 <HAL_Timer_Get_Milli_Seconds>
  if ((now - lastAnimationChange) >= animationChange)
 80a042a:	4d0d      	ldr	r5, [pc, #52]	; (80a0460 <_Z20checkAnimationChangev+0x3c>)
 80a042c:	4a0d      	ldr	r2, [pc, #52]	; (80a0464 <_Z20checkAnimationChangev+0x40>)
 80a042e:	682b      	ldr	r3, [r5, #0]
 80a0430:	6812      	ldr	r2, [r2, #0]
 80a0432:	1ac3      	subs	r3, r0, r3
 80a0434:	4293      	cmp	r3, r2
 80a0436:	4604      	mov	r4, r0
 80a0438:	d310      	bcc.n	80a045c <_Z20checkAnimationChangev+0x38>
    resetGrid();
 80a043a:	f7ff ffd7 	bl	80a03ec <_Z9resetGridv>
    if (currentAnimation == drawZRowAnimation)
 80a043e:	490a      	ldr	r1, [pc, #40]	; (80a0468 <_Z20checkAnimationChangev+0x44>)
    lastAnimationChange = now;
 80a0440:	602c      	str	r4, [r5, #0]
    if (currentAnimation == drawZRowAnimation)
 80a0442:	780b      	ldrb	r3, [r1, #0]
 80a0444:	2b07      	cmp	r3, #7
      currentAnimation = static_cast<Animation>((currentAnimation + 1) % 9);
 80a0446:	bf1d      	ittte	ne
 80a0448:	2209      	movne	r2, #9
 80a044a:	3301      	addne	r3, #1
 80a044c:	fbb3 f2f2 	udivne	r2, r3, r2
      currentAnimation = chaseTheDotAnimation;
 80a0450:	2300      	moveq	r3, #0
      currentAnimation = static_cast<Animation>((currentAnimation + 1) % 9);
 80a0452:	bf1c      	itt	ne
 80a0454:	eb02 02c2 	addne.w	r2, r2, r2, lsl #3
 80a0458:	1a9b      	subne	r3, r3, r2
 80a045a:	700b      	strb	r3, [r1, #0]
}
 80a045c:	bd38      	pop	{r3, r4, r5, pc}
 80a045e:	bf00      	nop
 80a0460:	200009f8 	.word	0x200009f8
 80a0464:	20000078 	.word	0x20000078
 80a0468:	2000027c 	.word	0x2000027c

080a046c <_Z14checkResetGridv>:
{
 80a046c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int off[3] = {4,
 80a0470:	2400      	movs	r4, #0
  bool reset = true;
 80a0472:	2601      	movs	r6, #1
  int off[3] = {4,
 80a0474:	4b12      	ldr	r3, [pc, #72]	; (80a04c0 <_Z14checkResetGridv+0x54>)
{
 80a0476:	b085      	sub	sp, #20
  int off[3] = {4,
 80a0478:	ad01      	add	r5, sp, #4
 80a047a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80a047e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  for (int x = 0; x < 4; x++)
 80a0482:	f8df 9040 	ldr.w	r9, [pc, #64]	; 80a04c4 <_Z14checkResetGridv+0x58>
    for (int y = 0; y < 4; y++)
 80a0486:	2700      	movs	r7, #0
 80a0488:	eb09 0804 	add.w	r8, r9, r4
      template<typename _Tp>
	static bool
	equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
	{
	  if (const size_t __len = (__last1 - __first1))
	    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
 80a048c:	4640      	mov	r0, r8
 80a048e:	220c      	movs	r2, #12
 80a0490:	4629      	mov	r1, r5
 80a0492:	f001 fa83 	bl	80a199c <memcmp>
 80a0496:	3701      	adds	r7, #1
          reset = false;
 80a0498:	2800      	cmp	r0, #0
 80a049a:	bf08      	it	eq
 80a049c:	2600      	moveq	r6, #0
    for (int y = 0; y < 4; y++)
 80a049e:	2f04      	cmp	r7, #4
 80a04a0:	f108 0830 	add.w	r8, r8, #48	; 0x30
 80a04a4:	d1f2      	bne.n	80a048c <_Z14checkResetGridv+0x20>
  for (int x = 0; x < 4; x++)
 80a04a6:	34c0      	adds	r4, #192	; 0xc0
 80a04a8:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 80a04ac:	d1eb      	bne.n	80a0486 <_Z14checkResetGridv+0x1a>
  if (reset)
 80a04ae:	b126      	cbz	r6, 80a04ba <_Z14checkResetGridv+0x4e>
}
 80a04b0:	b005      	add	sp, #20
 80a04b2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    resetGrid();
 80a04b6:	f7ff bf99 	b.w	80a03ec <_Z9resetGridv>
}
 80a04ba:	b005      	add	sp, #20
 80a04bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a04c0:	080a1b94 	.word	0x080a1b94
 80a04c4:	20000480 	.word	0x20000480

080a04c8 <_Z11chaseTheDotv>:
{
 80a04c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  checkResetGrid();
 80a04cc:	f7ff ffce 	bl	80a046c <_Z14checkResetGridv>
  switch (random(0, 6))
 80a04d0:	2106      	movs	r1, #6
 80a04d2:	2000      	movs	r0, #0
 80a04d4:	f000 feb3 	bl	80a123e <_Z6randomii>
 80a04d8:	4c31      	ldr	r4, [pc, #196]	; (80a05a0 <_Z11chaseTheDotv+0xd8>)
 80a04da:	4932      	ldr	r1, [pc, #200]	; (80a05a4 <_Z11chaseTheDotv+0xdc>)
 80a04dc:	4a32      	ldr	r2, [pc, #200]	; (80a05a8 <_Z11chaseTheDotv+0xe0>)
 80a04de:	2805      	cmp	r0, #5
 80a04e0:	d80e      	bhi.n	80a0500 <_Z11chaseTheDotv+0x38>
 80a04e2:	e8df f000 	tbb	[pc, r0]
 80a04e6:	0803      	.short	0x0803
 80a04e8:	56514b46 	.word	0x56514b46
    if (xpos > 0)
 80a04ec:	6823      	ldr	r3, [r4, #0]
 80a04ee:	2b00      	cmp	r3, #0
 80a04f0:	dd01      	ble.n	80a04f6 <_Z11chaseTheDotv+0x2e>
    xpos--;
 80a04f2:	3b01      	subs	r3, #1
 80a04f4:	e003      	b.n	80a04fe <_Z11chaseTheDotv+0x36>
    if (xpos < 3)
 80a04f6:	6823      	ldr	r3, [r4, #0]
 80a04f8:	2b02      	cmp	r3, #2
 80a04fa:	dcfa      	bgt.n	80a04f2 <_Z11chaseTheDotv+0x2a>
      xpos++;
 80a04fc:	3301      	adds	r3, #1
 80a04fe:	6023      	str	r3, [r4, #0]
  if (std::equal(std::begin(grid[xpos][ypos][zpos]), std::end(grid[xpos][ypos][zpos]), std::begin(allVariants[color])))
 80a0500:	6827      	ldr	r7, [r4, #0]
 80a0502:	6814      	ldr	r4, [r2, #0]
 80a0504:	220c      	movs	r2, #12
 80a0506:	2030      	movs	r0, #48	; 0x30
 80a0508:	fb02 f304 	mul.w	r3, r2, r4
 80a050c:	f8d1 8000 	ldr.w	r8, [r1]
 80a0510:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80a05b4 <_Z11chaseTheDotv+0xec>
 80a0514:	fb00 3308 	mla	r3, r0, r8, r3
 80a0518:	20c0      	movs	r0, #192	; 0xc0
 80a051a:	fb00 3007 	mla	r0, r0, r7, r3
 80a051e:	f8d9 a000 	ldr.w	sl, [r9]
 80a0522:	4e22      	ldr	r6, [pc, #136]	; (80a05ac <_Z11chaseTheDotv+0xe4>)
 80a0524:	4d22      	ldr	r5, [pc, #136]	; (80a05b0 <_Z11chaseTheDotv+0xe8>)
 80a0526:	fb02 610a 	mla	r1, r2, sl, r6
 80a052a:	4428      	add	r0, r5
 80a052c:	f001 fa36 	bl	80a199c <memcmp>
 80a0530:	b930      	cbnz	r0, 80a0540 <_Z11chaseTheDotv+0x78>
    color = color > 8 ? 0 : color + 1;
 80a0532:	f1ba 0f08 	cmp.w	sl, #8
 80a0536:	bfd8      	it	le
 80a0538:	f10a 0001 	addle.w	r0, sl, #1
 80a053c:	f8c9 0000 	str.w	r0, [r9]
  grid[xpos][ypos][zpos][0] = allVariants[color][0];
 80a0540:	2230      	movs	r2, #48	; 0x30
 80a0542:	230c      	movs	r3, #12
 80a0544:	fb02 f808 	mul.w	r8, r2, r8
 80a0548:	22c0      	movs	r2, #192	; 0xc0
 80a054a:	f8d9 0000 	ldr.w	r0, [r9]
 80a054e:	435c      	muls	r4, r3
 80a0550:	4357      	muls	r7, r2
 80a0552:	4343      	muls	r3, r0
 80a0554:	eb04 0108 	add.w	r1, r4, r8
 80a0558:	19ca      	adds	r2, r1, r7
 80a055a:	18f1      	adds	r1, r6, r3
 80a055c:	58f3      	ldr	r3, [r6, r3]
  grid[xpos][ypos][zpos][1] = allVariants[color][1];
 80a055e:	443c      	add	r4, r7
  grid[xpos][ypos][zpos][0] = allVariants[color][0];
 80a0560:	50ab      	str	r3, [r5, r2]
  grid[xpos][ypos][zpos][1] = allVariants[color][1];
 80a0562:	4444      	add	r4, r8
 80a0564:	684b      	ldr	r3, [r1, #4]
 80a0566:	442c      	add	r4, r5
 80a0568:	6063      	str	r3, [r4, #4]
  grid[xpos][ypos][zpos][2] = allVariants[color][2];
 80a056a:	688b      	ldr	r3, [r1, #8]
 80a056c:	60a3      	str	r3, [r4, #8]
}
 80a056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ypos > 0)
 80a0572:	680b      	ldr	r3, [r1, #0]
 80a0574:	2b00      	cmp	r3, #0
 80a0576:	dd01      	ble.n	80a057c <_Z11chaseTheDotv+0xb4>
    ypos--;
 80a0578:	3b01      	subs	r3, #1
 80a057a:	e003      	b.n	80a0584 <_Z11chaseTheDotv+0xbc>
    if (ypos < 3)
 80a057c:	680b      	ldr	r3, [r1, #0]
 80a057e:	2b02      	cmp	r3, #2
 80a0580:	dcfa      	bgt.n	80a0578 <_Z11chaseTheDotv+0xb0>
      ypos++;
 80a0582:	3301      	adds	r3, #1
    ypos--;
 80a0584:	600b      	str	r3, [r1, #0]
    break;
 80a0586:	e7bb      	b.n	80a0500 <_Z11chaseTheDotv+0x38>
    if (zpos > 0)
 80a0588:	6813      	ldr	r3, [r2, #0]
 80a058a:	2b00      	cmp	r3, #0
 80a058c:	dd01      	ble.n	80a0592 <_Z11chaseTheDotv+0xca>
    zpos--;
 80a058e:	3b01      	subs	r3, #1
 80a0590:	e003      	b.n	80a059a <_Z11chaseTheDotv+0xd2>
    if (zpos < 3)
 80a0592:	6813      	ldr	r3, [r2, #0]
 80a0594:	2b02      	cmp	r3, #2
 80a0596:	dcfa      	bgt.n	80a058e <_Z11chaseTheDotv+0xc6>
      zpos++;
 80a0598:	3301      	adds	r3, #1
    zpos--;
 80a059a:	6013      	str	r3, [r2, #0]
    break;
 80a059c:	e7b0      	b.n	80a0500 <_Z11chaseTheDotv+0x38>
 80a059e:	bf00      	nop
 80a05a0:	20000a04 	.word	0x20000a04
 80a05a4:	20000a08 	.word	0x20000a08
 80a05a8:	20000a0c 	.word	0x20000a0c
 80a05ac:	20000000 	.word	0x20000000
 80a05b0:	20000480 	.word	0x20000480
 80a05b4:	200009f4 	.word	0x200009f4

080a05b8 <_Z8drawLineiiiiiii>:

void drawLine(int color, int startx, int starty, int startz, int endx, int endy, int endz)
{
 80a05b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a05bc:	b08d      	sub	sp, #52	; 0x34
 80a05be:	9309      	str	r3, [sp, #36]	; 0x24
  bool reverseX = false;
  bool reverseY = false;
  bool reverseZ = false;
  if (startx > endx)
 80a05c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
{
 80a05c2:	e9cd 210a 	strd	r2, r1, [sp, #40]	; 0x28
  if (startx > endx)
 80a05c6:	4299      	cmp	r1, r3
{
 80a05c8:	9008      	str	r0, [sp, #32]
  if (startx > endx)
 80a05ca:	f340 808a 	ble.w	80a06e2 <_Z8drawLineiiiiiii+0x12a>
  {
    swapint(startx, endx);
 80a05ce:	a916      	add	r1, sp, #88	; 0x58
 80a05d0:	a80b      	add	r0, sp, #44	; 0x2c
 80a05d2:	f000 fb12 	bl	80a0bfa <_Z7swapintRiS_>
    reverseX = true;
 80a05d6:	2301      	movs	r3, #1
  }
  if (starty > endy)
 80a05d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  bool reverseX = false;
 80a05da:	9300      	str	r3, [sp, #0]
  if (starty > endy)
 80a05dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a05de:	429a      	cmp	r2, r3
 80a05e0:	f340 8081 	ble.w	80a06e6 <_Z8drawLineiiiiiii+0x12e>
  {
    swapint(starty, endy);
 80a05e4:	a917      	add	r1, sp, #92	; 0x5c
 80a05e6:	a80a      	add	r0, sp, #40	; 0x28
 80a05e8:	f000 fb07 	bl	80a0bfa <_Z7swapintRiS_>
    reverseY = true;
 80a05ec:	2301      	movs	r3, #1
  }
  if (startz > endz)
 80a05ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
  bool reverseY = false;
 80a05f0:	9301      	str	r3, [sp, #4]
  if (startz > endz)
 80a05f2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80a05f4:	429a      	cmp	r2, r3
 80a05f6:	dd78      	ble.n	80a06ea <_Z8drawLineiiiiiii+0x132>
  {
    swapint(startz, endz);
 80a05f8:	a918      	add	r1, sp, #96	; 0x60
 80a05fa:	a809      	add	r0, sp, #36	; 0x24
 80a05fc:	f000 fafd 	bl	80a0bfa <_Z7swapintRiS_>
    reverseZ = true;
 80a0600:	2301      	movs	r3, #1
  }

  int delx = endx - startx;
 80a0602:	9c16      	ldr	r4, [sp, #88]	; 0x58
  bool reverseZ = false;
 80a0604:	9302      	str	r3, [sp, #8]
  int delx = endx - startx;
 80a0606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  int dely = endy - starty;
 80a0608:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  int delx = endx - startx;
 80a060a:	1ae4      	subs	r4, r4, r3
  int dely = endy - starty;
 80a060c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  int delz = endz - startz;
 80a060e:	9e18      	ldr	r6, [sp, #96]	; 0x60
  int dely = endy - starty;
 80a0610:	1aed      	subs	r5, r5, r3
  int delz = endz - startz;
 80a0612:	9b09      	ldr	r3, [sp, #36]	; 0x24

  int longest = (delx > dely   ? delx > delz ? delx : delz > dely ? delz
 80a0614:	42ac      	cmp	r4, r5
  int delz = endz - startz;
 80a0616:	eba6 0603 	sub.w	r6, r6, r3
  int longest = (delx > dely   ? delx > delz ? delx : delz > dely ? delz
 80a061a:	dd68      	ble.n	80a06ee <_Z8drawLineiiiiiii+0x136>
 80a061c:	42b4      	cmp	r4, r6
 80a061e:	46a2      	mov	sl, r4
 80a0620:	bfb8      	it	lt
 80a0622:	46b2      	movlt	sl, r6
                                                                  : dely
                 : dely > delz ? dely
                 : delz > delx ? delz
                               : delx);
  for (int i = 0; i < longest; i++)
 80a0624:	2700      	movs	r7, #0
 80a0626:	46bb      	mov	fp, r7
 80a0628:	fb06 f30a 	mul.w	r3, r6, sl
 80a062c:	9305      	str	r3, [sp, #20]
 80a062e:	fb05 f30a 	mul.w	r3, r5, sl
 80a0632:	9306      	str	r3, [sp, #24]
 80a0634:	fb04 f30a 	mul.w	r3, r4, sl
 80a0638:	e9cd 7703 	strd	r7, r7, [sp, #12]
 80a063c:	9307      	str	r3, [sp, #28]
 80a063e:	9b03      	ldr	r3, [sp, #12]
 80a0640:	4553      	cmp	r3, sl
    grid[xpos][ypos][zpos][0] = allVariants[color][0];
    grid[xpos][ypos][zpos][1] = allVariants[color][1];
    grid[xpos][ypos][zpos][2] = allVariants[color][2];
  }

  if (reverseX)
 80a0642:	9b00      	ldr	r3, [sp, #0]
  for (int i = 0; i < longest; i++)
 80a0644:	da5d      	bge.n	80a0702 <_Z8drawLineiiiiiii+0x14a>
      xpos = roundClosest(((longest - i) * delx), longest) + startx;
 80a0646:	4651      	mov	r1, sl
    if (reverseX)
 80a0648:	2b00      	cmp	r3, #0
 80a064a:	d054      	beq.n	80a06f6 <_Z8drawLineiiiiiii+0x13e>
      xpos = roundClosest(((longest - i) * delx), longest) + startx;
 80a064c:	9807      	ldr	r0, [sp, #28]
      xpos = roundClosest((i * delx), longest) + startx;
 80a064e:	f000 fac9 	bl	80a0be4 <_Z12roundClosestii>
 80a0652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      ypos = roundClosest(((longest - i) * dely), longest) + starty;
 80a0654:	4651      	mov	r1, sl
      xpos = roundClosest((i * delx), longest) + startx;
 80a0656:	eb00 0803 	add.w	r8, r0, r3
    if (reverseY)
 80a065a:	9b01      	ldr	r3, [sp, #4]
 80a065c:	2b00      	cmp	r3, #0
 80a065e:	d04c      	beq.n	80a06fa <_Z8drawLineiiiiiii+0x142>
      ypos = roundClosest(((longest - i) * dely), longest) + starty;
 80a0660:	9806      	ldr	r0, [sp, #24]
      ypos = roundClosest((i * dely), longest) + starty;
 80a0662:	f000 fabf 	bl	80a0be4 <_Z12roundClosestii>
 80a0666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      zpos = roundClosest(((longest - i) * delz), longest) + startz;
 80a0668:	4651      	mov	r1, sl
      ypos = roundClosest((i * dely), longest) + starty;
 80a066a:	eb00 0903 	add.w	r9, r0, r3
    if (reverseZ)
 80a066e:	9b02      	ldr	r3, [sp, #8]
 80a0670:	2b00      	cmp	r3, #0
 80a0672:	d044      	beq.n	80a06fe <_Z8drawLineiiiiiii+0x146>
      zpos = roundClosest(((longest - i) * delz), longest) + startz;
 80a0674:	9805      	ldr	r0, [sp, #20]
      zpos = roundClosest((i * delz), longest) + startz;
 80a0676:	f000 fab5 	bl	80a0be4 <_Z12roundClosestii>
    grid[xpos][ypos][zpos][0] = allVariants[color][0];
 80a067a:	210c      	movs	r1, #12
      zpos = roundClosest((i * delz), longest) + startz;
 80a067c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a067e:	44ab      	add	fp, r5
 80a0680:	4418      	add	r0, r3
    grid[xpos][ypos][zpos][0] = allVariants[color][0];
 80a0682:	fb01 f300 	mul.w	r3, r1, r0
 80a0686:	2030      	movs	r0, #48	; 0x30
 80a0688:	fb00 f909 	mul.w	r9, r0, r9
 80a068c:	20c0      	movs	r0, #192	; 0xc0
 80a068e:	fb00 f808 	mul.w	r8, r0, r8
 80a0692:	4608      	mov	r0, r1
 80a0694:	9908      	ldr	r1, [sp, #32]
 80a0696:	eb03 0209 	add.w	r2, r3, r9
 80a069a:	4348      	muls	r0, r1
 80a069c:	492f      	ldr	r1, [pc, #188]	; (80a075c <_Z8drawLineiiiiiii+0x1a4>)
 80a069e:	4442      	add	r2, r8
 80a06a0:	eb01 0c00 	add.w	ip, r1, r0
    grid[xpos][ypos][zpos][1] = allVariants[color][1];
 80a06a4:	4498      	add	r8, r3
    grid[xpos][ypos][zpos][0] = allVariants[color][0];
 80a06a6:	5808      	ldr	r0, [r1, r0]
 80a06a8:	492d      	ldr	r1, [pc, #180]	; (80a0760 <_Z8drawLineiiiiiii+0x1a8>)
    grid[xpos][ypos][zpos][1] = allVariants[color][1];
 80a06aa:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80a06ae:	44c1      	add	r9, r8
 80a06b0:	4489      	add	r9, r1
    grid[xpos][ypos][zpos][0] = allVariants[color][0];
 80a06b2:	5088      	str	r0, [r1, r2]
    grid[xpos][ypos][zpos][1] = allVariants[color][1];
 80a06b4:	f8c9 3004 	str.w	r3, [r9, #4]
    grid[xpos][ypos][zpos][2] = allVariants[color][2];
 80a06b8:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80a06bc:	4427      	add	r7, r4
 80a06be:	f8c9 3008 	str.w	r3, [r9, #8]
  for (int i = 0; i < longest; i++)
 80a06c2:	9b03      	ldr	r3, [sp, #12]
 80a06c4:	3301      	adds	r3, #1
 80a06c6:	9303      	str	r3, [sp, #12]
 80a06c8:	9b05      	ldr	r3, [sp, #20]
 80a06ca:	1b9b      	subs	r3, r3, r6
 80a06cc:	9305      	str	r3, [sp, #20]
 80a06ce:	9b04      	ldr	r3, [sp, #16]
 80a06d0:	4433      	add	r3, r6
 80a06d2:	9304      	str	r3, [sp, #16]
 80a06d4:	9b06      	ldr	r3, [sp, #24]
 80a06d6:	1b5b      	subs	r3, r3, r5
 80a06d8:	9306      	str	r3, [sp, #24]
 80a06da:	9b07      	ldr	r3, [sp, #28]
 80a06dc:	1b1b      	subs	r3, r3, r4
 80a06de:	9307      	str	r3, [sp, #28]
 80a06e0:	e7ad      	b.n	80a063e <_Z8drawLineiiiiiii+0x86>
  bool reverseX = false;
 80a06e2:	2300      	movs	r3, #0
 80a06e4:	e778      	b.n	80a05d8 <_Z8drawLineiiiiiii+0x20>
  bool reverseY = false;
 80a06e6:	2300      	movs	r3, #0
 80a06e8:	e781      	b.n	80a05ee <_Z8drawLineiiiiiii+0x36>
  bool reverseZ = false;
 80a06ea:	2300      	movs	r3, #0
 80a06ec:	e789      	b.n	80a0602 <_Z8drawLineiiiiiii+0x4a>
                 : dely > delz ? dely
 80a06ee:	42b5      	cmp	r5, r6
 80a06f0:	dd94      	ble.n	80a061c <_Z8drawLineiiiiiii+0x64>
 80a06f2:	46aa      	mov	sl, r5
 80a06f4:	e796      	b.n	80a0624 <_Z8drawLineiiiiiii+0x6c>
      xpos = roundClosest((i * delx), longest) + startx;
 80a06f6:	4638      	mov	r0, r7
 80a06f8:	e7a9      	b.n	80a064e <_Z8drawLineiiiiiii+0x96>
      ypos = roundClosest((i * dely), longest) + starty;
 80a06fa:	4658      	mov	r0, fp
 80a06fc:	e7b1      	b.n	80a0662 <_Z8drawLineiiiiiii+0xaa>
      zpos = roundClosest((i * delz), longest) + startz;
 80a06fe:	9804      	ldr	r0, [sp, #16]
 80a0700:	e7b9      	b.n	80a0676 <_Z8drawLineiiiiiii+0xbe>
  if (reverseX)
 80a0702:	b11b      	cbz	r3, 80a070c <_Z8drawLineiiiiiii+0x154>
    swapint(startx, endx);
 80a0704:	a916      	add	r1, sp, #88	; 0x58
 80a0706:	a80b      	add	r0, sp, #44	; 0x2c
 80a0708:	f000 fa77 	bl	80a0bfa <_Z7swapintRiS_>
  if (reverseY)
 80a070c:	9b01      	ldr	r3, [sp, #4]
 80a070e:	b11b      	cbz	r3, 80a0718 <_Z8drawLineiiiiiii+0x160>
    swapint(starty, endy);
 80a0710:	a917      	add	r1, sp, #92	; 0x5c
 80a0712:	a80a      	add	r0, sp, #40	; 0x28
 80a0714:	f000 fa71 	bl	80a0bfa <_Z7swapintRiS_>
  if (reverseZ)
 80a0718:	9b02      	ldr	r3, [sp, #8]
 80a071a:	b11b      	cbz	r3, 80a0724 <_Z8drawLineiiiiiii+0x16c>
    swapint(startz, endz);
 80a071c:	a918      	add	r1, sp, #96	; 0x60
 80a071e:	a809      	add	r0, sp, #36	; 0x24
 80a0720:	f000 fa6b 	bl	80a0bfa <_Z7swapintRiS_>
  grid[endx][endy][endz][0] = allVariants[color][0];
 80a0724:	2430      	movs	r4, #48	; 0x30
 80a0726:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80a0728:	200c      	movs	r0, #12
 80a072a:	4361      	muls	r1, r4
 80a072c:	24c0      	movs	r4, #192	; 0xc0
 80a072e:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80a0730:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80a0732:	4374      	muls	r4, r6
 80a0734:	9e08      	ldr	r6, [sp, #32]
 80a0736:	4343      	muls	r3, r0
 80a0738:	4370      	muls	r0, r6
 80a073a:	4f08      	ldr	r7, [pc, #32]	; (80a075c <_Z8drawLineiiiiiii+0x1a4>)
 80a073c:	4a08      	ldr	r2, [pc, #32]	; (80a0760 <_Z8drawLineiiiiiii+0x1a8>)
 80a073e:	183e      	adds	r6, r7, r0
 80a0740:	185d      	adds	r5, r3, r1
 80a0742:	5838      	ldr	r0, [r7, r0]
  grid[endx][endy][endz][1] = allVariants[color][1];
 80a0744:	4423      	add	r3, r4
  grid[endx][endy][endz][0] = allVariants[color][0];
 80a0746:	4425      	add	r5, r4
  grid[endx][endy][endz][1] = allVariants[color][1];
 80a0748:	440b      	add	r3, r1
  grid[endx][endy][endz][0] = allVariants[color][0];
 80a074a:	5150      	str	r0, [r2, r5]
  grid[endx][endy][endz][1] = allVariants[color][1];
 80a074c:	4413      	add	r3, r2
 80a074e:	6872      	ldr	r2, [r6, #4]
 80a0750:	605a      	str	r2, [r3, #4]
  grid[endx][endy][endz][2] = allVariants[color][2];
 80a0752:	68b2      	ldr	r2, [r6, #8]
 80a0754:	609a      	str	r2, [r3, #8]
}
 80a0756:	b00d      	add	sp, #52	; 0x34
 80a0758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a075c:	20000000 	.word	0x20000000
 80a0760:	20000480 	.word	0x20000480

080a0764 <_Z10planarSpinv>:
{
 80a0764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  resetGrid();
 80a0768:	f7ff fe40 	bl	80a03ec <_Z9resetGridv>
  xpos = xpos > 2 ? 0 : xpos + 1;
 80a076c:	4b3d      	ldr	r3, [pc, #244]	; (80a0864 <_Z10planarSpinv+0x100>)
  ypos = ypos > 2 ? 0 : ypos + 1;
 80a076e:	4f3e      	ldr	r7, [pc, #248]	; (80a0868 <_Z10planarSpinv+0x104>)
  xpos = xpos > 2 ? 0 : xpos + 1;
 80a0770:	6819      	ldr	r1, [r3, #0]
 80a0772:	4698      	mov	r8, r3
 80a0774:	2902      	cmp	r1, #2
 80a0776:	bfcc      	ite	gt
 80a0778:	2100      	movgt	r1, #0
 80a077a:	3101      	addle	r1, #1
 80a077c:	6019      	str	r1, [r3, #0]
  ypos = ypos > 2 ? 0 : ypos + 1;
 80a077e:	683b      	ldr	r3, [r7, #0]
  drawLine(color, xpos, 0, 0, 3 - xpos, 3, 0);
 80a0780:	2503      	movs	r5, #3
  ypos = ypos > 2 ? 0 : ypos + 1;
 80a0782:	2b02      	cmp	r3, #2
 80a0784:	bfc8      	it	gt
 80a0786:	2300      	movgt	r3, #0
  drawLine(color, xpos, 0, 0, 3 - xpos, 3, 0);
 80a0788:	f04f 0400 	mov.w	r4, #0
  drawLine(color, xpos, 0, 1, 3 - xpos, 3, 1);
 80a078c:	f04f 0a01 	mov.w	sl, #1
  drawLine(color, xpos, 0, 2, 3 - xpos, 3, 2);
 80a0790:	f04f 0902 	mov.w	r9, #2
  ypos = ypos > 2 ? 0 : ypos + 1;
 80a0794:	bfd8      	it	le
 80a0796:	3301      	addle	r3, #1
  drawLine(color, xpos, 0, 0, 3 - xpos, 3, 0);
 80a0798:	4e34      	ldr	r6, [pc, #208]	; (80a086c <_Z10planarSpinv+0x108>)
  ypos = ypos > 2 ? 0 : ypos + 1;
 80a079a:	603b      	str	r3, [r7, #0]
  drawLine(color, xpos, 0, 0, 3 - xpos, 3, 0);
 80a079c:	1a6b      	subs	r3, r5, r1
 80a079e:	4622      	mov	r2, r4
 80a07a0:	e9cd 5401 	strd	r5, r4, [sp, #4]
 80a07a4:	6830      	ldr	r0, [r6, #0]
 80a07a6:	9300      	str	r3, [sp, #0]
 80a07a8:	4623      	mov	r3, r4
 80a07aa:	f7ff ff05 	bl	80a05b8 <_Z8drawLineiiiiiii>
  drawLine(color, xpos, 0, 1, 3 - xpos, 3, 1);
 80a07ae:	f8d8 1000 	ldr.w	r1, [r8]
 80a07b2:	4622      	mov	r2, r4
 80a07b4:	1a6b      	subs	r3, r5, r1
 80a07b6:	e9cd 5a01 	strd	r5, sl, [sp, #4]
 80a07ba:	6830      	ldr	r0, [r6, #0]
 80a07bc:	9300      	str	r3, [sp, #0]
 80a07be:	4653      	mov	r3, sl
 80a07c0:	f7ff fefa 	bl	80a05b8 <_Z8drawLineiiiiiii>
  drawLine(color, xpos, 0, 2, 3 - xpos, 3, 2);
 80a07c4:	f8d8 1000 	ldr.w	r1, [r8]
 80a07c8:	4622      	mov	r2, r4
 80a07ca:	1a6b      	subs	r3, r5, r1
 80a07cc:	e9cd 5901 	strd	r5, r9, [sp, #4]
 80a07d0:	6830      	ldr	r0, [r6, #0]
 80a07d2:	9300      	str	r3, [sp, #0]
 80a07d4:	464b      	mov	r3, r9
 80a07d6:	f7ff feef 	bl	80a05b8 <_Z8drawLineiiiiiii>
  drawLine(color, xpos, 0, 3, 3 - xpos, 3, 3);
 80a07da:	f8d8 1000 	ldr.w	r1, [r8]
 80a07de:	4622      	mov	r2, r4
 80a07e0:	1a6b      	subs	r3, r5, r1
 80a07e2:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80a07e6:	6830      	ldr	r0, [r6, #0]
 80a07e8:	9300      	str	r3, [sp, #0]
 80a07ea:	462b      	mov	r3, r5
 80a07ec:	f7ff fee4 	bl	80a05b8 <_Z8drawLineiiiiiii>
  drawLine(color, 3, ypos, 0, 0, 3 - ypos, 0);
 80a07f0:	683a      	ldr	r2, [r7, #0]
 80a07f2:	4629      	mov	r1, r5
 80a07f4:	1aab      	subs	r3, r5, r2
 80a07f6:	e9cd 4300 	strd	r4, r3, [sp]
 80a07fa:	6830      	ldr	r0, [r6, #0]
 80a07fc:	4623      	mov	r3, r4
 80a07fe:	9402      	str	r4, [sp, #8]
 80a0800:	f7ff feda 	bl	80a05b8 <_Z8drawLineiiiiiii>
  drawLine(color, 3, ypos, 1, 0, 3 - ypos, 1);
 80a0804:	683a      	ldr	r2, [r7, #0]
 80a0806:	4629      	mov	r1, r5
 80a0808:	1aab      	subs	r3, r5, r2
 80a080a:	e9cd 4300 	strd	r4, r3, [sp]
 80a080e:	6830      	ldr	r0, [r6, #0]
 80a0810:	4653      	mov	r3, sl
 80a0812:	f8cd a008 	str.w	sl, [sp, #8]
 80a0816:	f7ff fecf 	bl	80a05b8 <_Z8drawLineiiiiiii>
  drawLine(color, 3, ypos, 2, 0, 3 - ypos, 2);
 80a081a:	683a      	ldr	r2, [r7, #0]
 80a081c:	4629      	mov	r1, r5
 80a081e:	1aab      	subs	r3, r5, r2
 80a0820:	e9cd 4300 	strd	r4, r3, [sp]
 80a0824:	6830      	ldr	r0, [r6, #0]
 80a0826:	464b      	mov	r3, r9
 80a0828:	f8cd 9008 	str.w	r9, [sp, #8]
 80a082c:	f7ff fec4 	bl	80a05b8 <_Z8drawLineiiiiiii>
  drawLine(color, 3, ypos, 3, 0, 3 - ypos, 3);
 80a0830:	683a      	ldr	r2, [r7, #0]
 80a0832:	4629      	mov	r1, r5
 80a0834:	1aab      	subs	r3, r5, r2
 80a0836:	e9cd 4300 	strd	r4, r3, [sp]
 80a083a:	9502      	str	r5, [sp, #8]
 80a083c:	462b      	mov	r3, r5
  if (planarSpinLoops > 10)
 80a083e:	4d0c      	ldr	r5, [pc, #48]	; (80a0870 <_Z10planarSpinv+0x10c>)
  drawLine(color, 3, ypos, 3, 0, 3 - ypos, 3);
 80a0840:	6830      	ldr	r0, [r6, #0]
 80a0842:	f7ff feb9 	bl	80a05b8 <_Z8drawLineiiiiiii>
  if (planarSpinLoops > 10)
 80a0846:	682b      	ldr	r3, [r5, #0]
 80a0848:	2b0a      	cmp	r3, #10
 80a084a:	dd04      	ble.n	80a0856 <_Z10planarSpinv+0xf2>
    color = nextColor(color);
 80a084c:	6830      	ldr	r0, [r6, #0]
    planarSpinLoops = 0;
 80a084e:	602c      	str	r4, [r5, #0]
    color = nextColor(color);
 80a0850:	f000 f9c1 	bl	80a0bd6 <_Z9nextColori>
 80a0854:	6030      	str	r0, [r6, #0]
  planarSpinLoops++;
 80a0856:	682b      	ldr	r3, [r5, #0]
 80a0858:	3301      	adds	r3, #1
 80a085a:	602b      	str	r3, [r5, #0]
}
 80a085c:	b004      	add	sp, #16
 80a085e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0862:	bf00      	nop
 80a0864:	20000a04 	.word	0x20000a04
 80a0868:	20000a08 	.word	0x20000a08
 80a086c:	200009f4 	.word	0x200009f4
 80a0870:	20000a00 	.word	0x20000a00

080a0874 <_Z7countUp6String>:

int countUp(String cmd)
{
 80a0874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (color < 10)
 80a0878:	4f34      	ldr	r7, [pc, #208]	; (80a094c <_Z7countUp6String+0xd8>)
 80a087a:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 80a0958 <_Z7countUp6String+0xe4>
 80a087e:	683e      	ldr	r6, [r7, #0]
 80a0880:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 80a095c <_Z7countUp6String+0xe8>
 80a0884:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 80a0954 <_Z7countUp6String+0xe0>
 80a0888:	2e09      	cmp	r6, #9
 80a088a:	46c8      	mov	r8, r9
 80a088c:	f04f 020c 	mov.w	r2, #12
 80a0890:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80a0894:	f8de 5000 	ldr.w	r5, [lr]
 80a0898:	f8d9 0000 	ldr.w	r0, [r9]
 80a089c:	f8dc 3000 	ldr.w	r3, [ip]
 80a08a0:	4c2b      	ldr	r4, [pc, #172]	; (80a0950 <_Z7countUp6String+0xdc>)
 80a08a2:	dc1e      	bgt.n	80a08e2 <_Z7countUp6String+0x6e>
  {
    grid[xpos][ypos][zpos][0] = allVariants[color][0];
 80a08a4:	fb0a f100 	mul.w	r1, sl, r0
 80a08a8:	20c0      	movs	r0, #192	; 0xc0
 80a08aa:	4353      	muls	r3, r2
 80a08ac:	4345      	muls	r5, r0
 80a08ae:	4372      	muls	r2, r6
 80a08b0:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 80a0960 <_Z7countUp6String+0xec>
 80a08b4:	eb03 0c01 	add.w	ip, r3, r1
 80a08b8:	eb0c 0005 	add.w	r0, ip, r5
 80a08bc:	eb0e 0c02 	add.w	ip, lr, r2
 80a08c0:	f85e 2002 	ldr.w	r2, [lr, r2]
    grid[xpos][ypos][zpos][1] = allVariants[color][1];
 80a08c4:	442b      	add	r3, r5
    grid[xpos][ypos][zpos][0] = allVariants[color][0];
 80a08c6:	5022      	str	r2, [r4, r0]
    grid[xpos][ypos][zpos][1] = allVariants[color][1];
 80a08c8:	440b      	add	r3, r1
 80a08ca:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80a08ce:	4423      	add	r3, r4
 80a08d0:	605a      	str	r2, [r3, #4]
    grid[xpos][ypos][zpos][2] = allVariants[color][2];
 80a08d2:	f8dc 2008 	ldr.w	r2, [ip, #8]
    color++;
 80a08d6:	3601      	adds	r6, #1
    grid[xpos][ypos][zpos][2] = allVariants[color][2];
 80a08d8:	609a      	str	r2, [r3, #8]
    color++;
 80a08da:	603e      	str	r6, [r7, #0]
      zpos = 0;
      ypos++;
    }
  }
  return 1;
}
 80a08dc:	2001      	movs	r0, #1
 80a08de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    grid[xpos][ypos][zpos][0] = 4;
 80a08e2:	fb0a f100 	mul.w	r1, sl, r0
 80a08e6:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 80a08ea:	435a      	muls	r2, r3
 80a08ec:	fb0a fa05 	mul.w	sl, sl, r5
 80a08f0:	eb02 0b01 	add.w	fp, r2, r1
 80a08f4:	2604      	movs	r6, #4
    grid[xpos][ypos][zpos][1] = 4;
 80a08f6:	4452      	add	r2, sl
 80a08f8:	4411      	add	r1, r2
    color = 0;
 80a08fa:	2200      	movs	r2, #0
    zpos++;
 80a08fc:	3301      	adds	r3, #1
    grid[xpos][ypos][zpos][0] = 4;
 80a08fe:	44d3      	add	fp, sl
 80a0900:	f844 600b 	str.w	r6, [r4, fp]
    if (zpos > 3 && ypos >= 3 && xpos >= 3)
 80a0904:	2b03      	cmp	r3, #3
    grid[xpos][ypos][zpos][1] = 4;
 80a0906:	440c      	add	r4, r1
    grid[xpos][ypos][zpos][2] = 4;
 80a0908:	e9c4 6601 	strd	r6, r6, [r4, #4]
    color = 0;
 80a090c:	603a      	str	r2, [r7, #0]
    zpos++;
 80a090e:	f8cc 3000 	str.w	r3, [ip]
    if (zpos > 3 && ypos >= 3 && xpos >= 3)
 80a0912:	dde3      	ble.n	80a08dc <_Z7countUp6String+0x68>
 80a0914:	2802      	cmp	r0, #2
 80a0916:	dd12      	ble.n	80a093e <_Z7countUp6String+0xca>
 80a0918:	2d02      	cmp	r5, #2
 80a091a:	dd06      	ble.n	80a092a <_Z7countUp6String+0xb6>
      xpos = 0;
 80a091c:	f8ce 2000 	str.w	r2, [lr]
      ypos = 0;
 80a0920:	f8c9 2000 	str.w	r2, [r9]
      zpos = 0;
 80a0924:	f8cc 2000 	str.w	r2, [ip]
 80a0928:	e7d8      	b.n	80a08dc <_Z7countUp6String+0x68>
    else if (zpos > 3 && ypos > 3)
 80a092a:	2803      	cmp	r0, #3
 80a092c:	dd07      	ble.n	80a093e <_Z7countUp6String+0xca>
      xpos++;
 80a092e:	3501      	adds	r5, #1
      ypos = 0;
 80a0930:	f8c9 2000 	str.w	r2, [r9]
      zpos = 0;
 80a0934:	f8cc 2000 	str.w	r2, [ip]
      xpos++;
 80a0938:	f8ce 5000 	str.w	r5, [lr]
 80a093c:	e7ce      	b.n	80a08dc <_Z7countUp6String+0x68>
      zpos = 0;
 80a093e:	2200      	movs	r2, #0
 80a0940:	4b04      	ldr	r3, [pc, #16]	; (80a0954 <_Z7countUp6String+0xe0>)
      ypos++;
 80a0942:	3001      	adds	r0, #1
      zpos = 0;
 80a0944:	601a      	str	r2, [r3, #0]
      ypos++;
 80a0946:	f8c8 0000 	str.w	r0, [r8]
 80a094a:	e7c7      	b.n	80a08dc <_Z7countUp6String+0x68>
 80a094c:	200009f4 	.word	0x200009f4
 80a0950:	20000480 	.word	0x20000480
 80a0954:	20000a0c 	.word	0x20000a0c
 80a0958:	20000a08 	.word	0x20000a08
 80a095c:	20000a04 	.word	0x20000a04
 80a0960:	20000000 	.word	0x20000000

080a0964 <_Z19setCurrentAnimationv>:
{
 80a0964:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  switch (currentAnimation)
 80a0966:	4b27      	ldr	r3, [pc, #156]	; (80a0a04 <_Z19setCurrentAnimationv+0xa0>)
 80a0968:	781b      	ldrb	r3, [r3, #0]
 80a096a:	2b08      	cmp	r3, #8
 80a096c:	d813      	bhi.n	80a0996 <_Z19setCurrentAnimationv+0x32>
 80a096e:	e8df f003 	tbb	[pc, r3]
 80a0972:	051d      	.short	0x051d
 80a0974:	28153840 	.word	0x28153840
 80a0978:	2030      	.short	0x2030
 80a097a:	10          	.byte	0x10
 80a097b:	00          	.byte	0x00
    countUp("");
 80a097c:	4668      	mov	r0, sp
 80a097e:	4922      	ldr	r1, [pc, #136]	; (80a0a08 <_Z19setCurrentAnimationv+0xa4>)
 80a0980:	f000 fcc7 	bl	80a1312 <_ZN6StringC1EPKc>
 80a0984:	4668      	mov	r0, sp
 80a0986:	f7ff ff75 	bl	80a0874 <_Z7countUp6String>
    crazyFollowColors("");
 80a098a:	4668      	mov	r0, sp
 80a098c:	f000 fc77 	bl	80a127e <_ZN6StringD1Ev>
}
 80a0990:	e001      	b.n	80a0996 <_Z19setCurrentAnimationv+0x32>
    planarSpin();
 80a0992:	f7ff fee7 	bl	80a0764 <_Z10planarSpinv>
}
 80a0996:	b005      	add	sp, #20
 80a0998:	f85d fb04 	ldr.w	pc, [sp], #4
    drawWholeCube("");
 80a099c:	4668      	mov	r0, sp
 80a099e:	491a      	ldr	r1, [pc, #104]	; (80a0a08 <_Z19setCurrentAnimationv+0xa4>)
 80a09a0:	f000 fcb7 	bl	80a1312 <_ZN6StringC1EPKc>
 80a09a4:	4668      	mov	r0, sp
 80a09a6:	f7ff fcb7 	bl	80a0318 <_Z13drawWholeCube6String>
 80a09aa:	e7ee      	b.n	80a098a <_Z19setCurrentAnimationv+0x26>
    chaseTheDot();
 80a09ac:	f7ff fd8c 	bl	80a04c8 <_Z11chaseTheDotv>
    break;
 80a09b0:	e7f1      	b.n	80a0996 <_Z19setCurrentAnimationv+0x32>
    drawZRow("");
 80a09b2:	4668      	mov	r0, sp
 80a09b4:	4914      	ldr	r1, [pc, #80]	; (80a0a08 <_Z19setCurrentAnimationv+0xa4>)
 80a09b6:	f000 fcac 	bl	80a1312 <_ZN6StringC1EPKc>
 80a09ba:	4668      	mov	r0, sp
 80a09bc:	f7ff fc5a 	bl	80a0274 <_Z8drawZRow6String>
 80a09c0:	e7e3      	b.n	80a098a <_Z19setCurrentAnimationv+0x26>
    drawXRow("");
 80a09c2:	4668      	mov	r0, sp
 80a09c4:	4910      	ldr	r1, [pc, #64]	; (80a0a08 <_Z19setCurrentAnimationv+0xa4>)
 80a09c6:	f000 fca4 	bl	80a1312 <_ZN6StringC1EPKc>
 80a09ca:	4668      	mov	r0, sp
 80a09cc:	f7ff fbaa 	bl	80a0124 <_Z8drawXRow6String>
 80a09d0:	e7db      	b.n	80a098a <_Z19setCurrentAnimationv+0x26>
    drawYRow("");
 80a09d2:	4668      	mov	r0, sp
 80a09d4:	490c      	ldr	r1, [pc, #48]	; (80a0a08 <_Z19setCurrentAnimationv+0xa4>)
 80a09d6:	f000 fc9c 	bl	80a1312 <_ZN6StringC1EPKc>
 80a09da:	4668      	mov	r0, sp
 80a09dc:	f7ff fbf6 	bl	80a01cc <_Z8drawYRow6String>
 80a09e0:	e7d3      	b.n	80a098a <_Z19setCurrentAnimationv+0x26>
    drawWalls("");
 80a09e2:	4668      	mov	r0, sp
 80a09e4:	4908      	ldr	r1, [pc, #32]	; (80a0a08 <_Z19setCurrentAnimationv+0xa4>)
 80a09e6:	f000 fc94 	bl	80a1312 <_ZN6StringC1EPKc>
 80a09ea:	4668      	mov	r0, sp
 80a09ec:	f7ff fb60 	bl	80a00b0 <_Z9drawWalls6String>
 80a09f0:	e7cb      	b.n	80a098a <_Z19setCurrentAnimationv+0x26>
    crazyFollowColors("");
 80a09f2:	4668      	mov	r0, sp
 80a09f4:	4904      	ldr	r1, [pc, #16]	; (80a0a08 <_Z19setCurrentAnimationv+0xa4>)
 80a09f6:	f000 fc8c 	bl	80a1312 <_ZN6StringC1EPKc>
 80a09fa:	4668      	mov	r0, sp
 80a09fc:	f7ff fcbc 	bl	80a0378 <_Z17crazyFollowColors6String>
 80a0a00:	e7c3      	b.n	80a098a <_Z19setCurrentAnimationv+0x26>
 80a0a02:	bf00      	nop
 80a0a04:	2000027c 	.word	0x2000027c
 80a0a08:	080a1b92 	.word	0x080a1b92

080a0a0c <_Z10reset_pinsii>:
  digitalWrite(high_pin, HIGH);
  digitalWrite(low_pin, LOW);
}

void reset_pins(int low_pin, int high_pin)
{
 80a0a0c:	b538      	push	{r3, r4, r5, lr}
 80a0a0e:	460c      	mov	r4, r1
  pinMode(low_pin, INPUT);
 80a0a10:	b285      	uxth	r5, r0
 80a0a12:	4628      	mov	r0, r5
  pinMode(high_pin, INPUT);
 80a0a14:	b2a4      	uxth	r4, r4
  pinMode(low_pin, INPUT);
 80a0a16:	2100      	movs	r1, #0
 80a0a18:	f000 ff40 	bl	80a189c <pinMode>
  pinMode(high_pin, INPUT);
 80a0a1c:	4620      	mov	r0, r4
 80a0a1e:	2100      	movs	r1, #0
 80a0a20:	f000 ff3c 	bl	80a189c <pinMode>

  digitalWrite(low_pin, LOW);
 80a0a24:	4628      	mov	r0, r5
 80a0a26:	2100      	movs	r1, #0
 80a0a28:	f000 ff49 	bl	80a18be <digitalWrite>
  digitalWrite(high_pin, LOW);
 80a0a2c:	4620      	mov	r0, r4
}
 80a0a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  digitalWrite(high_pin, LOW);
 80a0a32:	2100      	movs	r1, #0
 80a0a34:	f000 bf43 	b.w	80a18be <digitalWrite>

080a0a38 <_Z8resetLediiii>:
  switch (color)
 80a0a38:	0080      	lsls	r0, r0, #2
 80a0a3a:	b11b      	cbz	r3, 80a0a44 <_Z8resetLediiii+0xc>
 80a0a3c:	2b01      	cmp	r3, #1
 80a0a3e:	d00c      	beq.n	80a0a5a <_Z8resetLediiii+0x22>
    pin2 = blue[x][y][z][1];
 80a0a40:	4b07      	ldr	r3, [pc, #28]	; (80a0a60 <_Z8resetLediiii+0x28>)
 80a0a42:	e000      	b.n	80a0a46 <_Z8resetLediiii+0xe>
    pin2 = red[x][y][z][1];
 80a0a44:	4b07      	ldr	r3, [pc, #28]	; (80a0a64 <_Z8resetLediiii+0x2c>)
    pin2 = blue[x][y][z][1];
 80a0a46:	4408      	add	r0, r1
 80a0a48:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80a0a4c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    reset_pins(pin1, pin2);
 80a0a50:	6849      	ldr	r1, [r1, #4]
 80a0a52:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80a0a56:	f7ff bfd9 	b.w	80a0a0c <_Z10reset_pinsii>
    pin2 = green[x][y][z][1];
 80a0a5a:	4b03      	ldr	r3, [pc, #12]	; (80a0a68 <_Z8resetLediiii+0x30>)
 80a0a5c:	e7f3      	b.n	80a0a46 <_Z8resetLediiii+0xe>
 80a0a5e:	bf00      	nop
 80a0a60:	2000007c 	.word	0x2000007c
 80a0a64:	20000788 	.word	0x20000788
 80a0a68:	20000280 	.word	0x20000280

080a0a6c <_Z8set_pinsii>:
{
 80a0a6c:	b538      	push	{r3, r4, r5, lr}
 80a0a6e:	460d      	mov	r5, r1
 80a0a70:	4604      	mov	r4, r0
  pinMode(high_pin, OUTPUT);
 80a0a72:	b2ad      	uxth	r5, r5
  reset_pins(low_pin, high_pin);
 80a0a74:	f7ff ffca 	bl	80a0a0c <_Z10reset_pinsii>
  pinMode(low_pin, OUTPUT);
 80a0a78:	b2a4      	uxth	r4, r4
  pinMode(high_pin, OUTPUT);
 80a0a7a:	4628      	mov	r0, r5
 80a0a7c:	2101      	movs	r1, #1
 80a0a7e:	f000 ff0d 	bl	80a189c <pinMode>
  pinMode(low_pin, OUTPUT);
 80a0a82:	4620      	mov	r0, r4
 80a0a84:	2101      	movs	r1, #1
 80a0a86:	f000 ff09 	bl	80a189c <pinMode>
  digitalWrite(high_pin, HIGH);
 80a0a8a:	4628      	mov	r0, r5
 80a0a8c:	2101      	movs	r1, #1
 80a0a8e:	f000 ff16 	bl	80a18be <digitalWrite>
  digitalWrite(low_pin, LOW);
 80a0a92:	4620      	mov	r0, r4
}
 80a0a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  digitalWrite(low_pin, LOW);
 80a0a98:	2100      	movs	r1, #0
 80a0a9a:	f000 bf10 	b.w	80a18be <digitalWrite>
	...

080a0aa0 <_Z7drawLediiii>:
  switch (color)
 80a0aa0:	2b01      	cmp	r3, #1
{
 80a0aa2:	b570      	push	{r4, r5, r6, lr}
 80a0aa4:	ea4f 0080 	mov.w	r0, r0, lsl #2
  switch (color)
 80a0aa8:	d00f      	beq.n	80a0aca <_Z7drawLediiii+0x2a>
 80a0aaa:	2b02      	cmp	r3, #2
 80a0aac:	d017      	beq.n	80a0ade <_Z7drawLediiii+0x3e>
 80a0aae:	4e1a      	ldr	r6, [pc, #104]	; (80a0b18 <_Z7drawLediiii+0x78>)
    pin2 = red[x][y][z][1];
 80a0ab0:	4408      	add	r0, r1
  switch (color)
 80a0ab2:	b9b3      	cbnz	r3, 80a0ae2 <_Z7drawLediiii+0x42>
    pin2 = red[x][y][z][1];
 80a0ab4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80a0ab8:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
    set_pins(pin1, pin2);
 80a0abc:	6859      	ldr	r1, [r3, #4]
 80a0abe:	f856 0032 	ldr.w	r0, [r6, r2, lsl #3]
}
 80a0ac2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    set_pins(pin1, pin2);
 80a0ac6:	f7ff bfd1 	b.w	80a0a6c <_Z8set_pinsii>
    pin2 = green[x][y][z][1];
 80a0aca:	4b14      	ldr	r3, [pc, #80]	; (80a0b1c <_Z7drawLediiii+0x7c>)
 80a0acc:	4408      	add	r0, r1
 80a0ace:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80a0ad2:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    set_pins(pin1, pin2);
 80a0ad6:	6849      	ldr	r1, [r1, #4]
 80a0ad8:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80a0adc:	e7f1      	b.n	80a0ac2 <_Z7drawLediiii+0x22>
    pin2 = blue[x][y][z][1];
 80a0ade:	4b10      	ldr	r3, [pc, #64]	; (80a0b20 <_Z7drawLediiii+0x80>)
 80a0ae0:	e7f4      	b.n	80a0acc <_Z7drawLediiii+0x2c>
    pin2 = red[x][y][z][1];
 80a0ae2:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 80a0ae6:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
    reset_pins(pin1, pin2);
 80a0aea:	6859      	ldr	r1, [r3, #4]
 80a0aec:	f856 0034 	ldr.w	r0, [r6, r4, lsl #3]
 80a0af0:	f7ff ff8c 	bl	80a0a0c <_Z10reset_pinsii>
    pin2 = green[x][y][z][1];
 80a0af4:	4b09      	ldr	r3, [pc, #36]	; (80a0b1c <_Z7drawLediiii+0x7c>)
    pin2 = red[x][y][z][1];
 80a0af6:	00e5      	lsls	r5, r4, #3
    pin2 = green[x][y][z][1];
 80a0af8:	195a      	adds	r2, r3, r5
    reset_pins(pin1, pin2);
 80a0afa:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 80a0afe:	6851      	ldr	r1, [r2, #4]
 80a0b00:	f7ff ff84 	bl	80a0a0c <_Z10reset_pinsii>
    pin2 = blue[x][y][z][1];
 80a0b04:	4b06      	ldr	r3, [pc, #24]	; (80a0b20 <_Z7drawLediiii+0x80>)
 80a0b06:	441d      	add	r5, r3
    reset_pins(pin1, pin2);
 80a0b08:	6869      	ldr	r1, [r5, #4]
 80a0b0a:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
}
 80a0b0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    reset_pins(pin1, pin2);
 80a0b12:	f7ff bf7b 	b.w	80a0a0c <_Z10reset_pinsii>
 80a0b16:	bf00      	nop
 80a0b18:	20000788 	.word	0x20000788
 80a0b1c:	20000280 	.word	0x20000280
 80a0b20:	2000007c 	.word	0x2000007c

080a0b24 <_Z11rgbMainLoopv>:
{
 80a0b24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (int x = 0; x < 4; x++)
 80a0b28:	2400      	movs	r4, #0
 80a0b2a:	4f19      	ldr	r7, [pc, #100]	; (80a0b90 <_Z11rgbMainLoopv+0x6c>)
 80a0b2c:	2600      	movs	r6, #0
    for (int y = 0; y < 4; y++)
 80a0b2e:	4635      	mov	r5, r6
      for (int z = 0; z < 4; z++)
 80a0b30:	f04f 0b00 	mov.w	fp, #0
 80a0b34:	eb06 0807 	add.w	r8, r6, r7
 80a0b38:	46c2      	mov	sl, r8
 80a0b3a:	f04f 0903 	mov.w	r9, #3
          drawLed(x, y, z, grid[x][y][z][currentColor]);
 80a0b3e:	465a      	mov	r2, fp
 80a0b40:	4629      	mov	r1, r5
 80a0b42:	f8da 3000 	ldr.w	r3, [sl]
 80a0b46:	4620      	mov	r0, r4
 80a0b48:	f7ff ffaa 	bl	80a0aa0 <_Z7drawLediiii>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a0b4c:	4b11      	ldr	r3, [pc, #68]	; (80a0b94 <_Z11rgbMainLoopv+0x70>)
 80a0b4e:	6818      	ldr	r0, [r3, #0]
 80a0b50:	f000 f876 	bl	80a0c40 <HAL_Delay_Microseconds>
          resetLed(x, y, z, grid[x][y][z][currentColor]);
 80a0b54:	465a      	mov	r2, fp
 80a0b56:	4629      	mov	r1, r5
 80a0b58:	4620      	mov	r0, r4
 80a0b5a:	f85a 3b04 	ldr.w	r3, [sl], #4
 80a0b5e:	f7ff ff6b 	bl	80a0a38 <_Z8resetLediiii>
        for (int currentColor = 0; currentColor < 3; currentColor++)
 80a0b62:	f1b9 0901 	subs.w	r9, r9, #1
 80a0b66:	d1ea      	bne.n	80a0b3e <_Z11rgbMainLoopv+0x1a>
      for (int z = 0; z < 4; z++)
 80a0b68:	f10b 0b01 	add.w	fp, fp, #1
 80a0b6c:	f1bb 0f04 	cmp.w	fp, #4
 80a0b70:	f108 080c 	add.w	r8, r8, #12
 80a0b74:	d1e0      	bne.n	80a0b38 <_Z11rgbMainLoopv+0x14>
    for (int y = 0; y < 4; y++)
 80a0b76:	3501      	adds	r5, #1
 80a0b78:	2d04      	cmp	r5, #4
 80a0b7a:	f106 0630 	add.w	r6, r6, #48	; 0x30
 80a0b7e:	d1d7      	bne.n	80a0b30 <_Z11rgbMainLoopv+0xc>
  for (int x = 0; x < 4; x++)
 80a0b80:	3401      	adds	r4, #1
 80a0b82:	2c04      	cmp	r4, #4
 80a0b84:	f107 07c0 	add.w	r7, r7, #192	; 0xc0
 80a0b88:	d1d0      	bne.n	80a0b2c <_Z11rgbMainLoopv+0x8>
}
 80a0b8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0b8e:	bf00      	nop
 80a0b90:	20000480 	.word	0x20000480
 80a0b94:	20000784 	.word	0x20000784

080a0b98 <_Z20setupAndRunTimedLoopv>:
{
 80a0b98:	b538      	push	{r3, r4, r5, lr}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0b9a:	f000 f859 	bl	80a0c50 <HAL_Timer_Get_Milli_Seconds>
  while ((now - lastLoopTime) <= loopTime)
 80a0b9e:	4c07      	ldr	r4, [pc, #28]	; (80a0bbc <_Z20setupAndRunTimedLoopv+0x24>)
 80a0ba0:	4d07      	ldr	r5, [pc, #28]	; (80a0bc0 <_Z20setupAndRunTimedLoopv+0x28>)
 80a0ba2:	6823      	ldr	r3, [r4, #0]
 80a0ba4:	682a      	ldr	r2, [r5, #0]
 80a0ba6:	1ac3      	subs	r3, r0, r3
 80a0ba8:	4293      	cmp	r3, r2
 80a0baa:	d804      	bhi.n	80a0bb6 <_Z20setupAndRunTimedLoopv+0x1e>
    rgbMainLoop();
 80a0bac:	f7ff ffba 	bl	80a0b24 <_Z11rgbMainLoopv>
 80a0bb0:	f000 f84e 	bl	80a0c50 <HAL_Timer_Get_Milli_Seconds>
  while ((now - lastLoopTime) <= loopTime)
 80a0bb4:	e7f5      	b.n	80a0ba2 <_Z20setupAndRunTimedLoopv+0xa>
  lastLoopTime = now;
 80a0bb6:	6020      	str	r0, [r4, #0]
}
 80a0bb8:	bd38      	pop	{r3, r4, r5, pc}
 80a0bba:	bf00      	nop
 80a0bbc:	200009fc 	.word	0x200009fc
 80a0bc0:	20000780 	.word	0x20000780

080a0bc4 <loop>:
{
 80a0bc4:	b508      	push	{r3, lr}
  setCurrentAnimation();
 80a0bc6:	f7ff fecd 	bl	80a0964 <_Z19setCurrentAnimationv>
  checkAnimationChange();
 80a0bca:	f7ff fc2b 	bl	80a0424 <_Z20checkAnimationChangev>
}
 80a0bce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  setupAndRunTimedLoop();
 80a0bd2:	f7ff bfe1 	b.w	80a0b98 <_Z20setupAndRunTimedLoopv>

080a0bd6 <_Z9nextColori>:
int nextColor(int color) { return (color + 1) % 10; }
 80a0bd6:	220a      	movs	r2, #10
 80a0bd8:	1c43      	adds	r3, r0, #1
 80a0bda:	fb93 f0f2 	sdiv	r0, r3, r2
 80a0bde:	fb02 3010 	mls	r0, r2, r0, r3
 80a0be2:	4770      	bx	lr

080a0be4 <_Z12roundClosestii>:

int roundClosest(int numerator, int denominator)
{
    numerator = (numerator << 1) / denominator;
 80a0be4:	0040      	lsls	r0, r0, #1
 80a0be6:	fb90 f1f1 	sdiv	r1, r0, r1
    int output = (numerator >> 1) + (numerator % 2);
 80a0bea:	f001 0001 	and.w	r0, r1, #1
 80a0bee:	2900      	cmp	r1, #0
 80a0bf0:	bfb8      	it	lt
 80a0bf2:	4240      	neglt	r0, r0
    return output;
}
 80a0bf4:	eb00 0061 	add.w	r0, r0, r1, asr #1
 80a0bf8:	4770      	bx	lr

080a0bfa <_Z7swapintRiS_>:

void swapint(int &one, int &two)
{
    one = one ^ two;
 80a0bfa:	680a      	ldr	r2, [r1, #0]
 80a0bfc:	6803      	ldr	r3, [r0, #0]
 80a0bfe:	4053      	eors	r3, r2
 80a0c00:	6003      	str	r3, [r0, #0]
    two = one ^ two;
 80a0c02:	680a      	ldr	r2, [r1, #0]
 80a0c04:	4053      	eors	r3, r2
 80a0c06:	600b      	str	r3, [r1, #0]
    one = one ^ two;
 80a0c08:	6802      	ldr	r2, [r0, #0]
 80a0c0a:	4053      	eors	r3, r2
 80a0c0c:	6003      	str	r3, [r0, #0]
 80a0c0e:	4770      	bx	lr

080a0c10 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0c10:	b508      	push	{r3, lr}
 80a0c12:	4b02      	ldr	r3, [pc, #8]	; (80a0c1c <os_mutex_recursive_create+0xc>)
 80a0c14:	681b      	ldr	r3, [r3, #0]
 80a0c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0c18:	9301      	str	r3, [sp, #4]
 80a0c1a:	bd08      	pop	{r3, pc}
 80a0c1c:	080601d0 	.word	0x080601d0

080a0c20 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0c20:	b508      	push	{r3, lr}
 80a0c22:	4b02      	ldr	r3, [pc, #8]	; (80a0c2c <os_mutex_recursive_destroy+0xc>)
 80a0c24:	681b      	ldr	r3, [r3, #0]
 80a0c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0c28:	9301      	str	r3, [sp, #4]
 80a0c2a:	bd08      	pop	{r3, pc}
 80a0c2c:	080601d0 	.word	0x080601d0

080a0c30 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0c30:	b508      	push	{r3, lr}
 80a0c32:	4b02      	ldr	r3, [pc, #8]	; (80a0c3c <HAL_RNG_GetRandomNumber+0xc>)
 80a0c34:	681b      	ldr	r3, [r3, #0]
 80a0c36:	685b      	ldr	r3, [r3, #4]
 80a0c38:	9301      	str	r3, [sp, #4]
 80a0c3a:	bd08      	pop	{r3, pc}
 80a0c3c:	0806019c 	.word	0x0806019c

080a0c40 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0c40:	b508      	push	{r3, lr}
 80a0c42:	4b02      	ldr	r3, [pc, #8]	; (80a0c4c <HAL_Delay_Microseconds+0xc>)
 80a0c44:	681b      	ldr	r3, [r3, #0]
 80a0c46:	68db      	ldr	r3, [r3, #12]
 80a0c48:	9301      	str	r3, [sp, #4]
 80a0c4a:	bd08      	pop	{r3, pc}
 80a0c4c:	0806019c 	.word	0x0806019c

080a0c50 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0c50:	b508      	push	{r3, lr}
 80a0c52:	4b02      	ldr	r3, [pc, #8]	; (80a0c5c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0c54:	681b      	ldr	r3, [r3, #0]
 80a0c56:	695b      	ldr	r3, [r3, #20]
 80a0c58:	9301      	str	r3, [sp, #4]
 80a0c5a:	bd08      	pop	{r3, pc}
 80a0c5c:	0806019c 	.word	0x0806019c

080a0c60 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0c60:	b508      	push	{r3, lr}
 80a0c62:	4b02      	ldr	r3, [pc, #8]	; (80a0c6c <HAL_Pin_Mode+0xc>)
 80a0c64:	681b      	ldr	r3, [r3, #0]
 80a0c66:	689b      	ldr	r3, [r3, #8]
 80a0c68:	9301      	str	r3, [sp, #4]
 80a0c6a:	bd08      	pop	{r3, pc}
 80a0c6c:	080601b0 	.word	0x080601b0

080a0c70 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0c70:	b508      	push	{r3, lr}
 80a0c72:	4b02      	ldr	r3, [pc, #8]	; (80a0c7c <HAL_Get_Pin_Mode+0xc>)
 80a0c74:	681b      	ldr	r3, [r3, #0]
 80a0c76:	68db      	ldr	r3, [r3, #12]
 80a0c78:	9301      	str	r3, [sp, #4]
 80a0c7a:	bd08      	pop	{r3, pc}
 80a0c7c:	080601b0 	.word	0x080601b0

080a0c80 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0c80:	b508      	push	{r3, lr}
 80a0c82:	4b02      	ldr	r3, [pc, #8]	; (80a0c8c <HAL_GPIO_Write+0xc>)
 80a0c84:	681b      	ldr	r3, [r3, #0]
 80a0c86:	691b      	ldr	r3, [r3, #16]
 80a0c88:	9301      	str	r3, [sp, #4]
 80a0c8a:	bd08      	pop	{r3, pc}
 80a0c8c:	080601b0 	.word	0x080601b0

080a0c90 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0c90:	b508      	push	{r3, lr}
 80a0c92:	4b02      	ldr	r3, [pc, #8]	; (80a0c9c <hal_i2c_write+0xc>)
 80a0c94:	681b      	ldr	r3, [r3, #0]
 80a0c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0c98:	9301      	str	r3, [sp, #4]
 80a0c9a:	bd08      	pop	{r3, pc}
 80a0c9c:	080601ac 	.word	0x080601ac

080a0ca0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0ca0:	b508      	push	{r3, lr}
 80a0ca2:	4b02      	ldr	r3, [pc, #8]	; (80a0cac <hal_i2c_available+0xc>)
 80a0ca4:	681b      	ldr	r3, [r3, #0]
 80a0ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0ca8:	9301      	str	r3, [sp, #4]
 80a0caa:	bd08      	pop	{r3, pc}
 80a0cac:	080601ac 	.word	0x080601ac

080a0cb0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0cb0:	b508      	push	{r3, lr}
 80a0cb2:	4b02      	ldr	r3, [pc, #8]	; (80a0cbc <hal_i2c_read+0xc>)
 80a0cb4:	681b      	ldr	r3, [r3, #0]
 80a0cb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0cb8:	9301      	str	r3, [sp, #4]
 80a0cba:	bd08      	pop	{r3, pc}
 80a0cbc:	080601ac 	.word	0x080601ac

080a0cc0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0cc0:	b508      	push	{r3, lr}
 80a0cc2:	4b02      	ldr	r3, [pc, #8]	; (80a0ccc <hal_i2c_peek+0xc>)
 80a0cc4:	681b      	ldr	r3, [r3, #0]
 80a0cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0cc8:	9301      	str	r3, [sp, #4]
 80a0cca:	bd08      	pop	{r3, pc}
 80a0ccc:	080601ac 	.word	0x080601ac

080a0cd0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0cd0:	b508      	push	{r3, lr}
 80a0cd2:	4b02      	ldr	r3, [pc, #8]	; (80a0cdc <hal_i2c_flush+0xc>)
 80a0cd4:	681b      	ldr	r3, [r3, #0]
 80a0cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0cd8:	9301      	str	r3, [sp, #4]
 80a0cda:	bd08      	pop	{r3, pc}
 80a0cdc:	080601ac 	.word	0x080601ac

080a0ce0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0ce0:	b508      	push	{r3, lr}
 80a0ce2:	4b02      	ldr	r3, [pc, #8]	; (80a0cec <hal_i2c_is_enabled+0xc>)
 80a0ce4:	681b      	ldr	r3, [r3, #0]
 80a0ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0ce8:	9301      	str	r3, [sp, #4]
 80a0cea:	bd08      	pop	{r3, pc}
 80a0cec:	080601ac 	.word	0x080601ac

080a0cf0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0cf0:	b508      	push	{r3, lr}
 80a0cf2:	4b03      	ldr	r3, [pc, #12]	; (80a0d00 <hal_i2c_init+0x10>)
 80a0cf4:	681b      	ldr	r3, [r3, #0]
 80a0cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0cfa:	9301      	str	r3, [sp, #4]
 80a0cfc:	bd08      	pop	{r3, pc}
 80a0cfe:	0000      	.short	0x0000
 80a0d00:	080601ac 	.word	0x080601ac

080a0d04 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0d04:	b508      	push	{r3, lr}
 80a0d06:	4b02      	ldr	r3, [pc, #8]	; (80a0d10 <hal_spi_init+0xc>)
 80a0d08:	681b      	ldr	r3, [r3, #0]
 80a0d0a:	69db      	ldr	r3, [r3, #28]
 80a0d0c:	9301      	str	r3, [sp, #4]
 80a0d0e:	bd08      	pop	{r3, pc}
 80a0d10:	080601b4 	.word	0x080601b4

080a0d14 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a0d14:	b508      	push	{r3, lr}
 80a0d16:	4b02      	ldr	r3, [pc, #8]	; (80a0d20 <hal_spi_is_enabled+0xc>)
 80a0d18:	681b      	ldr	r3, [r3, #0]
 80a0d1a:	6a1b      	ldr	r3, [r3, #32]
 80a0d1c:	9301      	str	r3, [sp, #4]
 80a0d1e:	bd08      	pop	{r3, pc}
 80a0d20:	080601b4 	.word	0x080601b4

080a0d24 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a0d24:	b508      	push	{r3, lr}
 80a0d26:	4b02      	ldr	r3, [pc, #8]	; (80a0d30 <hal_usart_init+0xc>)
 80a0d28:	681b      	ldr	r3, [r3, #0]
 80a0d2a:	699b      	ldr	r3, [r3, #24]
 80a0d2c:	9301      	str	r3, [sp, #4]
 80a0d2e:	bd08      	pop	{r3, pc}
 80a0d30:	080601c4 	.word	0x080601c4

080a0d34 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0d34:	b508      	push	{r3, lr}
 80a0d36:	4b02      	ldr	r3, [pc, #8]	; (80a0d40 <hal_usart_write+0xc>)
 80a0d38:	681b      	ldr	r3, [r3, #0]
 80a0d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0d3c:	9301      	str	r3, [sp, #4]
 80a0d3e:	bd08      	pop	{r3, pc}
 80a0d40:	080601c4 	.word	0x080601c4

080a0d44 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0d44:	b508      	push	{r3, lr}
 80a0d46:	4b02      	ldr	r3, [pc, #8]	; (80a0d50 <hal_usart_available+0xc>)
 80a0d48:	681b      	ldr	r3, [r3, #0]
 80a0d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0d4c:	9301      	str	r3, [sp, #4]
 80a0d4e:	bd08      	pop	{r3, pc}
 80a0d50:	080601c4 	.word	0x080601c4

080a0d54 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0d54:	b508      	push	{r3, lr}
 80a0d56:	4b02      	ldr	r3, [pc, #8]	; (80a0d60 <hal_usart_read+0xc>)
 80a0d58:	681b      	ldr	r3, [r3, #0]
 80a0d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0d5c:	9301      	str	r3, [sp, #4]
 80a0d5e:	bd08      	pop	{r3, pc}
 80a0d60:	080601c4 	.word	0x080601c4

080a0d64 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0d64:	b508      	push	{r3, lr}
 80a0d66:	4b02      	ldr	r3, [pc, #8]	; (80a0d70 <hal_usart_peek+0xc>)
 80a0d68:	681b      	ldr	r3, [r3, #0]
 80a0d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0d6c:	9301      	str	r3, [sp, #4]
 80a0d6e:	bd08      	pop	{r3, pc}
 80a0d70:	080601c4 	.word	0x080601c4

080a0d74 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0d74:	b508      	push	{r3, lr}
 80a0d76:	4b02      	ldr	r3, [pc, #8]	; (80a0d80 <hal_usart_flush+0xc>)
 80a0d78:	681b      	ldr	r3, [r3, #0]
 80a0d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0d7c:	9301      	str	r3, [sp, #4]
 80a0d7e:	bd08      	pop	{r3, pc}
 80a0d80:	080601c4 	.word	0x080601c4

080a0d84 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a0d84:	b508      	push	{r3, lr}
 80a0d86:	4b02      	ldr	r3, [pc, #8]	; (80a0d90 <hal_usart_is_enabled+0xc>)
 80a0d88:	681b      	ldr	r3, [r3, #0]
 80a0d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0d8c:	9301      	str	r3, [sp, #4]
 80a0d8e:	bd08      	pop	{r3, pc}
 80a0d90:	080601c4 	.word	0x080601c4

080a0d94 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0d94:	b508      	push	{r3, lr}
 80a0d96:	4b02      	ldr	r3, [pc, #8]	; (80a0da0 <hal_usart_available_data_for_write+0xc>)
 80a0d98:	681b      	ldr	r3, [r3, #0]
 80a0d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0d9c:	9301      	str	r3, [sp, #4]
 80a0d9e:	bd08      	pop	{r3, pc}
 80a0da0:	080601c4 	.word	0x080601c4

080a0da4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0da4:	b508      	push	{r3, lr}
 80a0da6:	4b02      	ldr	r3, [pc, #8]	; (80a0db0 <HAL_USB_USART_Init+0xc>)
 80a0da8:	681b      	ldr	r3, [r3, #0]
 80a0daa:	681b      	ldr	r3, [r3, #0]
 80a0dac:	9301      	str	r3, [sp, #4]
 80a0dae:	bd08      	pop	{r3, pc}
 80a0db0:	080601d8 	.word	0x080601d8

080a0db4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0db4:	b508      	push	{r3, lr}
 80a0db6:	4b02      	ldr	r3, [pc, #8]	; (80a0dc0 <HAL_USB_USART_Available_Data+0xc>)
 80a0db8:	681b      	ldr	r3, [r3, #0]
 80a0dba:	691b      	ldr	r3, [r3, #16]
 80a0dbc:	9301      	str	r3, [sp, #4]
 80a0dbe:	bd08      	pop	{r3, pc}
 80a0dc0:	080601d8 	.word	0x080601d8

080a0dc4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0dc4:	b508      	push	{r3, lr}
 80a0dc6:	4b02      	ldr	r3, [pc, #8]	; (80a0dd0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0dc8:	681b      	ldr	r3, [r3, #0]
 80a0dca:	695b      	ldr	r3, [r3, #20]
 80a0dcc:	9301      	str	r3, [sp, #4]
 80a0dce:	bd08      	pop	{r3, pc}
 80a0dd0:	080601d8 	.word	0x080601d8

080a0dd4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0dd4:	b508      	push	{r3, lr}
 80a0dd6:	4b02      	ldr	r3, [pc, #8]	; (80a0de0 <HAL_USB_USART_Receive_Data+0xc>)
 80a0dd8:	681b      	ldr	r3, [r3, #0]
 80a0dda:	699b      	ldr	r3, [r3, #24]
 80a0ddc:	9301      	str	r3, [sp, #4]
 80a0dde:	bd08      	pop	{r3, pc}
 80a0de0:	080601d8 	.word	0x080601d8

080a0de4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0de4:	b508      	push	{r3, lr}
 80a0de6:	4b02      	ldr	r3, [pc, #8]	; (80a0df0 <HAL_USB_USART_Send_Data+0xc>)
 80a0de8:	681b      	ldr	r3, [r3, #0]
 80a0dea:	69db      	ldr	r3, [r3, #28]
 80a0dec:	9301      	str	r3, [sp, #4]
 80a0dee:	bd08      	pop	{r3, pc}
 80a0df0:	080601d8 	.word	0x080601d8

080a0df4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0df4:	b508      	push	{r3, lr}
 80a0df6:	4b02      	ldr	r3, [pc, #8]	; (80a0e00 <HAL_USB_USART_Flush_Data+0xc>)
 80a0df8:	681b      	ldr	r3, [r3, #0]
 80a0dfa:	6a1b      	ldr	r3, [r3, #32]
 80a0dfc:	9301      	str	r3, [sp, #4]
 80a0dfe:	bd08      	pop	{r3, pc}
 80a0e00:	080601d8 	.word	0x080601d8

080a0e04 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0e04:	b508      	push	{r3, lr}
 80a0e06:	4b02      	ldr	r3, [pc, #8]	; (80a0e10 <inet_gethostbyname+0xc>)
 80a0e08:	681b      	ldr	r3, [r3, #0]
 80a0e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0e0c:	9301      	str	r3, [sp, #4]
 80a0e0e:	bd08      	pop	{r3, pc}
 80a0e10:	080601c0 	.word	0x080601c0

080a0e14 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0e14:	b508      	push	{r3, lr}
 80a0e16:	4b02      	ldr	r3, [pc, #8]	; (80a0e20 <set_system_mode+0xc>)
 80a0e18:	681b      	ldr	r3, [r3, #0]
 80a0e1a:	685b      	ldr	r3, [r3, #4]
 80a0e1c:	9301      	str	r3, [sp, #4]
 80a0e1e:	bd08      	pop	{r3, pc}
 80a0e20:	080601a4 	.word	0x080601a4

080a0e24 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0e24:	b508      	push	{r3, lr}
 80a0e26:	4b03      	ldr	r3, [pc, #12]	; (80a0e34 <system_ctrl_set_app_request_handler+0x10>)
 80a0e28:	681b      	ldr	r3, [r3, #0]
 80a0e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0e2e:	9301      	str	r3, [sp, #4]
 80a0e30:	bd08      	pop	{r3, pc}
 80a0e32:	0000      	.short	0x0000
 80a0e34:	080601a4 	.word	0x080601a4

080a0e38 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0e38:	b508      	push	{r3, lr}
 80a0e3a:	4b03      	ldr	r3, [pc, #12]	; (80a0e48 <system_ctrl_set_result+0x10>)
 80a0e3c:	681b      	ldr	r3, [r3, #0]
 80a0e3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0e42:	9301      	str	r3, [sp, #4]
 80a0e44:	bd08      	pop	{r3, pc}
 80a0e46:	0000      	.short	0x0000
 80a0e48:	080601a4 	.word	0x080601a4

080a0e4c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0e4c:	b508      	push	{r3, lr}
 80a0e4e:	4b02      	ldr	r3, [pc, #8]	; (80a0e58 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0e50:	681b      	ldr	r3, [r3, #0]
 80a0e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0e54:	9301      	str	r3, [sp, #4]
 80a0e56:	bd08      	pop	{r3, pc}
 80a0e58:	080601cc 	.word	0x080601cc

080a0e5c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0e5c:	b508      	push	{r3, lr}
 80a0e5e:	4b02      	ldr	r3, [pc, #8]	; (80a0e68 <network_connect+0xc>)
 80a0e60:	681b      	ldr	r3, [r3, #0]
 80a0e62:	685b      	ldr	r3, [r3, #4]
 80a0e64:	9301      	str	r3, [sp, #4]
 80a0e66:	bd08      	pop	{r3, pc}
 80a0e68:	080601c8 	.word	0x080601c8

080a0e6c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0e6c:	b508      	push	{r3, lr}
 80a0e6e:	4b02      	ldr	r3, [pc, #8]	; (80a0e78 <network_connecting+0xc>)
 80a0e70:	681b      	ldr	r3, [r3, #0]
 80a0e72:	689b      	ldr	r3, [r3, #8]
 80a0e74:	9301      	str	r3, [sp, #4]
 80a0e76:	bd08      	pop	{r3, pc}
 80a0e78:	080601c8 	.word	0x080601c8

080a0e7c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0e7c:	b508      	push	{r3, lr}
 80a0e7e:	4b02      	ldr	r3, [pc, #8]	; (80a0e88 <network_disconnect+0xc>)
 80a0e80:	681b      	ldr	r3, [r3, #0]
 80a0e82:	68db      	ldr	r3, [r3, #12]
 80a0e84:	9301      	str	r3, [sp, #4]
 80a0e86:	bd08      	pop	{r3, pc}
 80a0e88:	080601c8 	.word	0x080601c8

080a0e8c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0e8c:	b508      	push	{r3, lr}
 80a0e8e:	4b02      	ldr	r3, [pc, #8]	; (80a0e98 <network_ready+0xc>)
 80a0e90:	681b      	ldr	r3, [r3, #0]
 80a0e92:	691b      	ldr	r3, [r3, #16]
 80a0e94:	9301      	str	r3, [sp, #4]
 80a0e96:	bd08      	pop	{r3, pc}
 80a0e98:	080601c8 	.word	0x080601c8

080a0e9c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0e9c:	b508      	push	{r3, lr}
 80a0e9e:	4b02      	ldr	r3, [pc, #8]	; (80a0ea8 <network_on+0xc>)
 80a0ea0:	681b      	ldr	r3, [r3, #0]
 80a0ea2:	695b      	ldr	r3, [r3, #20]
 80a0ea4:	9301      	str	r3, [sp, #4]
 80a0ea6:	bd08      	pop	{r3, pc}
 80a0ea8:	080601c8 	.word	0x080601c8

080a0eac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0eac:	b508      	push	{r3, lr}
 80a0eae:	4b02      	ldr	r3, [pc, #8]	; (80a0eb8 <network_off+0xc>)
 80a0eb0:	681b      	ldr	r3, [r3, #0]
 80a0eb2:	699b      	ldr	r3, [r3, #24]
 80a0eb4:	9301      	str	r3, [sp, #4]
 80a0eb6:	bd08      	pop	{r3, pc}
 80a0eb8:	080601c8 	.word	0x080601c8

080a0ebc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0ebc:	b508      	push	{r3, lr}
 80a0ebe:	4b02      	ldr	r3, [pc, #8]	; (80a0ec8 <network_listen+0xc>)
 80a0ec0:	681b      	ldr	r3, [r3, #0]
 80a0ec2:	69db      	ldr	r3, [r3, #28]
 80a0ec4:	9301      	str	r3, [sp, #4]
 80a0ec6:	bd08      	pop	{r3, pc}
 80a0ec8:	080601c8 	.word	0x080601c8

080a0ecc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0ecc:	b508      	push	{r3, lr}
 80a0ece:	4b02      	ldr	r3, [pc, #8]	; (80a0ed8 <network_listening+0xc>)
 80a0ed0:	681b      	ldr	r3, [r3, #0]
 80a0ed2:	6a1b      	ldr	r3, [r3, #32]
 80a0ed4:	9301      	str	r3, [sp, #4]
 80a0ed6:	bd08      	pop	{r3, pc}
 80a0ed8:	080601c8 	.word	0x080601c8

080a0edc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0edc:	b508      	push	{r3, lr}
 80a0ede:	4b02      	ldr	r3, [pc, #8]	; (80a0ee8 <network_set_listen_timeout+0xc>)
 80a0ee0:	681b      	ldr	r3, [r3, #0]
 80a0ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0ee4:	9301      	str	r3, [sp, #4]
 80a0ee6:	bd08      	pop	{r3, pc}
 80a0ee8:	080601c8 	.word	0x080601c8

080a0eec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0eec:	b508      	push	{r3, lr}
 80a0eee:	4b02      	ldr	r3, [pc, #8]	; (80a0ef8 <network_get_listen_timeout+0xc>)
 80a0ef0:	681b      	ldr	r3, [r3, #0]
 80a0ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0ef4:	9301      	str	r3, [sp, #4]
 80a0ef6:	bd08      	pop	{r3, pc}
 80a0ef8:	080601c8 	.word	0x080601c8

080a0efc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0efc:	b508      	push	{r3, lr}
 80a0efe:	4b02      	ldr	r3, [pc, #8]	; (80a0f08 <network_is_on+0xc>)
 80a0f00:	681b      	ldr	r3, [r3, #0]
 80a0f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0f04:	9301      	str	r3, [sp, #4]
 80a0f06:	bd08      	pop	{r3, pc}
 80a0f08:	080601c8 	.word	0x080601c8

080a0f0c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a0f0c:	b508      	push	{r3, lr}
 80a0f0e:	4b02      	ldr	r3, [pc, #8]	; (80a0f18 <network_is_off+0xc>)
 80a0f10:	681b      	ldr	r3, [r3, #0]
 80a0f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0f14:	9301      	str	r3, [sp, #4]
 80a0f16:	bd08      	pop	{r3, pc}
 80a0f18:	080601c8 	.word	0x080601c8

080a0f1c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0f1c:	b508      	push	{r3, lr}
 80a0f1e:	4b02      	ldr	r3, [pc, #8]	; (80a0f28 <malloc+0xc>)
 80a0f20:	681b      	ldr	r3, [r3, #0]
 80a0f22:	681b      	ldr	r3, [r3, #0]
 80a0f24:	9301      	str	r3, [sp, #4]
 80a0f26:	bd08      	pop	{r3, pc}
 80a0f28:	080601a0 	.word	0x080601a0

080a0f2c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0f2c:	b508      	push	{r3, lr}
 80a0f2e:	4b02      	ldr	r3, [pc, #8]	; (80a0f38 <free+0xc>)
 80a0f30:	681b      	ldr	r3, [r3, #0]
 80a0f32:	685b      	ldr	r3, [r3, #4]
 80a0f34:	9301      	str	r3, [sp, #4]
 80a0f36:	bd08      	pop	{r3, pc}
 80a0f38:	080601a0 	.word	0x080601a0

080a0f3c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0f3c:	b508      	push	{r3, lr}
 80a0f3e:	4b02      	ldr	r3, [pc, #8]	; (80a0f48 <realloc+0xc>)
 80a0f40:	681b      	ldr	r3, [r3, #0]
 80a0f42:	689b      	ldr	r3, [r3, #8]
 80a0f44:	9301      	str	r3, [sp, #4]
 80a0f46:	bd08      	pop	{r3, pc}
 80a0f48:	080601a0 	.word	0x080601a0

080a0f4c <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
 80a0f4c:	b508      	push	{r3, lr}
 80a0f4e:	4b02      	ldr	r3, [pc, #8]	; (80a0f58 <sscanf+0xc>)
 80a0f50:	681b      	ldr	r3, [r3, #0]
 80a0f52:	695b      	ldr	r3, [r3, #20]
 80a0f54:	9301      	str	r3, [sp, #4]
 80a0f56:	bd08      	pop	{r3, pc}
 80a0f58:	080601a0 	.word	0x080601a0

080a0f5c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0f5c:	b508      	push	{r3, lr}
 80a0f5e:	4b02      	ldr	r3, [pc, #8]	; (80a0f68 <newlib_impure_ptr_callback+0xc>)
 80a0f60:	681b      	ldr	r3, [r3, #0]
 80a0f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0f64:	9301      	str	r3, [sp, #4]
 80a0f66:	bd08      	pop	{r3, pc}
 80a0f68:	080601a0 	.word	0x080601a0

080a0f6c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a0f6c:	4770      	bx	lr

080a0f6e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0f6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0f70:	4606      	mov	r6, r0
 80a0f72:	4615      	mov	r5, r2
 80a0f74:	460c      	mov	r4, r1
 80a0f76:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0f78:	42bc      	cmp	r4, r7
 80a0f7a:	d006      	beq.n	80a0f8a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0f7c:	6833      	ldr	r3, [r6, #0]
 80a0f7e:	4630      	mov	r0, r6
 80a0f80:	689b      	ldr	r3, [r3, #8]
 80a0f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0f86:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a0f88:	e7f6      	b.n	80a0f78 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a0f8a:	4628      	mov	r0, r5
 80a0f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0f8e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a0f8e:	2200      	movs	r2, #0
 80a0f90:	7c00      	ldrb	r0, [r0, #16]
 80a0f92:	f7ff be7d 	b.w	80a0c90 <hal_i2c_write>

080a0f96 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a0f96:	2100      	movs	r1, #0
 80a0f98:	7c00      	ldrb	r0, [r0, #16]
 80a0f9a:	f7ff be81 	b.w	80a0ca0 <hal_i2c_available>

080a0f9e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a0f9e:	2100      	movs	r1, #0
 80a0fa0:	7c00      	ldrb	r0, [r0, #16]
 80a0fa2:	f7ff be85 	b.w	80a0cb0 <hal_i2c_read>

080a0fa6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a0fa6:	2100      	movs	r1, #0
 80a0fa8:	7c00      	ldrb	r0, [r0, #16]
 80a0faa:	f7ff be89 	b.w	80a0cc0 <hal_i2c_peek>

080a0fae <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a0fae:	2100      	movs	r1, #0
 80a0fb0:	7c00      	ldrb	r0, [r0, #16]
 80a0fb2:	f7ff be8d 	b.w	80a0cd0 <hal_i2c_flush>

080a0fb6 <_ZN7TwoWireD0Ev>:
 80a0fb6:	b510      	push	{r4, lr}
 80a0fb8:	4604      	mov	r4, r0
 80a0fba:	2114      	movs	r1, #20
 80a0fbc:	f000 fce4 	bl	80a1988 <_ZdlPvj>
 80a0fc0:	4620      	mov	r0, r4
 80a0fc2:	bd10      	pop	{r4, pc}

080a0fc4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0fc4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0fca:	4604      	mov	r4, r0
 80a0fcc:	4608      	mov	r0, r1
 80a0fce:	2100      	movs	r1, #0
 80a0fd0:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0fd4:	4b03      	ldr	r3, [pc, #12]	; (80a0fe4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a0fd6:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0fd8:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a0fda:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a0fdc:	f7ff fe88 	bl	80a0cf0 <hal_i2c_init>
}
 80a0fe0:	4620      	mov	r0, r4
 80a0fe2:	bd10      	pop	{r4, pc}
 80a0fe4:	080a1ba8 	.word	0x080a1ba8

080a0fe8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0fe8:	4770      	bx	lr

080a0fea <_ZN9IPAddressD0Ev>:
 80a0fea:	b510      	push	{r4, lr}
 80a0fec:	4604      	mov	r4, r0
 80a0fee:	2118      	movs	r1, #24
 80a0ff0:	f000 fcca 	bl	80a1988 <_ZdlPvj>
 80a0ff4:	4620      	mov	r0, r4
 80a0ff6:	bd10      	pop	{r4, pc}

080a0ff8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0ffa:	460e      	mov	r6, r1
 80a0ffc:	2400      	movs	r4, #0
 80a0ffe:	f100 0708 	add.w	r7, r0, #8
 80a1002:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a1004:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a1008:	220a      	movs	r2, #10
 80a100a:	4630      	mov	r0, r6
 80a100c:	f000 f8ef 	bl	80a11ee <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1010:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1012:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a1014:	d101      	bne.n	80a101a <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a1016:	4620      	mov	r0, r4
 80a1018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a101a:	2c00      	cmp	r4, #0
 80a101c:	d0f2      	beq.n	80a1004 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a101e:	212e      	movs	r1, #46	; 0x2e
 80a1020:	4630      	mov	r0, r6
 80a1022:	f000 f8e1 	bl	80a11e8 <_ZN5Print5printEc>
 80a1026:	4404      	add	r4, r0
 80a1028:	e7ec      	b.n	80a1004 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a102c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a102c:	b510      	push	{r4, lr}
 80a102e:	4604      	mov	r4, r0
 80a1030:	4b04      	ldr	r3, [pc, #16]	; (80a1044 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1032:	2211      	movs	r2, #17
 80a1034:	2100      	movs	r1, #0
 80a1036:	f840 3b04 	str.w	r3, [r0], #4
 80a103a:	f000 fccb 	bl	80a19d4 <memset>
}
 80a103e:	4620      	mov	r0, r4
 80a1040:	bd10      	pop	{r4, pc}
 80a1042:	bf00      	nop
 80a1044:	080a1bd0 	.word	0x080a1bd0

080a1048 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1048:	4603      	mov	r3, r0
 80a104a:	4a07      	ldr	r2, [pc, #28]	; (80a1068 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a104c:	b510      	push	{r4, lr}
 80a104e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a1052:	f101 0210 	add.w	r2, r1, #16
 80a1056:	f851 4b04 	ldr.w	r4, [r1], #4
 80a105a:	4291      	cmp	r1, r2
 80a105c:	f843 4b04 	str.w	r4, [r3], #4
 80a1060:	d1f9      	bne.n	80a1056 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1062:	780a      	ldrb	r2, [r1, #0]
 80a1064:	701a      	strb	r2, [r3, #0]
}
 80a1066:	bd10      	pop	{r4, pc}
 80a1068:	080a1bd0 	.word	0x080a1bd0

080a106c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a106c:	4a02      	ldr	r2, [pc, #8]	; (80a1078 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a106e:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a1072:	2204      	movs	r2, #4
 80a1074:	7502      	strb	r2, [r0, #20]
}
 80a1076:	4770      	bx	lr
 80a1078:	080a1bd0 	.word	0x080a1bd0

080a107c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a107c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a107e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1082:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a1086:	2304      	movs	r3, #4
 80a1088:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a108c:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1090:	6044      	str	r4, [r0, #4]
 80a1092:	7503      	strb	r3, [r0, #20]
}
 80a1094:	bd10      	pop	{r4, pc}
	...

080a1098 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a109a:	4d04      	ldr	r5, [pc, #16]	; (80a10ac <_ZN9IPAddressC1Ehhhh+0x14>)
 80a109c:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a109e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a10a2:	9500      	str	r5, [sp, #0]
 80a10a4:	f7ff ffea 	bl	80a107c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a10a8:	b003      	add	sp, #12
 80a10aa:	bd30      	pop	{r4, r5, pc}
 80a10ac:	080a1bd0 	.word	0x080a1bd0

080a10b0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a10b0:	4b01      	ldr	r3, [pc, #4]	; (80a10b8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a10b2:	4a02      	ldr	r2, [pc, #8]	; (80a10bc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a10b4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a10b6:	4770      	bx	lr
 80a10b8:	20000a10 	.word	0x20000a10
 80a10bc:	080a1bdc 	.word	0x080a1bdc

080a10c0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a10c0:	2300      	movs	r3, #0
 80a10c2:	6840      	ldr	r0, [r0, #4]
 80a10c4:	461a      	mov	r2, r3
 80a10c6:	f7ff bec9 	b.w	80a0e5c <network_connect>

080a10ca <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a10ca:	2200      	movs	r2, #0
 80a10cc:	2102      	movs	r1, #2
 80a10ce:	6840      	ldr	r0, [r0, #4]
 80a10d0:	f7ff bed4 	b.w	80a0e7c <network_disconnect>

080a10d4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a10d4:	2200      	movs	r2, #0
 80a10d6:	6840      	ldr	r0, [r0, #4]
 80a10d8:	4611      	mov	r1, r2
 80a10da:	f7ff bec7 	b.w	80a0e6c <network_connecting>

080a10de <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a10de:	2200      	movs	r2, #0
 80a10e0:	6840      	ldr	r0, [r0, #4]
 80a10e2:	4611      	mov	r1, r2
 80a10e4:	f7ff bed2 	b.w	80a0e8c <network_ready>

080a10e8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a10e8:	2300      	movs	r3, #0
 80a10ea:	6840      	ldr	r0, [r0, #4]
 80a10ec:	461a      	mov	r2, r3
 80a10ee:	4619      	mov	r1, r3
 80a10f0:	f7ff bed4 	b.w	80a0e9c <network_on>

080a10f4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a10f4:	2300      	movs	r3, #0
 80a10f6:	6840      	ldr	r0, [r0, #4]
 80a10f8:	461a      	mov	r2, r3
 80a10fa:	4619      	mov	r1, r3
 80a10fc:	f7ff bed6 	b.w	80a0eac <network_off>

080a1100 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a1100:	2100      	movs	r1, #0
 80a1102:	6840      	ldr	r0, [r0, #4]
 80a1104:	f7ff befa 	b.w	80a0efc <network_is_on>

080a1108 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a1108:	2100      	movs	r1, #0
 80a110a:	6840      	ldr	r0, [r0, #4]
 80a110c:	f7ff befe 	b.w	80a0f0c <network_is_off>

080a1110 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1110:	2200      	movs	r2, #0
 80a1112:	6840      	ldr	r0, [r0, #4]
 80a1114:	f081 0101 	eor.w	r1, r1, #1
 80a1118:	f7ff bed0 	b.w	80a0ebc <network_listen>

080a111c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a111c:	2200      	movs	r2, #0
 80a111e:	6840      	ldr	r0, [r0, #4]
 80a1120:	f7ff bedc 	b.w	80a0edc <network_set_listen_timeout>

080a1124 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1124:	2200      	movs	r2, #0
 80a1126:	6840      	ldr	r0, [r0, #4]
 80a1128:	4611      	mov	r1, r2
 80a112a:	f7ff bedf 	b.w	80a0eec <network_get_listen_timeout>

080a112e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a112e:	2200      	movs	r2, #0
 80a1130:	6840      	ldr	r0, [r0, #4]
 80a1132:	4611      	mov	r1, r2
 80a1134:	f7ff beca 	b.w	80a0ecc <network_listening>

080a1138 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1138:	b570      	push	{r4, r5, r6, lr}
 80a113a:	4615      	mov	r5, r2
 80a113c:	b08e      	sub	sp, #56	; 0x38
 80a113e:	4604      	mov	r4, r0
    IPAddress addr;
 80a1140:	a808      	add	r0, sp, #32
 80a1142:	f7ff ff73 	bl	80a102c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1146:	2211      	movs	r2, #17
 80a1148:	2100      	movs	r1, #0
 80a114a:	a803      	add	r0, sp, #12
 80a114c:	f000 fc42 	bl	80a19d4 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1150:	2600      	movs	r6, #0
 80a1152:	4628      	mov	r0, r5
 80a1154:	f000 fc9e 	bl	80a1a94 <strlen>
 80a1158:	4b0a      	ldr	r3, [pc, #40]	; (80a1184 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a115a:	9600      	str	r6, [sp, #0]
 80a115c:	b281      	uxth	r1, r0
 80a115e:	685b      	ldr	r3, [r3, #4]
 80a1160:	4628      	mov	r0, r5
 80a1162:	aa03      	add	r2, sp, #12
 80a1164:	f7ff fe4e 	bl	80a0e04 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1168:	b130      	cbz	r0, 80a1178 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a116a:	4631      	mov	r1, r6
 80a116c:	4620      	mov	r0, r4
 80a116e:	f7ff ff7d 	bl	80a106c <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1172:	4620      	mov	r0, r4
 80a1174:	b00e      	add	sp, #56	; 0x38
 80a1176:	bd70      	pop	{r4, r5, r6, pc}
 80a1178:	4620      	mov	r0, r4
 80a117a:	a903      	add	r1, sp, #12
 80a117c:	f7ff ff64 	bl	80a1048 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a1180:	e7f7      	b.n	80a1172 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a1182:	bf00      	nop
 80a1184:	20000e94 	.word	0x20000e94

080a1188 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1188:	4b02      	ldr	r3, [pc, #8]	; (80a1194 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a118a:	4a03      	ldr	r2, [pc, #12]	; (80a1198 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a118c:	601a      	str	r2, [r3, #0]
 80a118e:	2200      	movs	r2, #0
 80a1190:	605a      	str	r2, [r3, #4]

} // spark
 80a1192:	4770      	bx	lr
 80a1194:	20000a14 	.word	0x20000a14
 80a1198:	080a1be8 	.word	0x080a1be8

080a119c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a119c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a119e:	4606      	mov	r6, r0
 80a11a0:	460d      	mov	r5, r1
  size_t n = 0;
 80a11a2:	2400      	movs	r4, #0
 80a11a4:	188f      	adds	r7, r1, r2
  while (size--) {
 80a11a6:	42bd      	cmp	r5, r7
 80a11a8:	d00c      	beq.n	80a11c4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a11aa:	6833      	ldr	r3, [r6, #0]
 80a11ac:	4630      	mov	r0, r6
 80a11ae:	689b      	ldr	r3, [r3, #8]
 80a11b0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a11b4:	4798      	blx	r3
     if (chunk>=0)
 80a11b6:	1e03      	subs	r3, r0, #0
 80a11b8:	db01      	blt.n	80a11be <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a11ba:	441c      	add	r4, r3
  while (size--) {
 80a11bc:	e7f3      	b.n	80a11a6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a11be:	2c00      	cmp	r4, #0
 80a11c0:	bf08      	it	eq
 80a11c2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a11c4:	4620      	mov	r0, r4
 80a11c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a11c8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a11c8:	b570      	push	{r4, r5, r6, lr}
 80a11ca:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a11cc:	460c      	mov	r4, r1
    }
 80a11ce:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a11d0:	b149      	cbz	r1, 80a11e6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a11d2:	f000 fc5f 	bl	80a1a94 <strlen>
 80a11d6:	682b      	ldr	r3, [r5, #0]
 80a11d8:	4602      	mov	r2, r0
 80a11da:	4621      	mov	r1, r4
 80a11dc:	4628      	mov	r0, r5
    }
 80a11de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a11e2:	68db      	ldr	r3, [r3, #12]
 80a11e4:	4718      	bx	r3
    }
 80a11e6:	bd70      	pop	{r4, r5, r6, pc}

080a11e8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a11e8:	6803      	ldr	r3, [r0, #0]
 80a11ea:	689b      	ldr	r3, [r3, #8]
 80a11ec:	4718      	bx	r3

080a11ee <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a11ee:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a11f0:	2a01      	cmp	r2, #1
 80a11f2:	bf98      	it	ls
 80a11f4:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a11f6:	b530      	push	{r4, r5, lr}
 80a11f8:	b08b      	sub	sp, #44	; 0x2c
 80a11fa:	460c      	mov	r4, r1
  *str = '\0';
 80a11fc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a1200:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a1202:	4625      	mov	r5, r4
 80a1204:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a1208:	fb04 5312 	mls	r3, r4, r2, r5
 80a120c:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a120e:	2b09      	cmp	r3, #9
 80a1210:	bf94      	ite	ls
 80a1212:	3330      	addls	r3, #48	; 0x30
 80a1214:	3337      	addhi	r3, #55	; 0x37
 80a1216:	b2db      	uxtb	r3, r3
  } while(n);
 80a1218:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a121a:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a121e:	d9f0      	bls.n	80a1202 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a1220:	f7ff ffd2 	bl	80a11c8 <_ZN5Print5writeEPKc>
}
 80a1224:	b00b      	add	sp, #44	; 0x2c
 80a1226:	bd30      	pop	{r4, r5, pc}

080a1228 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
 80a1228:	b510      	push	{r4, lr}
  if (0 == max) {
 80a122a:	4604      	mov	r4, r0
 80a122c:	b128      	cbz	r0, 80a123a <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
 80a122e:	f000 fbfd 	bl	80a1a2c <rand>
 80a1232:	fb90 f3f4 	sdiv	r3, r0, r4
 80a1236:	fb03 0414 	mls	r4, r3, r4, r0
}
 80a123a:	4620      	mov	r0, r4
 80a123c:	bd10      	pop	{r4, pc}

080a123e <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
 80a123e:	4288      	cmp	r0, r1
{
 80a1240:	b510      	push	{r4, lr}
 80a1242:	4604      	mov	r4, r0
  if (min >= max) {
 80a1244:	da03      	bge.n	80a124e <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
 80a1246:	1a08      	subs	r0, r1, r0
 80a1248:	f7ff ffee 	bl	80a1228 <_Z6randomi>
 80a124c:	4404      	add	r4, r0
}
 80a124e:	4620      	mov	r0, r4
 80a1250:	bd10      	pop	{r4, pc}
	...

080a1254 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1254:	2200      	movs	r2, #0
 80a1256:	4b01      	ldr	r3, [pc, #4]	; (80a125c <_GLOBAL__sub_I_RGB+0x8>)
 80a1258:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a125a:	4770      	bx	lr
 80a125c:	20000a1c 	.word	0x20000a1c

080a1260 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a1260:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1262:	2600      	movs	r6, #0
 80a1264:	4604      	mov	r4, r0
 80a1266:	460d      	mov	r5, r1
 80a1268:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a126c:	f7ff fcd0 	bl	80a0c10 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a1270:	4628      	mov	r0, r5
    _spi = spi;
 80a1272:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a1274:	f7ff fd46 	bl	80a0d04 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a1278:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a127a:	6066      	str	r6, [r4, #4]
}
 80a127c:	bd70      	pop	{r4, r5, r6, pc}

080a127e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a127e:	b510      	push	{r4, lr}
 80a1280:	4604      	mov	r4, r0
{
	free(buffer);
 80a1282:	6800      	ldr	r0, [r0, #0]
 80a1284:	f7ff fe52 	bl	80a0f2c <free>
}
 80a1288:	4620      	mov	r0, r4
 80a128a:	bd10      	pop	{r4, pc}

080a128c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a128c:	b510      	push	{r4, lr}
 80a128e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1290:	6800      	ldr	r0, [r0, #0]
 80a1292:	b108      	cbz	r0, 80a1298 <_ZN6String10invalidateEv+0xc>
 80a1294:	f7ff fe4a 	bl	80a0f2c <free>
	buffer = NULL;
 80a1298:	2300      	movs	r3, #0
	capacity = len = 0;
 80a129a:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a129e:	6023      	str	r3, [r4, #0]
}
 80a12a0:	bd10      	pop	{r4, pc}

080a12a2 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a12a2:	b538      	push	{r3, r4, r5, lr}
 80a12a4:	4604      	mov	r4, r0
 80a12a6:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a12a8:	6800      	ldr	r0, [r0, #0]
 80a12aa:	3101      	adds	r1, #1
 80a12ac:	f7ff fe46 	bl	80a0f3c <realloc>
	if (newbuffer) {
 80a12b0:	b110      	cbz	r0, 80a12b8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a12b2:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a12b6:	2001      	movs	r0, #1
	}
	return 0;
}
 80a12b8:	bd38      	pop	{r3, r4, r5, pc}

080a12ba <_ZN6String7reserveEj>:
{
 80a12ba:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a12bc:	6803      	ldr	r3, [r0, #0]
{
 80a12be:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a12c0:	b123      	cbz	r3, 80a12cc <_ZN6String7reserveEj+0x12>
 80a12c2:	6843      	ldr	r3, [r0, #4]
 80a12c4:	428b      	cmp	r3, r1
 80a12c6:	d301      	bcc.n	80a12cc <_ZN6String7reserveEj+0x12>
 80a12c8:	2001      	movs	r0, #1
}
 80a12ca:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a12cc:	4620      	mov	r0, r4
 80a12ce:	f7ff ffe8 	bl	80a12a2 <_ZN6String12changeBufferEj>
 80a12d2:	2800      	cmp	r0, #0
 80a12d4:	d0f9      	beq.n	80a12ca <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a12d6:	68a3      	ldr	r3, [r4, #8]
 80a12d8:	2b00      	cmp	r3, #0
 80a12da:	d1f5      	bne.n	80a12c8 <_ZN6String7reserveEj+0xe>
 80a12dc:	6822      	ldr	r2, [r4, #0]
 80a12de:	7013      	strb	r3, [r2, #0]
 80a12e0:	e7f2      	b.n	80a12c8 <_ZN6String7reserveEj+0xe>

080a12e2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a12e2:	b570      	push	{r4, r5, r6, lr}
 80a12e4:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a12e6:	4611      	mov	r1, r2
{
 80a12e8:	4604      	mov	r4, r0
 80a12ea:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a12ec:	f7ff ffe5 	bl	80a12ba <_ZN6String7reserveEj>
 80a12f0:	b920      	cbnz	r0, 80a12fc <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a12f2:	4620      	mov	r0, r4
 80a12f4:	f7ff ffca 	bl	80a128c <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a12f8:	4620      	mov	r0, r4
 80a12fa:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a12fc:	462a      	mov	r2, r5
 80a12fe:	4631      	mov	r1, r6
 80a1300:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a1302:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1304:	f000 fb58 	bl	80a19b8 <memcpy>
	buffer[len] = 0;
 80a1308:	2100      	movs	r1, #0
 80a130a:	6822      	ldr	r2, [r4, #0]
 80a130c:	68a3      	ldr	r3, [r4, #8]
 80a130e:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a1310:	e7f2      	b.n	80a12f8 <_ZN6String4copyEPKcj+0x16>

080a1312 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a1312:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a1314:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a1316:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1318:	460d      	mov	r5, r1
	capacity = 0;
 80a131a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a131e:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1320:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a1322:	b139      	cbz	r1, 80a1334 <_ZN6StringC1EPKc+0x22>
 80a1324:	4608      	mov	r0, r1
 80a1326:	f000 fbb5 	bl	80a1a94 <strlen>
 80a132a:	4629      	mov	r1, r5
 80a132c:	4602      	mov	r2, r0
 80a132e:	4620      	mov	r0, r4
 80a1330:	f7ff ffd7 	bl	80a12e2 <_ZN6String4copyEPKcj>
}
 80a1334:	4620      	mov	r0, r4
 80a1336:	bd38      	pop	{r3, r4, r5, pc}

080a1338 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a1338:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a133a:	2000      	movs	r0, #0
 80a133c:	4b04      	ldr	r3, [pc, #16]	; (80a1350 <_GLOBAL__sub_I_System+0x18>)
 80a133e:	601a      	str	r2, [r3, #0]
 80a1340:	4b04      	ldr	r3, [pc, #16]	; (80a1354 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a1342:	4a05      	ldr	r2, [pc, #20]	; (80a1358 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a1344:	6018      	str	r0, [r3, #0]
 80a1346:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a1348:	7198      	strb	r0, [r3, #6]
 80a134a:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a134c:	f7ff bd62 	b.w	80a0e14 <set_system_mode>
 80a1350:	20000a38 	.word	0x20000a38
 80a1354:	20000a2c 	.word	0x20000a2c
 80a1358:	ffff0000 	.word	0xffff0000

080a135c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a135c:	4b02      	ldr	r3, [pc, #8]	; (80a1368 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a135e:	681a      	ldr	r2, [r3, #0]
 80a1360:	4b02      	ldr	r3, [pc, #8]	; (80a136c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1362:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a1364:	4770      	bx	lr
 80a1366:	bf00      	nop
 80a1368:	20000988 	.word	0x20000988
 80a136c:	20000a3c 	.word	0x20000a3c

080a1370 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a1370:	4770      	bx	lr

080a1372 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1372:	7441      	strb	r1, [r0, #17]
}
 80a1374:	4770      	bx	lr

080a1376 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1376:	4770      	bx	lr

080a1378 <_ZN11USARTSerial17availableForWriteEv>:
{
 80a1378:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a137a:	7c00      	ldrb	r0, [r0, #16]
 80a137c:	f7ff fd0a 	bl	80a0d94 <hal_usart_available_data_for_write>
}
 80a1380:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1384:	bd08      	pop	{r3, pc}

080a1386 <_ZN11USARTSerial9availableEv>:
{
 80a1386:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a1388:	7c00      	ldrb	r0, [r0, #16]
 80a138a:	f7ff fcdb 	bl	80a0d44 <hal_usart_available>
}
 80a138e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1392:	bd08      	pop	{r3, pc}

080a1394 <_ZN11USARTSerial4peekEv>:
{
 80a1394:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a1396:	7c00      	ldrb	r0, [r0, #16]
 80a1398:	f7ff fce4 	bl	80a0d64 <hal_usart_peek>
}
 80a139c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a13a0:	bd08      	pop	{r3, pc}

080a13a2 <_ZN11USARTSerial4readEv>:
{
 80a13a2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a13a4:	7c00      	ldrb	r0, [r0, #16]
 80a13a6:	f7ff fcd5 	bl	80a0d54 <hal_usart_read>
}
 80a13aa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a13ae:	bd08      	pop	{r3, pc}

080a13b0 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a13b0:	7c00      	ldrb	r0, [r0, #16]
 80a13b2:	f7ff bcdf 	b.w	80a0d74 <hal_usart_flush>

080a13b6 <_ZN11USARTSerial5writeEh>:
{
 80a13b6:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a13b8:	7c46      	ldrb	r6, [r0, #17]
{
 80a13ba:	4604      	mov	r4, r0
 80a13bc:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a13be:	b12e      	cbz	r6, 80a13cc <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a13c0:	4629      	mov	r1, r5
 80a13c2:	7c20      	ldrb	r0, [r4, #16]
}
 80a13c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a13c8:	f7ff bcb4 	b.w	80a0d34 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a13cc:	7c00      	ldrb	r0, [r0, #16]
 80a13ce:	f7ff fce1 	bl	80a0d94 <hal_usart_available_data_for_write>
 80a13d2:	2800      	cmp	r0, #0
 80a13d4:	dcf4      	bgt.n	80a13c0 <_ZN11USARTSerial5writeEh+0xa>
}
 80a13d6:	4630      	mov	r0, r6
 80a13d8:	bd70      	pop	{r4, r5, r6, pc}

080a13da <_ZN11USARTSerialD0Ev>:
 80a13da:	b510      	push	{r4, lr}
 80a13dc:	4604      	mov	r4, r0
 80a13de:	2114      	movs	r1, #20
 80a13e0:	f000 fad2 	bl	80a1988 <_ZdlPvj>
 80a13e4:	4620      	mov	r0, r4
 80a13e6:	bd10      	pop	{r4, pc}

080a13e8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a13e8:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a13ec:	b510      	push	{r4, lr}
 80a13ee:	4604      	mov	r4, r0
 80a13f0:	4608      	mov	r0, r1
 80a13f2:	4611      	mov	r1, r2
 80a13f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a13f8:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a13fc:	4a04      	ldr	r2, [pc, #16]	; (80a1410 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a13fe:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1400:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a1402:	2201      	movs	r2, #1
 80a1404:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a1406:	461a      	mov	r2, r3
 80a1408:	f7ff fc8c 	bl	80a0d24 <hal_usart_init>
}
 80a140c:	4620      	mov	r0, r4
 80a140e:	bd10      	pop	{r4, pc}
 80a1410:	080a1c40 	.word	0x080a1c40

080a1414 <_Z22__fetch_global_Serial1v>:
{
 80a1414:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1416:	4d0c      	ldr	r5, [pc, #48]	; (80a1448 <_Z22__fetch_global_Serial1v+0x34>)
 80a1418:	7829      	ldrb	r1, [r5, #0]
 80a141a:	f3bf 8f5b 	dmb	ish
 80a141e:	f011 0401 	ands.w	r4, r1, #1
 80a1422:	d10f      	bne.n	80a1444 <_Z22__fetch_global_Serial1v+0x30>
 80a1424:	4628      	mov	r0, r5
 80a1426:	f7fe fe3a 	bl	80a009e <__cxa_guard_acquire>
 80a142a:	b158      	cbz	r0, 80a1444 <_Z22__fetch_global_Serial1v+0x30>
 80a142c:	4621      	mov	r1, r4
 80a142e:	4b07      	ldr	r3, [pc, #28]	; (80a144c <_Z22__fetch_global_Serial1v+0x38>)
 80a1430:	4a07      	ldr	r2, [pc, #28]	; (80a1450 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1432:	4808      	ldr	r0, [pc, #32]	; (80a1454 <_Z22__fetch_global_Serial1v+0x40>)
 80a1434:	f7ff ffd8 	bl	80a13e8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a1438:	4628      	mov	r0, r5
 80a143a:	f7fe fe35 	bl	80a00a8 <__cxa_guard_release>
 80a143e:	4806      	ldr	r0, [pc, #24]	; (80a1458 <_Z22__fetch_global_Serial1v+0x44>)
 80a1440:	f000 faa6 	bl	80a1990 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1444:	4803      	ldr	r0, [pc, #12]	; (80a1454 <_Z22__fetch_global_Serial1v+0x40>)
 80a1446:	bd38      	pop	{r3, r4, r5, pc}
 80a1448:	20000a40 	.word	0x20000a40
 80a144c:	20000ac8 	.word	0x20000ac8
 80a1450:	20000a44 	.word	0x20000a44
 80a1454:	20000b4c 	.word	0x20000b4c
 80a1458:	080a1377 	.word	0x080a1377

080a145c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a145c:	7441      	strb	r1, [r0, #17]
}
 80a145e:	4770      	bx	lr

080a1460 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1460:	4770      	bx	lr

080a1462 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1462:	4770      	bx	lr

080a1464 <_ZN9USBSerial4readEv>:
{
 80a1464:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1466:	2100      	movs	r1, #0
 80a1468:	7c00      	ldrb	r0, [r0, #16]
 80a146a:	f7ff fcb3 	bl	80a0dd4 <HAL_USB_USART_Receive_Data>
}
 80a146e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1472:	bd08      	pop	{r3, pc}

080a1474 <_ZN9USBSerial4peekEv>:
{
 80a1474:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1476:	2101      	movs	r1, #1
 80a1478:	7c00      	ldrb	r0, [r0, #16]
 80a147a:	f7ff fcab 	bl	80a0dd4 <HAL_USB_USART_Receive_Data>
}
 80a147e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1482:	bd08      	pop	{r3, pc}

080a1484 <_ZN9USBSerial17availableForWriteEv>:
{
 80a1484:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1486:	7c00      	ldrb	r0, [r0, #16]
 80a1488:	f7ff fc9c 	bl	80a0dc4 <HAL_USB_USART_Available_Data_For_Write>
}
 80a148c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1490:	bd08      	pop	{r3, pc}

080a1492 <_ZN9USBSerial9availableEv>:
{
 80a1492:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1494:	7c00      	ldrb	r0, [r0, #16]
 80a1496:	f7ff fc8d 	bl	80a0db4 <HAL_USB_USART_Available_Data>
}
 80a149a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a149e:	bd08      	pop	{r3, pc}

080a14a0 <_ZN9USBSerial5writeEh>:
{
 80a14a0:	b538      	push	{r3, r4, r5, lr}
 80a14a2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a14a4:	7c00      	ldrb	r0, [r0, #16]
{
 80a14a6:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a14a8:	f7ff fc8c 	bl	80a0dc4 <HAL_USB_USART_Available_Data_For_Write>
 80a14ac:	2800      	cmp	r0, #0
 80a14ae:	dc01      	bgt.n	80a14b4 <_ZN9USBSerial5writeEh+0x14>
 80a14b0:	7c60      	ldrb	r0, [r4, #17]
 80a14b2:	b128      	cbz	r0, 80a14c0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a14b4:	4629      	mov	r1, r5
 80a14b6:	7c20      	ldrb	r0, [r4, #16]
 80a14b8:	f7ff fc94 	bl	80a0de4 <HAL_USB_USART_Send_Data>
 80a14bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a14c0:	bd38      	pop	{r3, r4, r5, pc}

080a14c2 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a14c2:	7c00      	ldrb	r0, [r0, #16]
 80a14c4:	f7ff bc96 	b.w	80a0df4 <HAL_USB_USART_Flush_Data>

080a14c8 <_ZN9USBSerialD0Ev>:
 80a14c8:	b510      	push	{r4, lr}
 80a14ca:	4604      	mov	r4, r0
 80a14cc:	2114      	movs	r1, #20
 80a14ce:	f000 fa5b 	bl	80a1988 <_ZdlPvj>
 80a14d2:	4620      	mov	r0, r4
 80a14d4:	bd10      	pop	{r4, pc}

080a14d6 <__tcf_1>:
 80a14d6:	4770      	bx	lr

080a14d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a14d8:	b510      	push	{r4, lr}
 80a14da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a14de:	4604      	mov	r4, r0
 80a14e0:	4608      	mov	r0, r1
 80a14e2:	2100      	movs	r1, #0
 80a14e4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a14e8:	4b04      	ldr	r3, [pc, #16]	; (80a14fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a14ea:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a14ec:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a14ee:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a14f0:	4611      	mov	r1, r2
  _blocking = true;
 80a14f2:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a14f4:	f7ff fc56 	bl	80a0da4 <HAL_USB_USART_Init>
}
 80a14f8:	4620      	mov	r0, r4
 80a14fa:	bd10      	pop	{r4, pc}
 80a14fc:	080a1c70 	.word	0x080a1c70

080a1500 <_Z19acquireSerialBufferv>:
{
 80a1500:	b510      	push	{r4, lr}
 80a1502:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1504:	2214      	movs	r2, #20
 80a1506:	2100      	movs	r1, #0
 80a1508:	f000 fa64 	bl	80a19d4 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a150c:	4b05      	ldr	r3, [pc, #20]	; (80a1524 <_Z19acquireSerialBufferv+0x24>)
}
 80a150e:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a1510:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1512:	4b05      	ldr	r3, [pc, #20]	; (80a1528 <_Z19acquireSerialBufferv+0x28>)
 80a1514:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1516:	f240 1301 	movw	r3, #257	; 0x101
 80a151a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a151c:	2381      	movs	r3, #129	; 0x81
 80a151e:	8223      	strh	r3, [r4, #16]
}
 80a1520:	bd10      	pop	{r4, pc}
 80a1522:	bf00      	nop
 80a1524:	20000b90 	.word	0x20000b90
 80a1528:	20000c91 	.word	0x20000c91

080a152c <_Z16_fetch_usbserialv>:
{
 80a152c:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a152e:	4d0e      	ldr	r5, [pc, #56]	; (80a1568 <_Z16_fetch_usbserialv+0x3c>)
{
 80a1530:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1532:	a801      	add	r0, sp, #4
 80a1534:	f7ff ffe4 	bl	80a1500 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1538:	7829      	ldrb	r1, [r5, #0]
 80a153a:	f3bf 8f5b 	dmb	ish
 80a153e:	f011 0401 	ands.w	r4, r1, #1
 80a1542:	d10e      	bne.n	80a1562 <_Z16_fetch_usbserialv+0x36>
 80a1544:	4628      	mov	r0, r5
 80a1546:	f7fe fdaa 	bl	80a009e <__cxa_guard_acquire>
 80a154a:	b150      	cbz	r0, 80a1562 <_Z16_fetch_usbserialv+0x36>
 80a154c:	4621      	mov	r1, r4
 80a154e:	aa01      	add	r2, sp, #4
 80a1550:	4806      	ldr	r0, [pc, #24]	; (80a156c <_Z16_fetch_usbserialv+0x40>)
 80a1552:	f7ff ffc1 	bl	80a14d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1556:	4628      	mov	r0, r5
 80a1558:	f7fe fda6 	bl	80a00a8 <__cxa_guard_release>
 80a155c:	4804      	ldr	r0, [pc, #16]	; (80a1570 <_Z16_fetch_usbserialv+0x44>)
 80a155e:	f000 fa17 	bl	80a1990 <atexit>
	return _usbserial;
}
 80a1562:	4802      	ldr	r0, [pc, #8]	; (80a156c <_Z16_fetch_usbserialv+0x40>)
 80a1564:	b007      	add	sp, #28
 80a1566:	bd30      	pop	{r4, r5, pc}
 80a1568:	20000b60 	.word	0x20000b60
 80a156c:	20000b68 	.word	0x20000b68
 80a1570:	080a1461 	.word	0x080a1461

080a1574 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1574:	b510      	push	{r4, lr}
 80a1576:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1578:	2214      	movs	r2, #20
 80a157a:	2100      	movs	r1, #0
 80a157c:	f000 fa2a 	bl	80a19d4 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1580:	4b05      	ldr	r3, [pc, #20]	; (80a1598 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1582:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a1584:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1586:	4b05      	ldr	r3, [pc, #20]	; (80a159c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1588:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a158a:	f240 1301 	movw	r3, #257	; 0x101
 80a158e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1590:	2381      	movs	r3, #129	; 0x81
 80a1592:	8223      	strh	r3, [r4, #16]
}
 80a1594:	bd10      	pop	{r4, pc}
 80a1596:	bf00      	nop
 80a1598:	20000d12 	.word	0x20000d12
 80a159c:	20000e13 	.word	0x20000e13

080a15a0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a15a0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a15a2:	4c0e      	ldr	r4, [pc, #56]	; (80a15dc <_Z17_fetch_usbserial1v+0x3c>)
{
 80a15a4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a15a6:	a801      	add	r0, sp, #4
 80a15a8:	f7ff ffe4 	bl	80a1574 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a15ac:	7823      	ldrb	r3, [r4, #0]
 80a15ae:	f3bf 8f5b 	dmb	ish
 80a15b2:	07db      	lsls	r3, r3, #31
 80a15b4:	d40e      	bmi.n	80a15d4 <_Z17_fetch_usbserial1v+0x34>
 80a15b6:	4620      	mov	r0, r4
 80a15b8:	f7fe fd71 	bl	80a009e <__cxa_guard_acquire>
 80a15bc:	b150      	cbz	r0, 80a15d4 <_Z17_fetch_usbserial1v+0x34>
 80a15be:	2101      	movs	r1, #1
 80a15c0:	aa01      	add	r2, sp, #4
 80a15c2:	4807      	ldr	r0, [pc, #28]	; (80a15e0 <_Z17_fetch_usbserial1v+0x40>)
 80a15c4:	f7ff ff88 	bl	80a14d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a15c8:	4620      	mov	r0, r4
 80a15ca:	f7fe fd6d 	bl	80a00a8 <__cxa_guard_release>
 80a15ce:	4805      	ldr	r0, [pc, #20]	; (80a15e4 <_Z17_fetch_usbserial1v+0x44>)
 80a15d0:	f000 f9de 	bl	80a1990 <atexit>
  return _usbserial1;
}
 80a15d4:	4802      	ldr	r0, [pc, #8]	; (80a15e0 <_Z17_fetch_usbserial1v+0x40>)
 80a15d6:	b006      	add	sp, #24
 80a15d8:	bd10      	pop	{r4, pc}
 80a15da:	bf00      	nop
 80a15dc:	20000b64 	.word	0x20000b64
 80a15e0:	20000b7c 	.word	0x20000b7c
 80a15e4:	080a14d7 	.word	0x080a14d7

080a15e8 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a15e8:	2200      	movs	r2, #0
 80a15ea:	6840      	ldr	r0, [r0, #4]
 80a15ec:	4611      	mov	r1, r2
 80a15ee:	f7ff bc4d 	b.w	80a0e8c <network_ready>

080a15f2 <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a15f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a15f4:	4615      	mov	r5, r2
 80a15f6:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a15f8:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a15fa:	460e      	mov	r6, r1
 80a15fc:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a15fe:	2100      	movs	r1, #0
 80a1600:	a803      	add	r0, sp, #12
 80a1602:	f000 f9e7 	bl	80a19d4 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1606:	4628      	mov	r0, r5
 80a1608:	f000 fa44 	bl	80a1a94 <strlen>
 80a160c:	2700      	movs	r7, #0
 80a160e:	b281      	uxth	r1, r0
 80a1610:	6873      	ldr	r3, [r6, #4]
 80a1612:	4628      	mov	r0, r5
 80a1614:	9700      	str	r7, [sp, #0]
 80a1616:	aa03      	add	r2, sp, #12
 80a1618:	f7ff fbf4 	bl	80a0e04 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a161c:	b130      	cbz	r0, 80a162c <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a161e:	4639      	mov	r1, r7
 80a1620:	4620      	mov	r0, r4
 80a1622:	f7ff fd23 	bl	80a106c <_ZN9IPAddressC1Em>
    }
 80a1626:	4620      	mov	r0, r4
 80a1628:	b009      	add	sp, #36	; 0x24
 80a162a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a162c:	4620      	mov	r0, r4
 80a162e:	a903      	add	r1, sp, #12
 80a1630:	f7ff fd0a 	bl	80a1048 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a1634:	e7f7      	b.n	80a1626 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a1636 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a1636:	2200      	movs	r2, #0
 80a1638:	6840      	ldr	r0, [r0, #4]
 80a163a:	4611      	mov	r1, r2
 80a163c:	f7ff bc46 	b.w	80a0ecc <network_listening>

080a1640 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a1640:	2200      	movs	r2, #0
 80a1642:	6840      	ldr	r0, [r0, #4]
 80a1644:	4611      	mov	r1, r2
 80a1646:	f7ff bc51 	b.w	80a0eec <network_get_listen_timeout>

080a164a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a164a:	2200      	movs	r2, #0
 80a164c:	6840      	ldr	r0, [r0, #4]
 80a164e:	f7ff bc45 	b.w	80a0edc <network_set_listen_timeout>

080a1652 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1652:	2200      	movs	r2, #0
 80a1654:	6840      	ldr	r0, [r0, #4]
 80a1656:	f081 0101 	eor.w	r1, r1, #1
 80a165a:	f7ff bc2f 	b.w	80a0ebc <network_listen>

080a165e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a165e:	2300      	movs	r3, #0
 80a1660:	6840      	ldr	r0, [r0, #4]
 80a1662:	461a      	mov	r2, r3
 80a1664:	4619      	mov	r1, r3
 80a1666:	f7ff bc21 	b.w	80a0eac <network_off>

080a166a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a166a:	2300      	movs	r3, #0
 80a166c:	6840      	ldr	r0, [r0, #4]
 80a166e:	461a      	mov	r2, r3
 80a1670:	4619      	mov	r1, r3
 80a1672:	f7ff bc13 	b.w	80a0e9c <network_on>

080a1676 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a1676:	2200      	movs	r2, #0
 80a1678:	6840      	ldr	r0, [r0, #4]
 80a167a:	4611      	mov	r1, r2
 80a167c:	f7ff bbf6 	b.w	80a0e6c <network_connecting>

080a1680 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1680:	2200      	movs	r2, #0
 80a1682:	2102      	movs	r1, #2
 80a1684:	6840      	ldr	r0, [r0, #4]
 80a1686:	f7ff bbf9 	b.w	80a0e7c <network_disconnect>

080a168a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a168a:	2300      	movs	r3, #0
 80a168c:	6840      	ldr	r0, [r0, #4]
 80a168e:	461a      	mov	r2, r3
 80a1690:	f7ff bbe4 	b.w	80a0e5c <network_connect>

080a1694 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1694:	2204      	movs	r2, #4
 80a1696:	4b02      	ldr	r3, [pc, #8]	; (80a16a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1698:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a169a:	4a02      	ldr	r2, [pc, #8]	; (80a16a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a169c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a169e:	4770      	bx	lr
 80a16a0:	20000e94 	.word	0x20000e94
 80a16a4:	080a1ca0 	.word	0x080a1ca0

080a16a8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a16a8:	4b01      	ldr	r3, [pc, #4]	; (80a16b0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a16aa:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a16ac:	4770      	bx	lr
 80a16ae:	bf00      	nop
 80a16b0:	2000098c 	.word	0x2000098c

080a16b4 <serialEventRun>:
{
 80a16b4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a16b6:	4b13      	ldr	r3, [pc, #76]	; (80a1704 <serialEventRun+0x50>)
 80a16b8:	b143      	cbz	r3, 80a16cc <serialEventRun+0x18>
 80a16ba:	f7ff ff37 	bl	80a152c <_Z16_fetch_usbserialv>
 80a16be:	6803      	ldr	r3, [r0, #0]
 80a16c0:	691b      	ldr	r3, [r3, #16]
 80a16c2:	4798      	blx	r3
 80a16c4:	2800      	cmp	r0, #0
 80a16c6:	dd01      	ble.n	80a16cc <serialEventRun+0x18>
        serialEvent();
 80a16c8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a16cc:	4b0e      	ldr	r3, [pc, #56]	; (80a1708 <serialEventRun+0x54>)
 80a16ce:	b143      	cbz	r3, 80a16e2 <serialEventRun+0x2e>
 80a16d0:	f7ff fea0 	bl	80a1414 <_Z22__fetch_global_Serial1v>
 80a16d4:	6803      	ldr	r3, [r0, #0]
 80a16d6:	691b      	ldr	r3, [r3, #16]
 80a16d8:	4798      	blx	r3
 80a16da:	2800      	cmp	r0, #0
 80a16dc:	dd01      	ble.n	80a16e2 <serialEventRun+0x2e>
        serialEvent1();
 80a16de:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a16e2:	4b0a      	ldr	r3, [pc, #40]	; (80a170c <serialEventRun+0x58>)
 80a16e4:	b10b      	cbz	r3, 80a16ea <serialEventRun+0x36>
 80a16e6:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a16ea:	4b09      	ldr	r3, [pc, #36]	; (80a1710 <serialEventRun+0x5c>)
 80a16ec:	b143      	cbz	r3, 80a1700 <serialEventRun+0x4c>
 80a16ee:	f7ff ff57 	bl	80a15a0 <_Z17_fetch_usbserial1v>
 80a16f2:	6803      	ldr	r3, [r0, #0]
 80a16f4:	691b      	ldr	r3, [r3, #16]
 80a16f6:	4798      	blx	r3
 80a16f8:	2800      	cmp	r0, #0
 80a16fa:	dd01      	ble.n	80a1700 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a16fc:	f3af 8000 	nop.w
}
 80a1700:	bd08      	pop	{r3, pc}
 80a1702:	bf00      	nop
	...

080a1714 <_post_loop>:
{
 80a1714:	b508      	push	{r3, lr}
	serialEventRun();
 80a1716:	f7ff ffcd 	bl	80a16b4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a171a:	f7ff fa99 	bl	80a0c50 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a171e:	4b01      	ldr	r3, [pc, #4]	; (80a1724 <_post_loop+0x10>)
 80a1720:	6018      	str	r0, [r3, #0]
}
 80a1722:	bd08      	pop	{r3, pc}
 80a1724:	20000eb4 	.word	0x20000eb4

080a1728 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1728:	4805      	ldr	r0, [pc, #20]	; (80a1740 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a172a:	4a06      	ldr	r2, [pc, #24]	; (80a1744 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a172c:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a172e:	1a12      	subs	r2, r2, r0
 80a1730:	4905      	ldr	r1, [pc, #20]	; (80a1748 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a1732:	f000 f941 	bl	80a19b8 <memcpy>
    __backup_sram_signature = signature;
 80a1736:	4b05      	ldr	r3, [pc, #20]	; (80a174c <_Z33system_initialize_user_backup_ramv+0x24>)
 80a1738:	4a05      	ldr	r2, [pc, #20]	; (80a1750 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a173a:	601a      	str	r2, [r3, #0]
}
 80a173c:	bd08      	pop	{r3, pc}
 80a173e:	bf00      	nop
 80a1740:	40024000 	.word	0x40024000
 80a1744:	40024004 	.word	0x40024004
 80a1748:	080a1d00 	.word	0x080a1d00
 80a174c:	40024000 	.word	0x40024000
 80a1750:	9a271c1e 	.word	0x9a271c1e

080a1754 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1754:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1756:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1758:	461a      	mov	r2, r3
 80a175a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a175e:	9300      	str	r3, [sp, #0]
 80a1760:	f7ff fb6a 	bl	80a0e38 <system_ctrl_set_result>
}
 80a1764:	b003      	add	sp, #12
 80a1766:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a176c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a176c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a176e:	8843      	ldrh	r3, [r0, #2]
 80a1770:	2b0a      	cmp	r3, #10
 80a1772:	d008      	beq.n	80a1786 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1774:	2b50      	cmp	r3, #80	; 0x50
 80a1776:	d10b      	bne.n	80a1790 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a1778:	4b09      	ldr	r3, [pc, #36]	; (80a17a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a177a:	681b      	ldr	r3, [r3, #0]
 80a177c:	b14b      	cbz	r3, 80a1792 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a177e:	b003      	add	sp, #12
 80a1780:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a1784:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a1786:	f7ff ffe5 	bl	80a1754 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a178a:	b003      	add	sp, #12
 80a178c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1790:	2300      	movs	r3, #0
 80a1792:	461a      	mov	r2, r3
 80a1794:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1798:	9300      	str	r3, [sp, #0]
 80a179a:	f7ff fb4d 	bl	80a0e38 <system_ctrl_set_result>
}
 80a179e:	e7f4      	b.n	80a178a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a17a0:	20000ea0 	.word	0x20000ea0

080a17a4 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a17a4:	2100      	movs	r1, #0
{
 80a17a6:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a17a8:	4811      	ldr	r0, [pc, #68]	; (80a17f0 <module_user_init_hook+0x4c>)
 80a17aa:	f7ff fbd7 	bl	80a0f5c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a17ae:	4b11      	ldr	r3, [pc, #68]	; (80a17f4 <module_user_init_hook+0x50>)
 80a17b0:	681a      	ldr	r2, [r3, #0]
 80a17b2:	4b11      	ldr	r3, [pc, #68]	; (80a17f8 <module_user_init_hook+0x54>)
 80a17b4:	429a      	cmp	r2, r3
 80a17b6:	bf0c      	ite	eq
 80a17b8:	2201      	moveq	r2, #1
 80a17ba:	2200      	movne	r2, #0
 80a17bc:	4b0f      	ldr	r3, [pc, #60]	; (80a17fc <module_user_init_hook+0x58>)
 80a17be:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a17c0:	d001      	beq.n	80a17c6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a17c2:	f7ff ffb1 	bl	80a1728 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a17c6:	f7ff fa33 	bl	80a0c30 <HAL_RNG_GetRandomNumber>
 80a17ca:	4604      	mov	r4, r0
    srand(seed);
 80a17cc:	f000 f90a 	bl	80a19e4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a17d0:	4b0b      	ldr	r3, [pc, #44]	; (80a1800 <module_user_init_hook+0x5c>)
 80a17d2:	b113      	cbz	r3, 80a17da <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a17d4:	4620      	mov	r0, r4
 80a17d6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a17da:	2100      	movs	r1, #0
 80a17dc:	4808      	ldr	r0, [pc, #32]	; (80a1800 <module_user_init_hook+0x5c>)
 80a17de:	f7ff fb35 	bl	80a0e4c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a17e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a17e6:	2100      	movs	r1, #0
 80a17e8:	4806      	ldr	r0, [pc, #24]	; (80a1804 <module_user_init_hook+0x60>)
 80a17ea:	f7ff bb1b 	b.w	80a0e24 <system_ctrl_set_app_request_handler>
 80a17ee:	bf00      	nop
 80a17f0:	080a16a9 	.word	0x080a16a9
 80a17f4:	40024000 	.word	0x40024000
 80a17f8:	9a271c1e 	.word	0x9a271c1e
 80a17fc:	20000e9c 	.word	0x20000e9c
 80a1800:	00000000 	.word	0x00000000
 80a1804:	080a176d 	.word	0x080a176d

080a1808 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a1808:	4b02      	ldr	r3, [pc, #8]	; (80a1814 <__tcf_0+0xc>)
 80a180a:	6898      	ldr	r0, [r3, #8]
 80a180c:	b108      	cbz	r0, 80a1812 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a180e:	f7ff ba07 	b.w	80a0c20 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a1812:	4770      	bx	lr
 80a1814:	20000ea8 	.word	0x20000ea8

080a1818 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a1818:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a181a:	b570      	push	{r4, r5, r6, lr}
 80a181c:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a181e:	d901      	bls.n	80a1824 <pinAvailable+0xc>
    return false;
 80a1820:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a1822:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a1824:	f1a0 030d 	sub.w	r3, r0, #13
 80a1828:	2b02      	cmp	r3, #2
 80a182a:	d90b      	bls.n	80a1844 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a182c:	2801      	cmp	r0, #1
 80a182e:	d824      	bhi.n	80a187a <pinAvailable+0x62>
 80a1830:	f000 f878 	bl	80a1924 <_Z19__fetch_global_Wirev>
 80a1834:	2100      	movs	r1, #0
 80a1836:	7c00      	ldrb	r0, [r0, #16]
 80a1838:	f7ff fa52 	bl	80a0ce0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a183c:	f080 0001 	eor.w	r0, r0, #1
 80a1840:	b2c0      	uxtb	r0, r0
 80a1842:	e7ee      	b.n	80a1822 <pinAvailable+0xa>
 80a1844:	4e12      	ldr	r6, [pc, #72]	; (80a1890 <pinAvailable+0x78>)
 80a1846:	7831      	ldrb	r1, [r6, #0]
 80a1848:	f3bf 8f5b 	dmb	ish
 80a184c:	f011 0501 	ands.w	r5, r1, #1
 80a1850:	d10d      	bne.n	80a186e <pinAvailable+0x56>
 80a1852:	4630      	mov	r0, r6
 80a1854:	f7fe fc23 	bl	80a009e <__cxa_guard_acquire>
 80a1858:	b148      	cbz	r0, 80a186e <pinAvailable+0x56>
 80a185a:	4629      	mov	r1, r5
 80a185c:	480d      	ldr	r0, [pc, #52]	; (80a1894 <pinAvailable+0x7c>)
 80a185e:	f7ff fcff 	bl	80a1260 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a1862:	4630      	mov	r0, r6
 80a1864:	f7fe fc20 	bl	80a00a8 <__cxa_guard_release>
 80a1868:	480b      	ldr	r0, [pc, #44]	; (80a1898 <pinAvailable+0x80>)
 80a186a:	f000 f891 	bl	80a1990 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a186e:	4b09      	ldr	r3, [pc, #36]	; (80a1894 <pinAvailable+0x7c>)
 80a1870:	7818      	ldrb	r0, [r3, #0]
 80a1872:	f7ff fa4f 	bl	80a0d14 <hal_spi_is_enabled>
 80a1876:	2800      	cmp	r0, #0
 80a1878:	d1d2      	bne.n	80a1820 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a187a:	3c12      	subs	r4, #18
 80a187c:	2c01      	cmp	r4, #1
 80a187e:	d805      	bhi.n	80a188c <pinAvailable+0x74>
 80a1880:	f7ff fdc8 	bl	80a1414 <_Z22__fetch_global_Serial1v>
 80a1884:	7c00      	ldrb	r0, [r0, #16]
 80a1886:	f7ff fa7d 	bl	80a0d84 <hal_usart_is_enabled>
 80a188a:	e7d7      	b.n	80a183c <pinAvailable+0x24>
  return true; // 'pin' is available
 80a188c:	2001      	movs	r0, #1
 80a188e:	e7c8      	b.n	80a1822 <pinAvailable+0xa>
 80a1890:	20000ea4 	.word	0x20000ea4
 80a1894:	20000ea8 	.word	0x20000ea8
 80a1898:	080a1809 	.word	0x080a1809

080a189c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a189c:	2817      	cmp	r0, #23
{
 80a189e:	b538      	push	{r3, r4, r5, lr}
 80a18a0:	4604      	mov	r4, r0
 80a18a2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a18a4:	d80a      	bhi.n	80a18bc <pinMode+0x20>
 80a18a6:	29ff      	cmp	r1, #255	; 0xff
 80a18a8:	d008      	beq.n	80a18bc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a18aa:	f7ff ffb5 	bl	80a1818 <pinAvailable>
 80a18ae:	b128      	cbz	r0, 80a18bc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a18b0:	4629      	mov	r1, r5
 80a18b2:	4620      	mov	r0, r4
}
 80a18b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a18b8:	f7ff b9d2 	b.w	80a0c60 <HAL_Pin_Mode>
}
 80a18bc:	bd38      	pop	{r3, r4, r5, pc}

080a18be <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a18be:	b538      	push	{r3, r4, r5, lr}
 80a18c0:	4604      	mov	r4, r0
 80a18c2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a18c4:	f7ff f9d4 	bl	80a0c70 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a18c8:	28ff      	cmp	r0, #255	; 0xff
 80a18ca:	d010      	beq.n	80a18ee <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a18cc:	2806      	cmp	r0, #6
 80a18ce:	d804      	bhi.n	80a18da <digitalWrite+0x1c>
 80a18d0:	234d      	movs	r3, #77	; 0x4d
 80a18d2:	fa23 f000 	lsr.w	r0, r3, r0
 80a18d6:	07c3      	lsls	r3, r0, #31
 80a18d8:	d409      	bmi.n	80a18ee <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a18da:	4620      	mov	r0, r4
 80a18dc:	f7ff ff9c 	bl	80a1818 <pinAvailable>
 80a18e0:	b128      	cbz	r0, 80a18ee <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a18e2:	4629      	mov	r1, r5
 80a18e4:	4620      	mov	r0, r4
}
 80a18e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a18ea:	f7ff b9c9 	b.w	80a0c80 <HAL_GPIO_Write>
}
 80a18ee:	bd38      	pop	{r3, r4, r5, pc}

080a18f0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a18f0:	4770      	bx	lr
	...

080a18f4 <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a18f4:	2300      	movs	r3, #0
{
 80a18f6:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a18f8:	2520      	movs	r5, #32
 80a18fa:	8043      	strh	r3, [r0, #2]
 80a18fc:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a18fe:	4e08      	ldr	r6, [pc, #32]	; (80a1920 <_Z17acquireWireBufferv+0x2c>)
{
 80a1900:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a1902:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1904:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a1906:	6085      	str	r5, [r0, #8]
 80a1908:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a190a:	4628      	mov	r0, r5
 80a190c:	f000 f83e 	bl	80a198c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1910:	4631      	mov	r1, r6
	};
 80a1912:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1914:	4628      	mov	r0, r5
 80a1916:	f000 f839 	bl	80a198c <_ZnajRKSt9nothrow_t>
	};
 80a191a:	60e0      	str	r0, [r4, #12]
}
 80a191c:	4620      	mov	r0, r4
 80a191e:	bd70      	pop	{r4, r5, r6, pc}
 80a1920:	080a1cd4 	.word	0x080a1cd4

080a1924 <_Z19__fetch_global_Wirev>:
{
 80a1924:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1926:	4d0e      	ldr	r5, [pc, #56]	; (80a1960 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a1928:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a192a:	7829      	ldrb	r1, [r5, #0]
 80a192c:	f3bf 8f5b 	dmb	ish
 80a1930:	f011 0401 	ands.w	r4, r1, #1
 80a1934:	d111      	bne.n	80a195a <_Z19__fetch_global_Wirev+0x36>
 80a1936:	4628      	mov	r0, r5
 80a1938:	f7fe fbb1 	bl	80a009e <__cxa_guard_acquire>
 80a193c:	b168      	cbz	r0, 80a195a <_Z19__fetch_global_Wirev+0x36>
 80a193e:	a801      	add	r0, sp, #4
 80a1940:	f7ff ffd8 	bl	80a18f4 <_Z17acquireWireBufferv>
 80a1944:	4621      	mov	r1, r4
 80a1946:	aa01      	add	r2, sp, #4
 80a1948:	4806      	ldr	r0, [pc, #24]	; (80a1964 <_Z19__fetch_global_Wirev+0x40>)
 80a194a:	f7ff fb3b 	bl	80a0fc4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a194e:	4628      	mov	r0, r5
 80a1950:	f7fe fbaa 	bl	80a00a8 <__cxa_guard_release>
 80a1954:	4804      	ldr	r0, [pc, #16]	; (80a1968 <_Z19__fetch_global_Wirev+0x44>)
 80a1956:	f000 f81b 	bl	80a1990 <atexit>
	return wire;
}
 80a195a:	4802      	ldr	r0, [pc, #8]	; (80a1964 <_Z19__fetch_global_Wirev+0x40>)
 80a195c:	b007      	add	sp, #28
 80a195e:	bd30      	pop	{r4, r5, pc}
 80a1960:	20000eb8 	.word	0x20000eb8
 80a1964:	20000ebc 	.word	0x20000ebc
 80a1968:	080a18f1 	.word	0x080a18f1

080a196c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a196c:	2300      	movs	r3, #0
 80a196e:	b507      	push	{r0, r1, r2, lr}
 80a1970:	461a      	mov	r2, r3
 80a1972:	4619      	mov	r1, r3
 80a1974:	9300      	str	r3, [sp, #0]
 80a1976:	4803      	ldr	r0, [pc, #12]	; (80a1984 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a1978:	f7ff fb8e 	bl	80a1098 <_ZN9IPAddressC1Ehhhh>
 80a197c:	b003      	add	sp, #12
 80a197e:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1982:	bf00      	nop
 80a1984:	20000ed0 	.word	0x20000ed0

080a1988 <_ZdlPvj>:
 80a1988:	f7fe bb87 	b.w	80a009a <_ZdlPv>

080a198c <_ZnajRKSt9nothrow_t>:
 80a198c:	f7fe bb83 	b.w	80a0096 <_Znaj>

080a1990 <atexit>:
 80a1990:	2300      	movs	r3, #0
 80a1992:	4601      	mov	r1, r0
 80a1994:	461a      	mov	r2, r3
 80a1996:	4618      	mov	r0, r3
 80a1998:	f000 b884 	b.w	80a1aa4 <__register_exitproc>

080a199c <memcmp>:
 80a199c:	b530      	push	{r4, r5, lr}
 80a199e:	2400      	movs	r4, #0
 80a19a0:	3901      	subs	r1, #1
 80a19a2:	42a2      	cmp	r2, r4
 80a19a4:	d101      	bne.n	80a19aa <memcmp+0xe>
 80a19a6:	2000      	movs	r0, #0
 80a19a8:	e005      	b.n	80a19b6 <memcmp+0x1a>
 80a19aa:	5d03      	ldrb	r3, [r0, r4]
 80a19ac:	3401      	adds	r4, #1
 80a19ae:	5d0d      	ldrb	r5, [r1, r4]
 80a19b0:	42ab      	cmp	r3, r5
 80a19b2:	d0f6      	beq.n	80a19a2 <memcmp+0x6>
 80a19b4:	1b58      	subs	r0, r3, r5
 80a19b6:	bd30      	pop	{r4, r5, pc}

080a19b8 <memcpy>:
 80a19b8:	440a      	add	r2, r1
 80a19ba:	4291      	cmp	r1, r2
 80a19bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a19c0:	d100      	bne.n	80a19c4 <memcpy+0xc>
 80a19c2:	4770      	bx	lr
 80a19c4:	b510      	push	{r4, lr}
 80a19c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a19ca:	4291      	cmp	r1, r2
 80a19cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a19d0:	d1f9      	bne.n	80a19c6 <memcpy+0xe>
 80a19d2:	bd10      	pop	{r4, pc}

080a19d4 <memset>:
 80a19d4:	4603      	mov	r3, r0
 80a19d6:	4402      	add	r2, r0
 80a19d8:	4293      	cmp	r3, r2
 80a19da:	d100      	bne.n	80a19de <memset+0xa>
 80a19dc:	4770      	bx	lr
 80a19de:	f803 1b01 	strb.w	r1, [r3], #1
 80a19e2:	e7f9      	b.n	80a19d8 <memset+0x4>

080a19e4 <srand>:
 80a19e4:	b538      	push	{r3, r4, r5, lr}
 80a19e6:	4b0d      	ldr	r3, [pc, #52]	; (80a1a1c <srand+0x38>)
 80a19e8:	4604      	mov	r4, r0
 80a19ea:	681d      	ldr	r5, [r3, #0]
 80a19ec:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a19ee:	b97b      	cbnz	r3, 80a1a10 <srand+0x2c>
 80a19f0:	2018      	movs	r0, #24
 80a19f2:	f7ff fa93 	bl	80a0f1c <malloc>
 80a19f6:	4a0a      	ldr	r2, [pc, #40]	; (80a1a20 <srand+0x3c>)
 80a19f8:	4b0a      	ldr	r3, [pc, #40]	; (80a1a24 <srand+0x40>)
 80a19fa:	63a8      	str	r0, [r5, #56]	; 0x38
 80a19fc:	e9c0 2300 	strd	r2, r3, [r0]
 80a1a00:	4b09      	ldr	r3, [pc, #36]	; (80a1a28 <srand+0x44>)
 80a1a02:	2201      	movs	r2, #1
 80a1a04:	6083      	str	r3, [r0, #8]
 80a1a06:	230b      	movs	r3, #11
 80a1a08:	8183      	strh	r3, [r0, #12]
 80a1a0a:	2300      	movs	r3, #0
 80a1a0c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1a10:	2200      	movs	r2, #0
 80a1a12:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a1a14:	611c      	str	r4, [r3, #16]
 80a1a16:	615a      	str	r2, [r3, #20]
 80a1a18:	bd38      	pop	{r3, r4, r5, pc}
 80a1a1a:	bf00      	nop
 80a1a1c:	2000098c 	.word	0x2000098c
 80a1a20:	abcd330e 	.word	0xabcd330e
 80a1a24:	e66d1234 	.word	0xe66d1234
 80a1a28:	0005deec 	.word	0x0005deec

080a1a2c <rand>:
 80a1a2c:	4b13      	ldr	r3, [pc, #76]	; (80a1a7c <rand+0x50>)
 80a1a2e:	b510      	push	{r4, lr}
 80a1a30:	681c      	ldr	r4, [r3, #0]
 80a1a32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1a34:	b97b      	cbnz	r3, 80a1a56 <rand+0x2a>
 80a1a36:	2018      	movs	r0, #24
 80a1a38:	f7ff fa70 	bl	80a0f1c <malloc>
 80a1a3c:	4a10      	ldr	r2, [pc, #64]	; (80a1a80 <rand+0x54>)
 80a1a3e:	4b11      	ldr	r3, [pc, #68]	; (80a1a84 <rand+0x58>)
 80a1a40:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1a42:	e9c0 2300 	strd	r2, r3, [r0]
 80a1a46:	4b10      	ldr	r3, [pc, #64]	; (80a1a88 <rand+0x5c>)
 80a1a48:	2201      	movs	r2, #1
 80a1a4a:	6083      	str	r3, [r0, #8]
 80a1a4c:	230b      	movs	r3, #11
 80a1a4e:	8183      	strh	r3, [r0, #12]
 80a1a50:	2300      	movs	r3, #0
 80a1a52:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1a56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a1a58:	480c      	ldr	r0, [pc, #48]	; (80a1a8c <rand+0x60>)
 80a1a5a:	690a      	ldr	r2, [r1, #16]
 80a1a5c:	694b      	ldr	r3, [r1, #20]
 80a1a5e:	4350      	muls	r0, r2
 80a1a60:	4c0b      	ldr	r4, [pc, #44]	; (80a1a90 <rand+0x64>)
 80a1a62:	fb04 0003 	mla	r0, r4, r3, r0
 80a1a66:	fba2 3404 	umull	r3, r4, r2, r4
 80a1a6a:	1c5a      	adds	r2, r3, #1
 80a1a6c:	4404      	add	r4, r0
 80a1a6e:	f144 0000 	adc.w	r0, r4, #0
 80a1a72:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80a1a76:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80a1a7a:	bd10      	pop	{r4, pc}
 80a1a7c:	2000098c 	.word	0x2000098c
 80a1a80:	abcd330e 	.word	0xabcd330e
 80a1a84:	e66d1234 	.word	0xe66d1234
 80a1a88:	0005deec 	.word	0x0005deec
 80a1a8c:	5851f42d 	.word	0x5851f42d
 80a1a90:	4c957f2d 	.word	0x4c957f2d

080a1a94 <strlen>:
 80a1a94:	4603      	mov	r3, r0
 80a1a96:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1a9a:	2a00      	cmp	r2, #0
 80a1a9c:	d1fb      	bne.n	80a1a96 <strlen+0x2>
 80a1a9e:	1a18      	subs	r0, r3, r0
 80a1aa0:	3801      	subs	r0, #1
 80a1aa2:	4770      	bx	lr

080a1aa4 <__register_exitproc>:
 80a1aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a1aa8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a1b68 <__register_exitproc+0xc4>
 80a1aac:	4606      	mov	r6, r0
 80a1aae:	f8d8 0000 	ldr.w	r0, [r8]
 80a1ab2:	461f      	mov	r7, r3
 80a1ab4:	460d      	mov	r5, r1
 80a1ab6:	4691      	mov	r9, r2
 80a1ab8:	f000 f858 	bl	80a1b6c <__retarget_lock_acquire_recursive>
 80a1abc:	4b26      	ldr	r3, [pc, #152]	; (80a1b58 <__register_exitproc+0xb4>)
 80a1abe:	681c      	ldr	r4, [r3, #0]
 80a1ac0:	b934      	cbnz	r4, 80a1ad0 <__register_exitproc+0x2c>
 80a1ac2:	4c26      	ldr	r4, [pc, #152]	; (80a1b5c <__register_exitproc+0xb8>)
 80a1ac4:	601c      	str	r4, [r3, #0]
 80a1ac6:	4b26      	ldr	r3, [pc, #152]	; (80a1b60 <__register_exitproc+0xbc>)
 80a1ac8:	b113      	cbz	r3, 80a1ad0 <__register_exitproc+0x2c>
 80a1aca:	681b      	ldr	r3, [r3, #0]
 80a1acc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a1ad0:	6863      	ldr	r3, [r4, #4]
 80a1ad2:	2b1f      	cmp	r3, #31
 80a1ad4:	dd07      	ble.n	80a1ae6 <__register_exitproc+0x42>
 80a1ad6:	f8d8 0000 	ldr.w	r0, [r8]
 80a1ada:	f000 f849 	bl	80a1b70 <__retarget_lock_release_recursive>
 80a1ade:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a1ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a1ae6:	b35e      	cbz	r6, 80a1b40 <__register_exitproc+0x9c>
 80a1ae8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a1aec:	b988      	cbnz	r0, 80a1b12 <__register_exitproc+0x6e>
 80a1aee:	4b1d      	ldr	r3, [pc, #116]	; (80a1b64 <__register_exitproc+0xc0>)
 80a1af0:	b923      	cbnz	r3, 80a1afc <__register_exitproc+0x58>
 80a1af2:	f8d8 0000 	ldr.w	r0, [r8]
 80a1af6:	f000 f83a 	bl	80a1b6e <__retarget_lock_release>
 80a1afa:	e7f0      	b.n	80a1ade <__register_exitproc+0x3a>
 80a1afc:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a1b00:	f7ff fa0c 	bl	80a0f1c <malloc>
 80a1b04:	2800      	cmp	r0, #0
 80a1b06:	d0f4      	beq.n	80a1af2 <__register_exitproc+0x4e>
 80a1b08:	2300      	movs	r3, #0
 80a1b0a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a1b0e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a1b12:	2201      	movs	r2, #1
 80a1b14:	6863      	ldr	r3, [r4, #4]
 80a1b16:	2e02      	cmp	r6, #2
 80a1b18:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a1b1c:	fa02 f203 	lsl.w	r2, r2, r3
 80a1b20:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a1b24:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a1b28:	ea43 0302 	orr.w	r3, r3, r2
 80a1b2c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a1b30:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a1b34:	bf02      	ittt	eq
 80a1b36:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a1b3a:	431a      	orreq	r2, r3
 80a1b3c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a1b40:	6863      	ldr	r3, [r4, #4]
 80a1b42:	f8d8 0000 	ldr.w	r0, [r8]
 80a1b46:	1c5a      	adds	r2, r3, #1
 80a1b48:	3302      	adds	r3, #2
 80a1b4a:	6062      	str	r2, [r4, #4]
 80a1b4c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a1b50:	f000 f80e 	bl	80a1b70 <__retarget_lock_release_recursive>
 80a1b54:	2000      	movs	r0, #0
 80a1b56:	e7c4      	b.n	80a1ae2 <__register_exitproc+0x3e>
 80a1b58:	20000f74 	.word	0x20000f74
 80a1b5c:	20000ee8 	.word	0x20000ee8
 80a1b60:	00000000 	.word	0x00000000
 80a1b64:	080a0f1d 	.word	0x080a0f1d
 80a1b68:	200009f0 	.word	0x200009f0

080a1b6c <__retarget_lock_acquire_recursive>:
 80a1b6c:	4770      	bx	lr

080a1b6e <__retarget_lock_release>:
 80a1b6e:	4770      	bx	lr

080a1b70 <__retarget_lock_release_recursive>:
 80a1b70:	4770      	bx	lr

080a1b72 <link_code_end>:
	...

080a1b74 <dynalib_user>:
 80a1b74:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a1b84:	0000 0000 6425 202c 6425 202c 6425 0000     ....%d, %d, %d..
 80a1b94:	0004 0000 0004 0000 0004 0000               ............

080a1ba0 <_ZTV7TwoWire>:
	...
 80a1ba8:	0f6d 080a 0fb7 080a 0f8f 080a 0f6f 080a     m...........o...
 80a1bb8:	0f97 080a 0f9f 080a 0fa7 080a 0faf 080a     ................

080a1bc8 <_ZTV9IPAddress>:
	...
 80a1bd0:	0ff9 080a 0fe9 080a 0feb 080a 7061 0070     ............app.

080a1be0 <_ZTVN5spark12NetworkClassE>:
	...
 80a1be8:	10c1 080a 10cb 080a 10d5 080a 10df 080a     ................
 80a1bf8:	10e9 080a 10f5 080a 1101 080a 1109 080a     ................
 80a1c08:	1111 080a 111d 080a 1125 080a 112f 080a     ........%.../...
 80a1c18:	1139 080a 5925 252d 2d6d 6425 2554 3a48     9...%Y-%m-%dT%H:
 80a1c28:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

080a1c38 <_ZTV11USARTSerial>:
	...
 80a1c40:	1371 080a 13db 080a 13b7 080a 119d 080a     q...............
 80a1c50:	1387 080a 13a3 080a 1395 080a 13b1 080a     ................
 80a1c60:	1373 080a 1379 080a                         s...y...

080a1c68 <_ZTV9USBSerial>:
	...
 80a1c70:	1463 080a 14c9 080a 14a1 080a 119d 080a     c...............
 80a1c80:	1493 080a 1465 080a 1475 080a 14c3 080a     ....e...u.......
 80a1c90:	1485 080a 145d 080a                         ....]...

080a1c98 <_ZTVN5spark9WiFiClassE>:
	...
 80a1ca0:	168b 080a 1681 080a 1677 080a 15e9 080a     ........w.......
 80a1cb0:	166b 080a 165f 080a 1101 080a 1109 080a     k..._...........
 80a1cc0:	1653 080a 164b 080a 1641 080a 1637 080a     S...K...A...7...
 80a1cd0:	15f3 080a                                   ....

080a1cd4 <_ZSt7nothrow>:
	...

080a1cd5 <link_const_variable_data_end>:
 80a1cd5:	00          	.byte	0x00
	...

080a1cd8 <link_constructors_location>:
 80a1cd8:	080a10b1 	.word	0x080a10b1
 80a1cdc:	080a1189 	.word	0x080a1189
 80a1ce0:	080a1255 	.word	0x080a1255
 80a1ce4:	080a1339 	.word	0x080a1339
 80a1ce8:	080a135d 	.word	0x080a135d
 80a1cec:	080a1695 	.word	0x080a1695
 80a1cf0:	080a196d 	.word	0x080a196d

080a1cf4 <link_constructors_end>:
	...
