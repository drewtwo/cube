
/Users/drewowl/workspace/cube/cube/target/2.3.1/photon/cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002c44  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2c60  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000007b4  20000000  080a2c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000584  200007b4  200007b4  000307b4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a3418  080a3418  00023418  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a3440  080a3440  00023440  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000fb5ab  00000000  00000000  00023444  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012843  00000000  00000000  0011e9ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001aa1f  00000000  00000000  00131232  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000021a0  00000000  00000000  0014bc51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005320  00000000  00000000  0014ddf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025c72  00000000  00000000  00153111  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002b169  00000000  00000000  00178d83  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b3705  00000000  00000000  001a3eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005494  00000000  00000000  002575f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fc3f 	bl	80a28b0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fc47 	bl	80a28cc <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2c64 	.word	0x080a2c64
 80a004c:	200007b4 	.word	0x200007b4
 80a0050:	200007b4 	.word	0x200007b4
 80a0054:	20000d35 	.word	0x20000d35
 80a0058:	20000d35 	.word	0x20000d35

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 fb2b 	bl	80a26b8 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a2c3c 	.word	0x080a2c3c
 80a0080:	080a2c58 	.word	0x080a2c58

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b88e 	b.w	80a01a4 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f001 fc97 	bl	80a19bc <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f002 bac9 	b.w	80a2628 <_post_loop>

080a0096 <_Znaj>:
 80a0096:	f001 be87 	b.w	80a1da8 <malloc>

080a009a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009a:	f001 be8d 	b.w	80a1db8 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <_Z13nextColorCube6String>:
  }
  return 1;
}

int nextColorCube(String cmd)
{
 80a00b0:	2100      	movs	r1, #0
    drawLine(color, startx, starty, startz, endx, endy, endz);
  }
  return 1;
}

int nextColor(int color) { return (color + 1) % 3; }
 80a00b2:	f04f 0c03 	mov.w	ip, #3
{
 80a00b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a00b8:	480e      	ldr	r0, [pc, #56]	; (80a00f4 <_Z13nextColorCube6String+0x44>)
 80a00ba:	4605      	mov	r5, r0
    for (int y = 0; y < 4; y++)
 80a00bc:	2400      	movs	r4, #0
 80a00be:	462f      	mov	r7, r5
 80a00c0:	2604      	movs	r6, #4
        grid[x][y][z] = nextColor(grid[x][y][z]);
 80a00c2:	683b      	ldr	r3, [r7, #0]
      for (int z = 0; z < 4; z++)
 80a00c4:	3e01      	subs	r6, #1
int nextColor(int color) { return (color + 1) % 3; }
 80a00c6:	f103 0301 	add.w	r3, r3, #1
 80a00ca:	fb93 f2fc 	sdiv	r2, r3, ip
 80a00ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a00d2:	eba3 0302 	sub.w	r3, r3, r2
        grid[x][y][z] = nextColor(grid[x][y][z]);
 80a00d6:	f847 3b04 	str.w	r3, [r7], #4
      for (int z = 0; z < 4; z++)
 80a00da:	d1f2      	bne.n	80a00c2 <_Z13nextColorCube6String+0x12>
    for (int y = 0; y < 4; y++)
 80a00dc:	3401      	adds	r4, #1
 80a00de:	2c04      	cmp	r4, #4
 80a00e0:	f105 0510 	add.w	r5, r5, #16
 80a00e4:	d1eb      	bne.n	80a00be <_Z13nextColorCube6String+0xe>
  for (int x = 0; x < 4; x++)
 80a00e6:	3104      	adds	r1, #4
 80a00e8:	2910      	cmp	r1, #16
 80a00ea:	f100 0040 	add.w	r0, r0, #64	; 0x40
 80a00ee:	d1e4      	bne.n	80a00ba <_Z13nextColorCube6String+0xa>
}
 80a00f0:	2001      	movs	r0, #1
 80a00f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a00f4:	20000404 	.word	0x20000404

080a00f8 <_Z15toggleAnimation6String>:

int toggleAnimation(String cmd)
{
  continuePattern = !continuePattern;
 80a00f8:	4a03      	ldr	r2, [pc, #12]	; (80a0108 <_Z15toggleAnimation6String+0x10>)
  return 1;
}
 80a00fa:	2001      	movs	r0, #1
  continuePattern = !continuePattern;
 80a00fc:	7813      	ldrb	r3, [r2, #0]
 80a00fe:	f083 0301 	eor.w	r3, r3, #1
 80a0102:	7013      	strb	r3, [r2, #0]
}
 80a0104:	4770      	bx	lr
 80a0106:	bf00      	nop
 80a0108:	20000200 	.word	0x20000200

080a010c <_Z10drawColumn6String>:
{
 80a010c:	b510      	push	{r4, lr}
  int x = random(0, 4);
 80a010e:	2104      	movs	r1, #4
{
 80a0110:	b086      	sub	sp, #24
 80a0112:	4604      	mov	r4, r0
  int x = random(0, 4);
 80a0114:	2000      	movs	r0, #0
 80a0116:	f002 f802 	bl	80a211e <_Z6randomii>
  int y = random(0, 4);
 80a011a:	2104      	movs	r1, #4
  int x = random(0, 4);
 80a011c:	9003      	str	r0, [sp, #12]
  int y = random(0, 4);
 80a011e:	2000      	movs	r0, #0
 80a0120:	f001 fffd 	bl	80a211e <_Z6randomii>
  int color = random(0, 4);
 80a0124:	2104      	movs	r1, #4
  int y = random(0, 4);
 80a0126:	9004      	str	r0, [sp, #16]
  int color = random(0, 4);
 80a0128:	2000      	movs	r0, #0
 80a012a:	f001 fff8 	bl	80a211e <_Z6randomii>
  if (sscanf(cmd, "%d, %d, %d", &x, &y, &color) == 3)
 80a012e:	ab05      	add	r3, sp, #20
  int color = random(0, 4);
 80a0130:	9005      	str	r0, [sp, #20]
  if (sscanf(cmd, "%d, %d, %d", &x, &y, &color) == 3)
 80a0132:	9300      	str	r3, [sp, #0]
 80a0134:	aa03      	add	r2, sp, #12
 80a0136:	ab04      	add	r3, sp, #16
 80a0138:	4909      	ldr	r1, [pc, #36]	; (80a0160 <_Z10drawColumn6String+0x54>)
 80a013a:	6820      	ldr	r0, [r4, #0]
 80a013c:	f001 fe4c 	bl	80a1dd8 <sscanf>
 80a0140:	e9dd 0303 	ldrd	r0, r3, [sp, #12]
 80a0144:	9a05      	ldr	r2, [sp, #20]
 80a0146:	4907      	ldr	r1, [pc, #28]	; (80a0164 <_Z10drawColumn6String+0x58>)
      grid[x][y][z] = color;
 80a0148:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80a014c:	0118      	lsls	r0, r3, #4
 80a014e:	500a      	str	r2, [r1, r0]
}
 80a0150:	2001      	movs	r0, #1
      grid[x][y][z] = color;
 80a0152:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 80a0156:	e9c3 2201 	strd	r2, r2, [r3, #4]
 80a015a:	60da      	str	r2, [r3, #12]
}
 80a015c:	b006      	add	sp, #24
 80a015e:	bd10      	pop	{r4, pc}
 80a0160:	080a2aeb 	.word	0x080a2aeb
 80a0164:	20000404 	.word	0x20000404

080a0168 <_ZN10CloudClass9_functionEPKcPFi6StringE>:
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
 80a0168:	4602      	mov	r2, r0
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a016a:	4801      	ldr	r0, [pc, #4]	; (80a0170 <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
 80a016c:	f001 be5d 	b.w	80a1e2a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0170:	080a1dff 	.word	0x080a1dff

080a0174 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 80a0174:	b40e      	push	{r1, r2, r3}
 80a0176:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80a0178:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 80a017a:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 80a017c:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 80a017e:	b08d      	sub	sp, #52	; 0x34
 80a0180:	aa0f      	add	r2, sp, #60	; 0x3c
 80a0182:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 80a0186:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a018a:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 80a018e:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a0190:	201e      	movs	r0, #30
 80a0192:	aa04      	add	r2, sp, #16
 80a0194:	f001 fd6c 	bl	80a1c70 <log_message_v>
}
 80a0198:	b00d      	add	sp, #52	; 0x34
 80a019a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a019e:	b003      	add	sp, #12
 80a01a0:	4770      	bx	lr
	...

080a01a4 <setup>:
{
 80a01a4:	b508      	push	{r3, lr}
        return _function(name, args...);
 80a01a6:	4910      	ldr	r1, [pc, #64]	; (80a01e8 <setup+0x44>)
 80a01a8:	4810      	ldr	r0, [pc, #64]	; (80a01ec <setup+0x48>)
 80a01aa:	f7ff ffdd 	bl	80a0168 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 80a01ae:	4910      	ldr	r1, [pc, #64]	; (80a01f0 <setup+0x4c>)
 80a01b0:	4810      	ldr	r0, [pc, #64]	; (80a01f4 <setup+0x50>)
 80a01b2:	f7ff ffd9 	bl	80a0168 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 80a01b6:	4910      	ldr	r1, [pc, #64]	; (80a01f8 <setup+0x54>)
 80a01b8:	4810      	ldr	r0, [pc, #64]	; (80a01fc <setup+0x58>)
 80a01ba:	f7ff ffd5 	bl	80a0168 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 80a01be:	4910      	ldr	r1, [pc, #64]	; (80a0200 <setup+0x5c>)
 80a01c0:	4810      	ldr	r0, [pc, #64]	; (80a0204 <setup+0x60>)
 80a01c2:	f7ff ffd1 	bl	80a0168 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 80a01c6:	4910      	ldr	r1, [pc, #64]	; (80a0208 <setup+0x64>)
 80a01c8:	4810      	ldr	r0, [pc, #64]	; (80a020c <setup+0x68>)
 80a01ca:	f7ff ffcd 	bl	80a0168 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 80a01ce:	4910      	ldr	r1, [pc, #64]	; (80a0210 <setup+0x6c>)
 80a01d0:	4810      	ldr	r0, [pc, #64]	; (80a0214 <setup+0x70>)
 80a01d2:	f7ff ffc9 	bl	80a0168 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 80a01d6:	4910      	ldr	r1, [pc, #64]	; (80a0218 <setup+0x74>)
 80a01d8:	4810      	ldr	r0, [pc, #64]	; (80a021c <setup+0x78>)
 80a01da:	f7ff ffc5 	bl	80a0168 <_ZN10CloudClass9_functionEPKcPFi6StringE>
 80a01de:	4910      	ldr	r1, [pc, #64]	; (80a0220 <setup+0x7c>)
 80a01e0:	4810      	ldr	r0, [pc, #64]	; (80a0224 <setup+0x80>)
 80a01e2:	f7ff ffc1 	bl	80a0168 <_ZN10CloudClass9_functionEPKcPFi6StringE>
}
 80a01e6:	bd08      	pop	{r3, pc}
 80a01e8:	080a0c05 	.word	0x080a0c05
 80a01ec:	080a2a80 	.word	0x080a2a80
 80a01f0:	080a0b19 	.word	0x080a0b19
 80a01f4:	080a2a88 	.word	0x080a2a88
 80a01f8:	080a08e5 	.word	0x080a08e5
 80a01fc:	080a2a91 	.word	0x080a2a91
 80a0200:	080a05bd 	.word	0x080a05bd
 80a0204:	080a2a99 	.word	0x080a2a99
 80a0208:	080a00f9 	.word	0x080a00f9
 80a020c:	080a2aa5 	.word	0x080a2aa5
 80a0210:	080a0619 	.word	0x080a0619
 80a0214:	080a2ab5 	.word	0x080a2ab5
 80a0218:	080a010d 	.word	0x080a010d
 80a021c:	080a2ac2 	.word	0x080a2ac2
 80a0220:	080a00b1 	.word	0x080a00b1
 80a0224:	080a2acd 	.word	0x080a2acd

080a0228 <_Z9drawWalls6String>:
{
 80a0228:	b570      	push	{r4, r5, r6, lr}
  ypos = ypos == 0 ? ypos = 3 : ypos - 1;
 80a022a:	4d16      	ldr	r5, [pc, #88]	; (80a0284 <_Z9drawWalls6String+0x5c>)
 80a022c:	4e16      	ldr	r6, [pc, #88]	; (80a0288 <_Z9drawWalls6String+0x60>)
 80a022e:	682b      	ldr	r3, [r5, #0]
 80a0230:	4c16      	ldr	r4, [pc, #88]	; (80a028c <_Z9drawWalls6String+0x64>)
 80a0232:	b993      	cbnz	r3, 80a025a <_Z9drawWalls6String+0x32>
 80a0234:	2303      	movs	r3, #3
 80a0236:	602b      	str	r3, [r5, #0]
    color = random(0, 2);
 80a0238:	2102      	movs	r1, #2
 80a023a:	2000      	movs	r0, #0
 80a023c:	f001 ff6f 	bl	80a211e <_Z6randomii>
    if (grid[0][ypos][0] == color)
 80a0240:	682b      	ldr	r3, [r5, #0]
    color = random(0, 2);
 80a0242:	6030      	str	r0, [r6, #0]
    if (grid[0][ypos][0] == color)
 80a0244:	011b      	lsls	r3, r3, #4
 80a0246:	58e3      	ldr	r3, [r4, r3]
 80a0248:	4298      	cmp	r0, r3
 80a024a:	d10a      	bne.n	80a0262 <_Z9drawWalls6String+0x3a>
      color = color >= 2 ? color - 1 : color + 1;
 80a024c:	2801      	cmp	r0, #1
 80a024e:	bfcc      	ite	gt
 80a0250:	f100 30ff 	addgt.w	r0, r0, #4294967295	; 0xffffffff
 80a0254:	3001      	addle	r0, #1
 80a0256:	6030      	str	r0, [r6, #0]
 80a0258:	e003      	b.n	80a0262 <_Z9drawWalls6String+0x3a>
  ypos = ypos == 0 ? ypos = 3 : ypos - 1;
 80a025a:	3b01      	subs	r3, #1
  if (ypos == 3)
 80a025c:	2b03      	cmp	r3, #3
  ypos = ypos == 0 ? ypos = 3 : ypos - 1;
 80a025e:	602b      	str	r3, [r5, #0]
  if (ypos == 3)
 80a0260:	d0ea      	beq.n	80a0238 <_Z9drawWalls6String+0x10>
      grid[x][ypos][z] = color;
 80a0262:	2100      	movs	r1, #0
 80a0264:	682b      	ldr	r3, [r5, #0]
 80a0266:	6832      	ldr	r2, [r6, #0]
 80a0268:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  for (int x = 0; x < 4; x++)
 80a026c:	3101      	adds	r1, #1
 80a026e:	2904      	cmp	r1, #4
      grid[x][ypos][z] = color;
 80a0270:	e9c3 2200 	strd	r2, r2, [r3]
 80a0274:	e9c3 2202 	strd	r2, r2, [r3, #8]
  for (int x = 0; x < 4; x++)
 80a0278:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80a027c:	d1f6      	bne.n	80a026c <_Z9drawWalls6String+0x44>
}
 80a027e:	2001      	movs	r0, #1
 80a0280:	bd70      	pop	{r4, r5, r6, pc}
 80a0282:	bf00      	nop
 80a0284:	200007bc 	.word	0x200007bc
 80a0288:	200007b4 	.word	0x200007b4
 80a028c:	20000404 	.word	0x20000404

080a0290 <_Z8drawXRow6String>:
{
 80a0290:	b510      	push	{r4, lr}
  int y = random(0, 4);
 80a0292:	2104      	movs	r1, #4
{
 80a0294:	b086      	sub	sp, #24
 80a0296:	4604      	mov	r4, r0
  int y = random(0, 4);
 80a0298:	2000      	movs	r0, #0
 80a029a:	f001 ff40 	bl	80a211e <_Z6randomii>
  int z = random(0, 4);
 80a029e:	2104      	movs	r1, #4
  int y = random(0, 4);
 80a02a0:	9003      	str	r0, [sp, #12]
  int z = random(0, 4);
 80a02a2:	2000      	movs	r0, #0
 80a02a4:	f001 ff3b 	bl	80a211e <_Z6randomii>
  int color = random(0, 4);
 80a02a8:	2104      	movs	r1, #4
  int z = random(0, 4);
 80a02aa:	9004      	str	r0, [sp, #16]
  int color = random(0, 4);
 80a02ac:	2000      	movs	r0, #0
 80a02ae:	f001 ff36 	bl	80a211e <_Z6randomii>
  if (sscanf(cmd, "%d, %d, %d", &y, &z, &color) == 3)
 80a02b2:	ab05      	add	r3, sp, #20
  int color = random(0, 4);
 80a02b4:	9005      	str	r0, [sp, #20]
  if (sscanf(cmd, "%d, %d, %d", &y, &z, &color) == 3)
 80a02b6:	9300      	str	r3, [sp, #0]
 80a02b8:	aa03      	add	r2, sp, #12
 80a02ba:	ab04      	add	r3, sp, #16
 80a02bc:	490c      	ldr	r1, [pc, #48]	; (80a02f0 <_Z8drawXRow6String+0x60>)
 80a02be:	6820      	ldr	r0, [r4, #0]
 80a02c0:	f001 fd8a 	bl	80a1dd8 <sscanf>
 80a02c4:	e9dd 0303 	ldrd	r0, r3, [sp, #12]
 80a02c8:	9905      	ldr	r1, [sp, #20]
 80a02ca:	4a0a      	ldr	r2, [pc, #40]	; (80a02f4 <_Z8drawXRow6String+0x64>)
      grid[x][y][z] = color;
 80a02cc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80a02d0:	f103 0010 	add.w	r0, r3, #16
 80a02d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80a02d8:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 80a02dc:	f103 0020 	add.w	r0, r3, #32
 80a02e0:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
}
 80a02e4:	2001      	movs	r0, #1
      grid[x][y][z] = color;
 80a02e6:	3330      	adds	r3, #48	; 0x30
 80a02e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80a02ec:	b006      	add	sp, #24
 80a02ee:	bd10      	pop	{r4, pc}
 80a02f0:	080a2aeb 	.word	0x080a2aeb
 80a02f4:	20000404 	.word	0x20000404

080a02f8 <_Z8drawYRow6String>:
{
 80a02f8:	b510      	push	{r4, lr}
  int x = random(0, 4);
 80a02fa:	2104      	movs	r1, #4
{
 80a02fc:	b086      	sub	sp, #24
 80a02fe:	4604      	mov	r4, r0
  int x = random(0, 4);
 80a0300:	2000      	movs	r0, #0
 80a0302:	f001 ff0c 	bl	80a211e <_Z6randomii>
  int z = random(0, 4);
 80a0306:	2104      	movs	r1, #4
  int x = random(0, 4);
 80a0308:	9003      	str	r0, [sp, #12]
  int z = random(0, 4);
 80a030a:	2000      	movs	r0, #0
 80a030c:	f001 ff07 	bl	80a211e <_Z6randomii>
  int color = random(0, 4);
 80a0310:	2104      	movs	r1, #4
  int z = random(0, 4);
 80a0312:	9004      	str	r0, [sp, #16]
  int color = random(0, 4);
 80a0314:	2000      	movs	r0, #0
 80a0316:	f001 ff02 	bl	80a211e <_Z6randomii>
  if (sscanf(cmd, "%d, %d, %d", &x, &z, &color) == 3)
 80a031a:	ab05      	add	r3, sp, #20
  int color = random(0, 4);
 80a031c:	9005      	str	r0, [sp, #20]
  if (sscanf(cmd, "%d, %d, %d", &x, &z, &color) == 3)
 80a031e:	9300      	str	r3, [sp, #0]
 80a0320:	aa03      	add	r2, sp, #12
 80a0322:	ab04      	add	r3, sp, #16
 80a0324:	490c      	ldr	r1, [pc, #48]	; (80a0358 <_Z8drawYRow6String+0x60>)
 80a0326:	6820      	ldr	r0, [r4, #0]
 80a0328:	f001 fd56 	bl	80a1dd8 <sscanf>
 80a032c:	e9dd 0303 	ldrd	r0, r3, [sp, #12]
 80a0330:	9905      	ldr	r1, [sp, #20]
 80a0332:	4a0a      	ldr	r2, [pc, #40]	; (80a035c <_Z8drawYRow6String+0x64>)
      grid[x][y][z] = color;
 80a0334:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80a0338:	1d18      	adds	r0, r3, #4
 80a033a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80a033e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 80a0342:	f103 0008 	add.w	r0, r3, #8
 80a0346:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
}
 80a034a:	2001      	movs	r0, #1
      grid[x][y][z] = color;
 80a034c:	330c      	adds	r3, #12
 80a034e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80a0352:	b006      	add	sp, #24
 80a0354:	bd10      	pop	{r4, pc}
 80a0356:	bf00      	nop
 80a0358:	080a2aeb 	.word	0x080a2aeb
 80a035c:	20000404 	.word	0x20000404

080a0360 <_Z11chaseTheDotv>:
  }
  return 1;
}

void chaseTheDot()
{
 80a0360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (random(0, 6))
 80a0362:	2106      	movs	r1, #6
 80a0364:	2000      	movs	r0, #0
 80a0366:	f001 feda 	bl	80a211e <_Z6randomii>
 80a036a:	4f2d      	ldr	r7, [pc, #180]	; (80a0420 <_Z11chaseTheDotv+0xc0>)
 80a036c:	4c2d      	ldr	r4, [pc, #180]	; (80a0424 <_Z11chaseTheDotv+0xc4>)
 80a036e:	4e2e      	ldr	r6, [pc, #184]	; (80a0428 <_Z11chaseTheDotv+0xc8>)
 80a0370:	4d2e      	ldr	r5, [pc, #184]	; (80a042c <_Z11chaseTheDotv+0xcc>)
 80a0372:	2805      	cmp	r0, #5
 80a0374:	d813      	bhi.n	80a039e <_Z11chaseTheDotv+0x3e>
 80a0376:	e8df f000 	tbb	[pc, r0]
 80a037a:	0d03      	.short	0x0d03
 80a037c:	463c2f25 	.word	0x463c2f25
  {
  case 0:
    if (xpos > 0)
 80a0380:	683b      	ldr	r3, [r7, #0]
 80a0382:	2b00      	cmp	r3, #0
 80a0384:	dd01      	ble.n	80a038a <_Z11chaseTheDotv+0x2a>
    }
    else
    {
      color = random(0, 4);
    }
    xpos--;
 80a0386:	3b01      	subs	r3, #1
 80a0388:	e008      	b.n	80a039c <_Z11chaseTheDotv+0x3c>
      color = random(0, 4);
 80a038a:	2104      	movs	r1, #4
 80a038c:	2000      	movs	r0, #0
 80a038e:	f001 fec6 	bl	80a211e <_Z6randomii>
 80a0392:	6020      	str	r0, [r4, #0]
    if (xpos < 3)
 80a0394:	683b      	ldr	r3, [r7, #0]
 80a0396:	2b02      	cmp	r3, #2
 80a0398:	dc0d      	bgt.n	80a03b6 <_Z11chaseTheDotv+0x56>
      xpos++;
 80a039a:	3301      	adds	r3, #1
 80a039c:	603b      	str	r3, [r7, #0]
      color = random(0, 4);
    }
    zpos--;
    break;
  }
  grid[xpos][ypos][zpos] = color;
 80a039e:	6833      	ldr	r3, [r6, #0]
 80a03a0:	683a      	ldr	r2, [r7, #0]
 80a03a2:	6821      	ldr	r1, [r4, #0]
 80a03a4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80a03a8:	682b      	ldr	r3, [r5, #0]
 80a03aa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80a03ae:	4a20      	ldr	r2, [pc, #128]	; (80a0430 <_Z11chaseTheDotv+0xd0>)
 80a03b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80a03b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      color = random(0, 4);
 80a03b6:	2104      	movs	r1, #4
 80a03b8:	2000      	movs	r0, #0
 80a03ba:	f001 feb0 	bl	80a211e <_Z6randomii>
    xpos--;
 80a03be:	683b      	ldr	r3, [r7, #0]
      color = random(0, 4);
 80a03c0:	6020      	str	r0, [r4, #0]
    xpos--;
 80a03c2:	e7e0      	b.n	80a0386 <_Z11chaseTheDotv+0x26>
    if (ypos > 0)
 80a03c4:	6833      	ldr	r3, [r6, #0]
 80a03c6:	2b00      	cmp	r3, #0
 80a03c8:	dd01      	ble.n	80a03ce <_Z11chaseTheDotv+0x6e>
    ypos--;
 80a03ca:	3b01      	subs	r3, #1
 80a03cc:	e008      	b.n	80a03e0 <_Z11chaseTheDotv+0x80>
      color = random(0, 4);
 80a03ce:	2104      	movs	r1, #4
 80a03d0:	2000      	movs	r0, #0
 80a03d2:	f001 fea4 	bl	80a211e <_Z6randomii>
 80a03d6:	6020      	str	r0, [r4, #0]
    if (ypos < 3)
 80a03d8:	6833      	ldr	r3, [r6, #0]
 80a03da:	2b02      	cmp	r3, #2
 80a03dc:	dc02      	bgt.n	80a03e4 <_Z11chaseTheDotv+0x84>
      ypos++;
 80a03de:	3301      	adds	r3, #1
    ypos--;
 80a03e0:	6033      	str	r3, [r6, #0]
    break;
 80a03e2:	e7dc      	b.n	80a039e <_Z11chaseTheDotv+0x3e>
      color = random(0, 4);
 80a03e4:	2104      	movs	r1, #4
 80a03e6:	2000      	movs	r0, #0
 80a03e8:	f001 fe99 	bl	80a211e <_Z6randomii>
    ypos--;
 80a03ec:	6833      	ldr	r3, [r6, #0]
      color = random(0, 4);
 80a03ee:	6020      	str	r0, [r4, #0]
    ypos--;
 80a03f0:	e7eb      	b.n	80a03ca <_Z11chaseTheDotv+0x6a>
    if (zpos > 0)
 80a03f2:	682b      	ldr	r3, [r5, #0]
 80a03f4:	2b00      	cmp	r3, #0
 80a03f6:	dd01      	ble.n	80a03fc <_Z11chaseTheDotv+0x9c>
    zpos--;
 80a03f8:	3b01      	subs	r3, #1
 80a03fa:	e008      	b.n	80a040e <_Z11chaseTheDotv+0xae>
      color = random(0, 4);
 80a03fc:	2104      	movs	r1, #4
 80a03fe:	2000      	movs	r0, #0
 80a0400:	f001 fe8d 	bl	80a211e <_Z6randomii>
 80a0404:	6020      	str	r0, [r4, #0]
    if (zpos < 3)
 80a0406:	682b      	ldr	r3, [r5, #0]
 80a0408:	2b02      	cmp	r3, #2
 80a040a:	dc02      	bgt.n	80a0412 <_Z11chaseTheDotv+0xb2>
      zpos++;
 80a040c:	3301      	adds	r3, #1
    zpos--;
 80a040e:	602b      	str	r3, [r5, #0]
    break;
 80a0410:	e7c5      	b.n	80a039e <_Z11chaseTheDotv+0x3e>
      color = random(0, 4);
 80a0412:	2104      	movs	r1, #4
 80a0414:	2000      	movs	r0, #0
 80a0416:	f001 fe82 	bl	80a211e <_Z6randomii>
    zpos--;
 80a041a:	682b      	ldr	r3, [r5, #0]
      color = random(0, 4);
 80a041c:	6020      	str	r0, [r4, #0]
    zpos--;
 80a041e:	e7eb      	b.n	80a03f8 <_Z11chaseTheDotv+0x98>
 80a0420:	200007b8 	.word	0x200007b8
 80a0424:	200007b4 	.word	0x200007b4
 80a0428:	200007bc 	.word	0x200007bc
 80a042c:	200007c0 	.word	0x200007c0
 80a0430:	20000404 	.word	0x20000404

080a0434 <_Z12roundClosestii>:
  grid[endx][endy][endz] = color;
}

int roundClosest(int numerator, int denominator)
{
  numerator = (numerator << 1) / denominator;
 80a0434:	0040      	lsls	r0, r0, #1
 80a0436:	fb90 f1f1 	sdiv	r1, r0, r1
  int output = (numerator >> 1) + (numerator % 2);
 80a043a:	f001 0001 	and.w	r0, r1, #1
 80a043e:	2900      	cmp	r1, #0
 80a0440:	bfb8      	it	lt
 80a0442:	4240      	neglt	r0, r0
  return output;
}
 80a0444:	eb00 0061 	add.w	r0, r0, r1, asr #1
 80a0448:	4770      	bx	lr

080a044a <_Z7swapintRiS_>:

void swapint(int &one, int &two)
{
  one = one ^ two;
 80a044a:	680a      	ldr	r2, [r1, #0]
 80a044c:	6803      	ldr	r3, [r0, #0]
 80a044e:	4053      	eors	r3, r2
 80a0450:	6003      	str	r3, [r0, #0]
  two = one ^ two;
 80a0452:	680a      	ldr	r2, [r1, #0]
 80a0454:	4053      	eors	r3, r2
 80a0456:	600b      	str	r3, [r1, #0]
  one = one ^ two;
 80a0458:	6802      	ldr	r2, [r0, #0]
 80a045a:	4053      	eors	r3, r2
 80a045c:	6003      	str	r3, [r0, #0]
}
 80a045e:	4770      	bx	lr

080a0460 <_Z8drawLineiiiiiii>:
{
 80a0460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0464:	b08f      	sub	sp, #60	; 0x3c
 80a0466:	930b      	str	r3, [sp, #44]	; 0x2c
  if (startx > endx)
 80a0468:	9b18      	ldr	r3, [sp, #96]	; 0x60
{
 80a046a:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
  if (startx > endx)
 80a046e:	4299      	cmp	r1, r3
{
 80a0470:	900a      	str	r0, [sp, #40]	; 0x28
  if (startx > endx)
 80a0472:	dd6d      	ble.n	80a0550 <_Z8drawLineiiiiiii+0xf0>
    swapint(startx, endx);
 80a0474:	a918      	add	r1, sp, #96	; 0x60
 80a0476:	a80d      	add	r0, sp, #52	; 0x34
 80a0478:	f7ff ffe7 	bl	80a044a <_Z7swapintRiS_>
    reverseX = true;
 80a047c:	2301      	movs	r3, #1
  if (starty > endy)
 80a047e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  bool reverseX = false;
 80a0480:	9304      	str	r3, [sp, #16]
  if (starty > endy)
 80a0482:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a0484:	429a      	cmp	r2, r3
 80a0486:	dd65      	ble.n	80a0554 <_Z8drawLineiiiiiii+0xf4>
    swapint(starty, endy);
 80a0488:	a919      	add	r1, sp, #100	; 0x64
 80a048a:	a80c      	add	r0, sp, #48	; 0x30
 80a048c:	f7ff ffdd 	bl	80a044a <_Z7swapintRiS_>
    reverseY = true;
 80a0490:	2301      	movs	r3, #1
  if (startz > endz)
 80a0492:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  bool reverseY = false;
 80a0494:	9305      	str	r3, [sp, #20]
  if (startz > endz)
 80a0496:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80a0498:	429a      	cmp	r2, r3
 80a049a:	dd5d      	ble.n	80a0558 <_Z8drawLineiiiiiii+0xf8>
    swapint(startz, endz);
 80a049c:	a91a      	add	r1, sp, #104	; 0x68
 80a049e:	a80b      	add	r0, sp, #44	; 0x2c
 80a04a0:	f7ff ffd3 	bl	80a044a <_Z7swapintRiS_>
    reverseZ = true;
 80a04a4:	2301      	movs	r3, #1
  bool reverseZ = false;
 80a04a6:	9306      	str	r3, [sp, #24]
  int delx = endx - startx;
 80a04a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  int delz = endz - startz;
 80a04aa:	9c1a      	ldr	r4, [sp, #104]	; 0x68
  int delx = endx - startx;
 80a04ac:	9301      	str	r3, [sp, #4]
 80a04ae:	9a01      	ldr	r2, [sp, #4]
 80a04b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80a04b2:	1a9b      	subs	r3, r3, r2
  int dely = endy - starty;
 80a04b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a04b6:	9202      	str	r2, [sp, #8]
 80a04b8:	9902      	ldr	r1, [sp, #8]
 80a04ba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80a04bc:	1a52      	subs	r2, r2, r1
  int delz = endz - startz;
 80a04be:	990b      	ldr	r1, [sp, #44]	; 0x2c
  int longest = (delx > dely   ? delx > delz ? delx : delz > dely ? delz
 80a04c0:	4293      	cmp	r3, r2
  int delz = endz - startz;
 80a04c2:	9103      	str	r1, [sp, #12]
 80a04c4:	eba4 0401 	sub.w	r4, r4, r1
  int longest = (delx > dely   ? delx > delz ? delx : delz > dely ? delz
 80a04c8:	dd48      	ble.n	80a055c <_Z8drawLineiiiiiii+0xfc>
 80a04ca:	42a3      	cmp	r3, r4
 80a04cc:	461f      	mov	r7, r3
 80a04ce:	bfb8      	it	lt
 80a04d0:	4627      	movlt	r7, r4
  for (int i = 0; i < longest; i++)
 80a04d2:	2600      	movs	r6, #0
 80a04d4:	46b1      	mov	r9, r6
 80a04d6:	46b3      	mov	fp, r6
 80a04d8:	fb04 f107 	mul.w	r1, r4, r7
 80a04dc:	fb02 fa07 	mul.w	sl, r2, r7
 80a04e0:	fb03 f807 	mul.w	r8, r3, r7
 80a04e4:	9108      	str	r1, [sp, #32]
 80a04e6:	9607      	str	r6, [sp, #28]
 80a04e8:	9907      	ldr	r1, [sp, #28]
 80a04ea:	42b9      	cmp	r1, r7
 80a04ec:	da43      	bge.n	80a0576 <_Z8drawLineiiiiiii+0x116>
    if (reverseX)
 80a04ee:	9904      	ldr	r1, [sp, #16]
 80a04f0:	2900      	cmp	r1, #0
 80a04f2:	d037      	beq.n	80a0564 <_Z8drawLineiiiiiii+0x104>
      xpos = roundClosest(((longest - i) * delx), longest) + startx;
 80a04f4:	4639      	mov	r1, r7
 80a04f6:	4640      	mov	r0, r8
      xpos = roundClosest((i * delx), longest) + startx;
 80a04f8:	f7ff ff9c 	bl	80a0434 <_Z12roundClosestii>
 80a04fc:	9901      	ldr	r1, [sp, #4]
 80a04fe:	4401      	add	r1, r0
 80a0500:	9109      	str	r1, [sp, #36]	; 0x24
    if (reverseY)
 80a0502:	9905      	ldr	r1, [sp, #20]
 80a0504:	b389      	cbz	r1, 80a056a <_Z8drawLineiiiiiii+0x10a>
      ypos = roundClosest(((longest - i) * dely), longest) + starty;
 80a0506:	4639      	mov	r1, r7
 80a0508:	4650      	mov	r0, sl
      ypos = roundClosest((i * dely), longest) + starty;
 80a050a:	f7ff ff93 	bl	80a0434 <_Z12roundClosestii>
 80a050e:	9902      	ldr	r1, [sp, #8]
 80a0510:	180d      	adds	r5, r1, r0
    if (reverseZ)
 80a0512:	9906      	ldr	r1, [sp, #24]
 80a0514:	b361      	cbz	r1, 80a0570 <_Z8drawLineiiiiiii+0x110>
      zpos = roundClosest(((longest - i) * delz), longest) + startz;
 80a0516:	4639      	mov	r1, r7
 80a0518:	9808      	ldr	r0, [sp, #32]
      zpos = roundClosest((i * delz), longest) + startz;
 80a051a:	f7ff ff8b 	bl	80a0434 <_Z12roundClosestii>
 80a051e:	9903      	ldr	r1, [sp, #12]
 80a0520:	44a3      	add	fp, r4
 80a0522:	4408      	add	r0, r1
    grid[xpos][ypos][zpos] = color;
 80a0524:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0526:	ebaa 0a02 	sub.w	sl, sl, r2
 80a052a:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 80a052e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 80a0532:	4921      	ldr	r1, [pc, #132]	; (80a05b8 <_Z8drawLineiiiiiii+0x158>)
 80a0534:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a0536:	4491      	add	r9, r2
 80a0538:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
  for (int i = 0; i < longest; i++)
 80a053c:	9907      	ldr	r1, [sp, #28]
 80a053e:	eba8 0803 	sub.w	r8, r8, r3
 80a0542:	3101      	adds	r1, #1
 80a0544:	9107      	str	r1, [sp, #28]
 80a0546:	9908      	ldr	r1, [sp, #32]
 80a0548:	441e      	add	r6, r3
 80a054a:	1b09      	subs	r1, r1, r4
 80a054c:	9108      	str	r1, [sp, #32]
 80a054e:	e7cb      	b.n	80a04e8 <_Z8drawLineiiiiiii+0x88>
  bool reverseX = false;
 80a0550:	2300      	movs	r3, #0
 80a0552:	e794      	b.n	80a047e <_Z8drawLineiiiiiii+0x1e>
  bool reverseY = false;
 80a0554:	2300      	movs	r3, #0
 80a0556:	e79c      	b.n	80a0492 <_Z8drawLineiiiiiii+0x32>
  bool reverseZ = false;
 80a0558:	2300      	movs	r3, #0
 80a055a:	e7a4      	b.n	80a04a6 <_Z8drawLineiiiiiii+0x46>
                 : dely > delz ? dely
 80a055c:	42a2      	cmp	r2, r4
 80a055e:	ddb4      	ble.n	80a04ca <_Z8drawLineiiiiiii+0x6a>
 80a0560:	4617      	mov	r7, r2
 80a0562:	e7b6      	b.n	80a04d2 <_Z8drawLineiiiiiii+0x72>
      xpos = roundClosest((i * delx), longest) + startx;
 80a0564:	4639      	mov	r1, r7
 80a0566:	4630      	mov	r0, r6
 80a0568:	e7c6      	b.n	80a04f8 <_Z8drawLineiiiiiii+0x98>
      ypos = roundClosest((i * dely), longest) + starty;
 80a056a:	4639      	mov	r1, r7
 80a056c:	4648      	mov	r0, r9
 80a056e:	e7cc      	b.n	80a050a <_Z8drawLineiiiiiii+0xaa>
      zpos = roundClosest((i * delz), longest) + startz;
 80a0570:	4639      	mov	r1, r7
 80a0572:	4658      	mov	r0, fp
 80a0574:	e7d1      	b.n	80a051a <_Z8drawLineiiiiiii+0xba>
  if (reverseX)
 80a0576:	9b04      	ldr	r3, [sp, #16]
 80a0578:	b11b      	cbz	r3, 80a0582 <_Z8drawLineiiiiiii+0x122>
    swapint(startx, endx);
 80a057a:	a918      	add	r1, sp, #96	; 0x60
 80a057c:	a80d      	add	r0, sp, #52	; 0x34
 80a057e:	f7ff ff64 	bl	80a044a <_Z7swapintRiS_>
  if (reverseY)
 80a0582:	9b05      	ldr	r3, [sp, #20]
 80a0584:	b11b      	cbz	r3, 80a058e <_Z8drawLineiiiiiii+0x12e>
    swapint(starty, endy);
 80a0586:	a919      	add	r1, sp, #100	; 0x64
 80a0588:	a80c      	add	r0, sp, #48	; 0x30
 80a058a:	f7ff ff5e 	bl	80a044a <_Z7swapintRiS_>
  if (reverseZ)
 80a058e:	9b06      	ldr	r3, [sp, #24]
 80a0590:	b11b      	cbz	r3, 80a059a <_Z8drawLineiiiiiii+0x13a>
    swapint(startz, endz);
 80a0592:	a91a      	add	r1, sp, #104	; 0x68
 80a0594:	a80b      	add	r0, sp, #44	; 0x2c
 80a0596:	f7ff ff58 	bl	80a044a <_Z7swapintRiS_>
  grid[endx][endy][endz] = color;
 80a059a:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80a059e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80a05a2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80a05a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a05a6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80a05aa:	4a03      	ldr	r2, [pc, #12]	; (80a05b8 <_Z8drawLineiiiiiii+0x158>)
 80a05ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80a05b0:	b00f      	add	sp, #60	; 0x3c
 80a05b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a05b6:	bf00      	nop
 80a05b8:	20000404 	.word	0x20000404

080a05bc <_Z11drawLineAPI6String>:
  int startx = 0;
 80a05bc:	2300      	movs	r3, #0
{
 80a05be:	b500      	push	{lr}
 80a05c0:	b08f      	sub	sp, #60	; 0x3c
  int starty = 0;
 80a05c2:	e9cd 3307 	strd	r3, r3, [sp, #28]
  int endx = 0;
 80a05c6:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  int endz = 0;
 80a05ca:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  int color = 0;
 80a05ce:	930d      	str	r3, [sp, #52]	; 0x34
  if (sscanf(cmd, "%d, %d, %d, %d, %d, %d, %d", &startx, &starty, &startz, &endx, &endy, &endz, &color) == 7)
 80a05d0:	ab0d      	add	r3, sp, #52	; 0x34
 80a05d2:	9304      	str	r3, [sp, #16]
 80a05d4:	ab0c      	add	r3, sp, #48	; 0x30
 80a05d6:	9303      	str	r3, [sp, #12]
 80a05d8:	ab0b      	add	r3, sp, #44	; 0x2c
 80a05da:	9302      	str	r3, [sp, #8]
 80a05dc:	ab0a      	add	r3, sp, #40	; 0x28
 80a05de:	9301      	str	r3, [sp, #4]
 80a05e0:	ab09      	add	r3, sp, #36	; 0x24
 80a05e2:	9300      	str	r3, [sp, #0]
 80a05e4:	490b      	ldr	r1, [pc, #44]	; (80a0614 <_Z11drawLineAPI6String+0x58>)
 80a05e6:	6800      	ldr	r0, [r0, #0]
 80a05e8:	ab08      	add	r3, sp, #32
 80a05ea:	aa07      	add	r2, sp, #28
 80a05ec:	f001 fbf4 	bl	80a1dd8 <sscanf>
 80a05f0:	2807      	cmp	r0, #7
 80a05f2:	d10b      	bne.n	80a060c <_Z11drawLineAPI6String+0x50>
    drawLine(color, startx, starty, startz, endx, endy, endz);
 80a05f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a05f6:	9907      	ldr	r1, [sp, #28]
 80a05f8:	9302      	str	r3, [sp, #8]
 80a05fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a05fc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80a05fe:	9301      	str	r3, [sp, #4]
 80a0600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a0602:	9300      	str	r3, [sp, #0]
 80a0604:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a0608:	f7ff ff2a 	bl	80a0460 <_Z8drawLineiiiiiii>
}
 80a060c:	2001      	movs	r0, #1
 80a060e:	b00f      	add	sp, #60	; 0x3c
 80a0610:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0614:	080a2adb 	.word	0x080a2adb

080a0618 <_Z12planarFlop3D6String>:
  int animationSpeed = 50;
 80a0618:	2332      	movs	r3, #50	; 0x32
{
 80a061a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a061e:	b087      	sub	sp, #28
  if (sscanf(cmd, "%d", &animationSpeed) == 1)
 80a0620:	4994      	ldr	r1, [pc, #592]	; (80a0874 <_Z12planarFlop3D6String+0x25c>)
 80a0622:	6800      	ldr	r0, [r0, #0]
 80a0624:	aa05      	add	r2, sp, #20
  int animationSpeed = 50;
 80a0626:	9305      	str	r3, [sp, #20]
  if (sscanf(cmd, "%d", &animationSpeed) == 1)
 80a0628:	f001 fbd6 	bl	80a1dd8 <sscanf>
 80a062c:	2801      	cmp	r0, #1
 80a062e:	d104      	bne.n	80a063a <_Z12planarFlop3D6String+0x22>
    Log.info("delayTime=%d", animationSpeed);
 80a0630:	9a05      	ldr	r2, [sp, #20]
 80a0632:	4991      	ldr	r1, [pc, #580]	; (80a0878 <_Z12planarFlop3D6String+0x260>)
 80a0634:	4891      	ldr	r0, [pc, #580]	; (80a087c <_Z12planarFlop3D6String+0x264>)
 80a0636:	f7ff fd9d 	bl	80a0174 <_ZNK5spark6Logger4infoEPKcz>
{
 80a063a:	2500      	movs	r5, #0
        drawLine(color, 0, 3, z, 3, y, z);
 80a063c:	2603      	movs	r6, #3
 80a063e:	462f      	mov	r7, r5
  while (continuePattern)
 80a0640:	f8df 823c 	ldr.w	r8, [pc, #572]	; 80a0880 <_Z12planarFlop3D6String+0x268>
 80a0644:	f898 3000 	ldrb.w	r3, [r8]
 80a0648:	2b00      	cmp	r3, #0
 80a064a:	f000 810f 	beq.w	80a086c <_Z12planarFlop3D6String+0x254>
 80a064e:	f04f 0903 	mov.w	r9, #3
      for (int z = 0; z < 4; z++)
 80a0652:	2400      	movs	r4, #0
        drawLine(color, 0, 3, z, 3, y, z);
 80a0654:	4623      	mov	r3, r4
 80a0656:	e9cd 9401 	strd	r9, r4, [sp, #4]
 80a065a:	2203      	movs	r2, #3
 80a065c:	2100      	movs	r1, #0
 80a065e:	4628      	mov	r0, r5
 80a0660:	9600      	str	r6, [sp, #0]
      for (int z = 0; z < 4; z++)
 80a0662:	3401      	adds	r4, #1
        drawLine(color, 0, 3, z, 3, y, z);
 80a0664:	f7ff fefc 	bl	80a0460 <_Z8drawLineiiiiiii>
      for (int z = 0; z < 4; z++)
 80a0668:	2c04      	cmp	r4, #4
 80a066a:	d1f3      	bne.n	80a0654 <_Z12planarFlop3D6String+0x3c>
      delay(animationSpeed);
 80a066c:	9805      	ldr	r0, [sp, #20]
 80a066e:	f001 fbc3 	bl	80a1df8 <delay>
    for (int y = 3; y > 0; y--)
 80a0672:	f1b9 0901 	subs.w	r9, r9, #1
 80a0676:	d1ec      	bne.n	80a0652 <_Z12planarFlop3D6String+0x3a>
 80a0678:	2403      	movs	r4, #3
      for (int z = 0; z < 4; z++)
 80a067a:	f04f 0900 	mov.w	r9, #0
        drawLine(color, 0, 3, z, x, 0, z);
 80a067e:	464b      	mov	r3, r9
 80a0680:	e9cd 7901 	strd	r7, r9, [sp, #4]
 80a0684:	2203      	movs	r2, #3
 80a0686:	2100      	movs	r1, #0
 80a0688:	4628      	mov	r0, r5
 80a068a:	9400      	str	r4, [sp, #0]
      for (int z = 0; z < 4; z++)
 80a068c:	f109 0901 	add.w	r9, r9, #1
        drawLine(color, 0, 3, z, x, 0, z);
 80a0690:	f7ff fee6 	bl	80a0460 <_Z8drawLineiiiiiii>
      for (int z = 0; z < 4; z++)
 80a0694:	f1b9 0f04 	cmp.w	r9, #4
 80a0698:	d1f1      	bne.n	80a067e <_Z12planarFlop3D6String+0x66>
      delay(animationSpeed);
 80a069a:	9805      	ldr	r0, [sp, #20]
 80a069c:	f001 fbac 	bl	80a1df8 <delay>
    for (int x = 3; x > 0; x--)
 80a06a0:	3c01      	subs	r4, #1
 80a06a2:	d1ea      	bne.n	80a067a <_Z12planarFlop3D6String+0x62>
      for (int y = 0; y < 4; y++)
 80a06a4:	f04f 0900 	mov.w	r9, #0
        drawLine(color, 0, y, 0, x, y, 3);
 80a06a8:	2300      	movs	r3, #0
 80a06aa:	464a      	mov	r2, r9
 80a06ac:	e9cd 9601 	strd	r9, r6, [sp, #4]
 80a06b0:	4619      	mov	r1, r3
 80a06b2:	4628      	mov	r0, r5
 80a06b4:	9400      	str	r4, [sp, #0]
      for (int y = 0; y < 4; y++)
 80a06b6:	f109 0901 	add.w	r9, r9, #1
        drawLine(color, 0, y, 0, x, y, 3);
 80a06ba:	f7ff fed1 	bl	80a0460 <_Z8drawLineiiiiiii>
      for (int y = 0; y < 4; y++)
 80a06be:	f1b9 0f04 	cmp.w	r9, #4
 80a06c2:	d1f1      	bne.n	80a06a8 <_Z12planarFlop3D6String+0x90>
      delay(animationSpeed);
 80a06c4:	9805      	ldr	r0, [sp, #20]
    for (int x = 0; x < 3; x++)
 80a06c6:	3401      	adds	r4, #1
      delay(animationSpeed);
 80a06c8:	f001 fb96 	bl	80a1df8 <delay>
    for (int x = 0; x < 3; x++)
 80a06cc:	2c03      	cmp	r4, #3
 80a06ce:	d1e9      	bne.n	80a06a4 <_Z12planarFlop3D6String+0x8c>
      for (int y = 0; y < 4; y++)
 80a06d0:	f04f 0900 	mov.w	r9, #0
        drawLine(color, 0, y, 0, 3, y, z);
 80a06d4:	2300      	movs	r3, #0
 80a06d6:	464a      	mov	r2, r9
 80a06d8:	e9cd 9401 	strd	r9, r4, [sp, #4]
 80a06dc:	4619      	mov	r1, r3
 80a06de:	4628      	mov	r0, r5
 80a06e0:	9600      	str	r6, [sp, #0]
      for (int y = 0; y < 4; y++)
 80a06e2:	f109 0901 	add.w	r9, r9, #1
        drawLine(color, 0, y, 0, 3, y, z);
 80a06e6:	f7ff febb 	bl	80a0460 <_Z8drawLineiiiiiii>
      for (int y = 0; y < 4; y++)
 80a06ea:	f1b9 0f04 	cmp.w	r9, #4
 80a06ee:	d1f1      	bne.n	80a06d4 <_Z12planarFlop3D6String+0xbc>
      delay(animationSpeed);
 80a06f0:	9805      	ldr	r0, [sp, #20]
 80a06f2:	f001 fb81 	bl	80a1df8 <delay>
    for (int z = 3; z > 0; z--)
 80a06f6:	3c01      	subs	r4, #1
 80a06f8:	d1ea      	bne.n	80a06d0 <_Z12planarFlop3D6String+0xb8>
      for (int x = 0; x < 4; x++)
 80a06fa:	f04f 0900 	mov.w	r9, #0
        drawLine(color, x, 0, 0, x, 3, z);
 80a06fe:	2300      	movs	r3, #0
 80a0700:	4649      	mov	r1, r9
 80a0702:	f8cd 9000 	str.w	r9, [sp]
 80a0706:	461a      	mov	r2, r3
 80a0708:	4628      	mov	r0, r5
 80a070a:	e9cd 6401 	strd	r6, r4, [sp, #4]
      for (int x = 0; x < 4; x++)
 80a070e:	f109 0901 	add.w	r9, r9, #1
        drawLine(color, x, 0, 0, x, 3, z);
 80a0712:	f7ff fea5 	bl	80a0460 <_Z8drawLineiiiiiii>
      for (int x = 0; x < 4; x++)
 80a0716:	f1b9 0f04 	cmp.w	r9, #4
 80a071a:	d1f0      	bne.n	80a06fe <_Z12planarFlop3D6String+0xe6>
      delay(animationSpeed);
 80a071c:	9805      	ldr	r0, [sp, #20]
    for (int z = 0; z < 3; z++)
 80a071e:	3401      	adds	r4, #1
      delay(animationSpeed);
 80a0720:	f001 fb6a 	bl	80a1df8 <delay>
    for (int z = 0; z < 3; z++)
 80a0724:	2c03      	cmp	r4, #3
 80a0726:	d1e8      	bne.n	80a06fa <_Z12planarFlop3D6String+0xe2>
      for (int x = 0; x < 4; x++)
 80a0728:	f04f 0900 	mov.w	r9, #0
        drawLine(color, x, 0, 0, x, y, 3);
 80a072c:	2300      	movs	r3, #0
 80a072e:	4649      	mov	r1, r9
 80a0730:	f8cd 9000 	str.w	r9, [sp]
 80a0734:	461a      	mov	r2, r3
 80a0736:	4628      	mov	r0, r5
 80a0738:	e9cd 4601 	strd	r4, r6, [sp, #4]
      for (int x = 0; x < 4; x++)
 80a073c:	f109 0901 	add.w	r9, r9, #1
        drawLine(color, x, 0, 0, x, y, 3);
 80a0740:	f7ff fe8e 	bl	80a0460 <_Z8drawLineiiiiiii>
      for (int x = 0; x < 4; x++)
 80a0744:	f1b9 0f04 	cmp.w	r9, #4
 80a0748:	d1f0      	bne.n	80a072c <_Z12planarFlop3D6String+0x114>
      delay(animationSpeed);
 80a074a:	9805      	ldr	r0, [sp, #20]
 80a074c:	f001 fb54 	bl	80a1df8 <delay>
    for (int y = 3; y > 0; y--)
 80a0750:	3c01      	subs	r4, #1
 80a0752:	d1e9      	bne.n	80a0728 <_Z12planarFlop3D6String+0x110>
      for (int z = 0; z < 4; z++)
 80a0754:	f04f 0900 	mov.w	r9, #0
        drawLine(color, 3, 0, z, 0, y, z);
 80a0758:	464b      	mov	r3, r9
 80a075a:	e9cd 4901 	strd	r4, r9, [sp, #4]
 80a075e:	2200      	movs	r2, #0
 80a0760:	2103      	movs	r1, #3
 80a0762:	4628      	mov	r0, r5
 80a0764:	9700      	str	r7, [sp, #0]
      for (int z = 0; z < 4; z++)
 80a0766:	f109 0901 	add.w	r9, r9, #1
        drawLine(color, 3, 0, z, 0, y, z);
 80a076a:	f7ff fe79 	bl	80a0460 <_Z8drawLineiiiiiii>
      for (int z = 0; z < 4; z++)
 80a076e:	f1b9 0f04 	cmp.w	r9, #4
 80a0772:	d1f1      	bne.n	80a0758 <_Z12planarFlop3D6String+0x140>
      delay(animationSpeed);
 80a0774:	9805      	ldr	r0, [sp, #20]
    for (int y = 0; y < 3; y++)
 80a0776:	3401      	adds	r4, #1
      delay(animationSpeed);
 80a0778:	f001 fb3e 	bl	80a1df8 <delay>
    for (int y = 0; y < 3; y++)
 80a077c:	2c03      	cmp	r4, #3
 80a077e:	d1e9      	bne.n	80a0754 <_Z12planarFlop3D6String+0x13c>
    for (int x = 0; x < 3; x++)
 80a0780:	2400      	movs	r4, #0
      for (int z = 0; z < 4; z++)
 80a0782:	f04f 0900 	mov.w	r9, #0
        drawLine(color, 3, 0, z, x, 3, z);
 80a0786:	464b      	mov	r3, r9
 80a0788:	e9cd 6901 	strd	r6, r9, [sp, #4]
 80a078c:	2200      	movs	r2, #0
 80a078e:	2103      	movs	r1, #3
 80a0790:	4628      	mov	r0, r5
 80a0792:	9400      	str	r4, [sp, #0]
      for (int z = 0; z < 4; z++)
 80a0794:	f109 0901 	add.w	r9, r9, #1
        drawLine(color, 3, 0, z, x, 3, z);
 80a0798:	f7ff fe62 	bl	80a0460 <_Z8drawLineiiiiiii>
      for (int z = 0; z < 4; z++)
 80a079c:	f1b9 0f04 	cmp.w	r9, #4
 80a07a0:	d1f1      	bne.n	80a0786 <_Z12planarFlop3D6String+0x16e>
      delay(animationSpeed);
 80a07a2:	9805      	ldr	r0, [sp, #20]
    for (int x = 0; x < 3; x++)
 80a07a4:	3401      	adds	r4, #1
      delay(animationSpeed);
 80a07a6:	f001 fb27 	bl	80a1df8 <delay>
    for (int x = 0; x < 3; x++)
 80a07aa:	2c03      	cmp	r4, #3
 80a07ac:	d1e9      	bne.n	80a0782 <_Z12planarFlop3D6String+0x16a>
      for (int y = 0; y < 4; y++)
 80a07ae:	f04f 0900 	mov.w	r9, #0
        drawLine(color, 3, y, 3, x, y, 0);
 80a07b2:	2303      	movs	r3, #3
 80a07b4:	464a      	mov	r2, r9
 80a07b6:	e9cd 9701 	strd	r9, r7, [sp, #4]
 80a07ba:	4619      	mov	r1, r3
 80a07bc:	4628      	mov	r0, r5
 80a07be:	9400      	str	r4, [sp, #0]
      for (int y = 0; y < 4; y++)
 80a07c0:	f109 0901 	add.w	r9, r9, #1
        drawLine(color, 3, y, 3, x, y, 0);
 80a07c4:	f7ff fe4c 	bl	80a0460 <_Z8drawLineiiiiiii>
      for (int y = 0; y < 4; y++)
 80a07c8:	f1b9 0f04 	cmp.w	r9, #4
 80a07cc:	d1f1      	bne.n	80a07b2 <_Z12planarFlop3D6String+0x19a>
      delay(animationSpeed);
 80a07ce:	9805      	ldr	r0, [sp, #20]
 80a07d0:	f001 fb12 	bl	80a1df8 <delay>
    for (int x = 3; x > 0; x--)
 80a07d4:	3c01      	subs	r4, #1
 80a07d6:	d1ea      	bne.n	80a07ae <_Z12planarFlop3D6String+0x196>
      for (int y = 0; y < 4; y++)
 80a07d8:	f04f 0900 	mov.w	r9, #0
        drawLine(color, 3, y, 3, 0, y, z);
 80a07dc:	2303      	movs	r3, #3
 80a07de:	464a      	mov	r2, r9
 80a07e0:	e9cd 9401 	strd	r9, r4, [sp, #4]
 80a07e4:	4619      	mov	r1, r3
 80a07e6:	4628      	mov	r0, r5
 80a07e8:	9700      	str	r7, [sp, #0]
      for (int y = 0; y < 4; y++)
 80a07ea:	f109 0901 	add.w	r9, r9, #1
        drawLine(color, 3, y, 3, 0, y, z);
 80a07ee:	f7ff fe37 	bl	80a0460 <_Z8drawLineiiiiiii>
      for (int y = 0; y < 4; y++)
 80a07f2:	f1b9 0f04 	cmp.w	r9, #4
 80a07f6:	d1f1      	bne.n	80a07dc <_Z12planarFlop3D6String+0x1c4>
      delay(animationSpeed);
 80a07f8:	9805      	ldr	r0, [sp, #20]
    for (int z = 0; z < 3; z++)
 80a07fa:	3401      	adds	r4, #1
      delay(animationSpeed);
 80a07fc:	f001 fafc 	bl	80a1df8 <delay>
    for (int z = 0; z < 3; z++)
 80a0800:	2c03      	cmp	r4, #3
 80a0802:	d1e9      	bne.n	80a07d8 <_Z12planarFlop3D6String+0x1c0>
      for (int x = 0; x < 4; x++)
 80a0804:	f04f 0900 	mov.w	r9, #0
        drawLine(color, x, 3, 3, x, 0, z);
 80a0808:	2303      	movs	r3, #3
 80a080a:	4649      	mov	r1, r9
 80a080c:	f8cd 9000 	str.w	r9, [sp]
 80a0810:	461a      	mov	r2, r3
 80a0812:	4628      	mov	r0, r5
 80a0814:	e9cd 7401 	strd	r7, r4, [sp, #4]
      for (int x = 0; x < 4; x++)
 80a0818:	f109 0901 	add.w	r9, r9, #1
        drawLine(color, x, 3, 3, x, 0, z);
 80a081c:	f7ff fe20 	bl	80a0460 <_Z8drawLineiiiiiii>
      for (int x = 0; x < 4; x++)
 80a0820:	f1b9 0f04 	cmp.w	r9, #4
 80a0824:	d1f0      	bne.n	80a0808 <_Z12planarFlop3D6String+0x1f0>
      delay(animationSpeed);
 80a0826:	9805      	ldr	r0, [sp, #20]
 80a0828:	f001 fae6 	bl	80a1df8 <delay>
    for (int z = 3; z > 0; z--)
 80a082c:	3c01      	subs	r4, #1
 80a082e:	d1e9      	bne.n	80a0804 <_Z12planarFlop3D6String+0x1ec>
      for (int x = 0; x < 4; x++)
 80a0830:	f04f 0900 	mov.w	r9, #0
        drawLine(color, x, 3, 3, x, y, 0);
 80a0834:	2303      	movs	r3, #3
 80a0836:	4649      	mov	r1, r9
 80a0838:	f8cd 9000 	str.w	r9, [sp]
 80a083c:	461a      	mov	r2, r3
 80a083e:	4628      	mov	r0, r5
 80a0840:	e9cd 4701 	strd	r4, r7, [sp, #4]
      for (int x = 0; x < 4; x++)
 80a0844:	f109 0901 	add.w	r9, r9, #1
        drawLine(color, x, 3, 3, x, y, 0);
 80a0848:	f7ff fe0a 	bl	80a0460 <_Z8drawLineiiiiiii>
      for (int x = 0; x < 4; x++)
 80a084c:	f1b9 0f04 	cmp.w	r9, #4
 80a0850:	d1f0      	bne.n	80a0834 <_Z12planarFlop3D6String+0x21c>
      delay(animationSpeed);
 80a0852:	9805      	ldr	r0, [sp, #20]
    for (int y = 0; y < 3; y++)
 80a0854:	3401      	adds	r4, #1
      delay(animationSpeed);
 80a0856:	f001 facf 	bl	80a1df8 <delay>
    for (int y = 0; y < 3; y++)
 80a085a:	2c03      	cmp	r4, #3
 80a085c:	d1e8      	bne.n	80a0830 <_Z12planarFlop3D6String+0x218>
int nextColor(int color) { return (color + 1) % 3; }
 80a085e:	3501      	adds	r5, #1
 80a0860:	fbb5 f4f4 	udiv	r4, r5, r4
 80a0864:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80a0868:	1b2d      	subs	r5, r5, r4
  while (continuePattern)
 80a086a:	e6eb      	b.n	80a0644 <_Z12planarFlop3D6String+0x2c>
}
 80a086c:	2001      	movs	r0, #1
 80a086e:	b007      	add	sp, #28
 80a0870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0874:	080a2af3 	.word	0x080a2af3
 80a0878:	080a2af6 	.word	0x080a2af6
 80a087c:	200007c4 	.word	0x200007c4
 80a0880:	20000200 	.word	0x20000200

080a0884 <_Z10reset_pinsii>:
  digitalWrite(high_pin, HIGH);
  digitalWrite(low_pin, LOW);
}

void reset_pins(int low_pin, int high_pin)
{
 80a0884:	b538      	push	{r3, r4, r5, lr}
 80a0886:	460c      	mov	r4, r1
  pinMode(low_pin, INPUT);
 80a0888:	b285      	uxth	r5, r0
 80a088a:	4628      	mov	r0, r5
  pinMode(high_pin, INPUT);
 80a088c:	b2a4      	uxth	r4, r4
  pinMode(low_pin, INPUT);
 80a088e:	2100      	movs	r1, #0
 80a0890:	f001 ff8e 	bl	80a27b0 <pinMode>
  pinMode(high_pin, INPUT);
 80a0894:	4620      	mov	r0, r4
 80a0896:	2100      	movs	r1, #0
 80a0898:	f001 ff8a 	bl	80a27b0 <pinMode>

  digitalWrite(low_pin, LOW);
 80a089c:	4628      	mov	r0, r5
 80a089e:	2100      	movs	r1, #0
 80a08a0:	f001 ff97 	bl	80a27d2 <digitalWrite>
  digitalWrite(high_pin, LOW);
 80a08a4:	4620      	mov	r0, r4
}
 80a08a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  digitalWrite(high_pin, LOW);
 80a08aa:	2100      	movs	r1, #0
 80a08ac:	f001 bf91 	b.w	80a27d2 <digitalWrite>

080a08b0 <_Z8resetLediiii>:
  switch (color)
 80a08b0:	0080      	lsls	r0, r0, #2
 80a08b2:	b11b      	cbz	r3, 80a08bc <_Z8resetLediiii+0xc>
 80a08b4:	2b01      	cmp	r3, #1
 80a08b6:	d00c      	beq.n	80a08d2 <_Z8resetLediiii+0x22>
    pin2 = blue[x][y][z][1];
 80a08b8:	4b07      	ldr	r3, [pc, #28]	; (80a08d8 <_Z8resetLediiii+0x28>)
 80a08ba:	e000      	b.n	80a08be <_Z8resetLediiii+0xe>
    pin2 = red[x][y][z][1];
 80a08bc:	4b07      	ldr	r3, [pc, #28]	; (80a08dc <_Z8resetLediiii+0x2c>)
    pin2 = blue[x][y][z][1];
 80a08be:	4408      	add	r0, r1
 80a08c0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80a08c4:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    reset_pins(pin1, pin2);
 80a08c8:	6849      	ldr	r1, [r1, #4]
 80a08ca:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80a08ce:	f7ff bfd9 	b.w	80a0884 <_Z10reset_pinsii>
    pin2 = green[x][y][z][1];
 80a08d2:	4b03      	ldr	r3, [pc, #12]	; (80a08e0 <_Z8resetLediiii+0x30>)
 80a08d4:	e7f3      	b.n	80a08be <_Z8resetLediiii+0xe>
 80a08d6:	bf00      	nop
 80a08d8:	20000000 	.word	0x20000000
 80a08dc:	20000548 	.word	0x20000548
 80a08e0:	20000204 	.word	0x20000204

080a08e4 <_Z7lightIt6String>:
  int x = 0;
 80a08e4:	2300      	movs	r3, #0
{
 80a08e6:	b510      	push	{r4, lr}
 80a08e8:	b086      	sub	sp, #24
  int y = 0;
 80a08ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
  int color = 0;
 80a08ee:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (sscanf(cmd, "%d, %d, %d, %d", &x, &y, &z, &color) == 4)
 80a08f2:	ab05      	add	r3, sp, #20
 80a08f4:	9301      	str	r3, [sp, #4]
 80a08f6:	ab04      	add	r3, sp, #16
 80a08f8:	9300      	str	r3, [sp, #0]
 80a08fa:	4911      	ldr	r1, [pc, #68]	; (80a0940 <_Z7lightIt6String+0x5c>)
 80a08fc:	6800      	ldr	r0, [r0, #0]
 80a08fe:	ab03      	add	r3, sp, #12
 80a0900:	aa02      	add	r2, sp, #8
 80a0902:	f001 fa69 	bl	80a1dd8 <sscanf>
 80a0906:	2804      	cmp	r0, #4
 80a0908:	d117      	bne.n	80a093a <_Z7lightIt6String+0x56>
    if (grid[x][y][z] < 3)
 80a090a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a090e:	9a04      	ldr	r2, [sp, #16]
 80a0910:	4c0c      	ldr	r4, [pc, #48]	; (80a0944 <_Z7lightIt6String+0x60>)
 80a0912:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 80a0916:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a091a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80a091e:	2b02      	cmp	r3, #2
 80a0920:	dc01      	bgt.n	80a0926 <_Z7lightIt6String+0x42>
      resetLed(x, y, z, grid[x][y][z]);
 80a0922:	f7ff ffc5 	bl	80a08b0 <_Z8resetLediiii>
    grid[x][y][z] = color;
 80a0926:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a092a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80a092e:	9b04      	ldr	r3, [sp, #16]
 80a0930:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80a0934:	9a05      	ldr	r2, [sp, #20]
 80a0936:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
 80a093a:	2001      	movs	r0, #1
 80a093c:	b006      	add	sp, #24
 80a093e:	bd10      	pop	{r4, pc}
 80a0940:	080a2ae7 	.word	0x080a2ae7
 80a0944:	20000404 	.word	0x20000404

080a0948 <_Z8set_pinsii>:
{
 80a0948:	b538      	push	{r3, r4, r5, lr}
 80a094a:	460d      	mov	r5, r1
 80a094c:	4604      	mov	r4, r0
  pinMode(high_pin, OUTPUT);
 80a094e:	b2ad      	uxth	r5, r5
  reset_pins(low_pin, high_pin);
 80a0950:	f7ff ff98 	bl	80a0884 <_Z10reset_pinsii>
  pinMode(low_pin, OUTPUT);
 80a0954:	b2a4      	uxth	r4, r4
  pinMode(high_pin, OUTPUT);
 80a0956:	4628      	mov	r0, r5
 80a0958:	2101      	movs	r1, #1
 80a095a:	f001 ff29 	bl	80a27b0 <pinMode>
  pinMode(low_pin, OUTPUT);
 80a095e:	4620      	mov	r0, r4
 80a0960:	2101      	movs	r1, #1
 80a0962:	f001 ff25 	bl	80a27b0 <pinMode>
  digitalWrite(high_pin, HIGH);
 80a0966:	4628      	mov	r0, r5
 80a0968:	2101      	movs	r1, #1
 80a096a:	f001 ff32 	bl	80a27d2 <digitalWrite>
  digitalWrite(low_pin, LOW);
 80a096e:	4620      	mov	r0, r4
}
 80a0970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  digitalWrite(low_pin, LOW);
 80a0974:	2100      	movs	r1, #0
 80a0976:	f001 bf2c 	b.w	80a27d2 <digitalWrite>
	...

080a097c <_Z7drawLediiii>:
  switch (color)
 80a097c:	2b01      	cmp	r3, #1
 80a097e:	d00e      	beq.n	80a099e <_Z7drawLediiii+0x22>
 80a0980:	2b02      	cmp	r3, #2
 80a0982:	d00e      	beq.n	80a09a2 <_Z7drawLediiii+0x26>
 80a0984:	b97b      	cbnz	r3, 80a09a6 <_Z7drawLediiii+0x2a>
    pin2 = red[x][y][z][1];
 80a0986:	4b08      	ldr	r3, [pc, #32]	; (80a09a8 <_Z7drawLediiii+0x2c>)
    pin2 = blue[x][y][z][1];
 80a0988:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80a098c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80a0990:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    set_pins(pin1, pin2);
 80a0994:	6849      	ldr	r1, [r1, #4]
 80a0996:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80a099a:	f7ff bfd5 	b.w	80a0948 <_Z8set_pinsii>
    pin2 = green[x][y][z][1];
 80a099e:	4b03      	ldr	r3, [pc, #12]	; (80a09ac <_Z7drawLediiii+0x30>)
 80a09a0:	e7f2      	b.n	80a0988 <_Z7drawLediiii+0xc>
    pin2 = blue[x][y][z][1];
 80a09a2:	4b03      	ldr	r3, [pc, #12]	; (80a09b0 <_Z7drawLediiii+0x34>)
 80a09a4:	e7f0      	b.n	80a0988 <_Z7drawLediiii+0xc>
}
 80a09a6:	4770      	bx	lr
 80a09a8:	20000548 	.word	0x20000548
 80a09ac:	20000204 	.word	0x20000204
 80a09b0:	20000000 	.word	0x20000000

080a09b4 <_Z8mainLoopv>:
{
 80a09b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (int x = 0; x < 4; x++)
 80a09b8:	2400      	movs	r4, #0
 80a09ba:	4f15      	ldr	r7, [pc, #84]	; (80a0a10 <_Z8mainLoopv+0x5c>)
          delayMicroseconds(microDelay);
 80a09bc:	f8df a054 	ldr.w	sl, [pc, #84]	; 80a0a14 <_Z8mainLoopv+0x60>
  for (int x = 0; x < 4; x++)
 80a09c0:	46b8      	mov	r8, r7
    for (int y = 0; y < 4; y++)
 80a09c2:	2500      	movs	r5, #0
 80a09c4:	46c1      	mov	r9, r8
      for (int z = 0; z < 4; z++)
 80a09c6:	2600      	movs	r6, #0
        if (grid[x][y][z] < 3)
 80a09c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80a09cc:	2b02      	cmp	r3, #2
 80a09ce:	dc0f      	bgt.n	80a09f0 <_Z8mainLoopv+0x3c>
          drawLed(x, y, z, grid[x][y][z]);
 80a09d0:	4632      	mov	r2, r6
 80a09d2:	4629      	mov	r1, r5
 80a09d4:	4620      	mov	r0, r4
 80a09d6:	f7ff ffd1 	bl	80a097c <_Z7drawLediiii>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a09da:	f8da 0000 	ldr.w	r0, [sl]
 80a09de:	f001 f85d 	bl	80a1a9c <HAL_Delay_Microseconds>
          resetLed(x, y, z, grid[x][y][z]);
 80a09e2:	4632      	mov	r2, r6
 80a09e4:	4629      	mov	r1, r5
 80a09e6:	4620      	mov	r0, r4
 80a09e8:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80a09ec:	f7ff ff60 	bl	80a08b0 <_Z8resetLediiii>
      for (int z = 0; z < 4; z++)
 80a09f0:	3601      	adds	r6, #1
 80a09f2:	2e04      	cmp	r6, #4
 80a09f4:	d1e8      	bne.n	80a09c8 <_Z8mainLoopv+0x14>
    for (int y = 0; y < 4; y++)
 80a09f6:	3501      	adds	r5, #1
 80a09f8:	2d04      	cmp	r5, #4
 80a09fa:	f108 0810 	add.w	r8, r8, #16
 80a09fe:	d1e1      	bne.n	80a09c4 <_Z8mainLoopv+0x10>
  for (int x = 0; x < 4; x++)
 80a0a00:	3401      	adds	r4, #1
 80a0a02:	2c04      	cmp	r4, #4
 80a0a04:	f107 0740 	add.w	r7, r7, #64	; 0x40
 80a0a08:	d1da      	bne.n	80a09c0 <_Z8mainLoopv+0xc>
}
 80a0a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0a0e:	bf00      	nop
 80a0a10:	20000404 	.word	0x20000404
 80a0a14:	20000504 	.word	0x20000504

080a0a18 <_Z10planarSpinv>:
{
 80a0a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        drawLine(color, x, 0, 0, 3 - x, 3, 0);
 80a0a1c:	4f3d      	ldr	r7, [pc, #244]	; (80a0b14 <_Z10planarSpinv+0xfc>)
{
 80a0a1e:	2364      	movs	r3, #100	; 0x64
        drawLine(color, x, 0, 0, 3 - x, 3, 0);
 80a0a20:	2500      	movs	r5, #0
 80a0a22:	463c      	mov	r4, r7
{
 80a0a24:	b087      	sub	sp, #28
 80a0a26:	9305      	str	r3, [sp, #20]
 80a0a28:	f04f 0b14 	mov.w	fp, #20
      for (int x = 0; x < 3; x++)
 80a0a2c:	f04f 0a00 	mov.w	sl, #0
        drawLine(color, x, 0, 0, 3 - x, 3, 0);
 80a0a30:	2603      	movs	r6, #3
 80a0a32:	2300      	movs	r3, #0
        drawLine(color, x, 0, 1, 3 - x, 3, 1);
 80a0a34:	f04f 0801 	mov.w	r8, #1
 80a0a38:	f1ca 0903 	rsb	r9, sl, #3
        drawLine(color, x, 0, 0, 3 - x, 3, 0);
 80a0a3c:	461a      	mov	r2, r3
 80a0a3e:	4651      	mov	r1, sl
 80a0a40:	6838      	ldr	r0, [r7, #0]
 80a0a42:	e9cd 9600 	strd	r9, r6, [sp]
 80a0a46:	9502      	str	r5, [sp, #8]
 80a0a48:	f7ff fd0a 	bl	80a0460 <_Z8drawLineiiiiiii>
        drawLine(color, x, 0, 1, 3 - x, 3, 1);
 80a0a4c:	4651      	mov	r1, sl
 80a0a4e:	4643      	mov	r3, r8
 80a0a50:	2200      	movs	r2, #0
 80a0a52:	6838      	ldr	r0, [r7, #0]
 80a0a54:	e9cd 6801 	strd	r6, r8, [sp, #4]
 80a0a58:	f8cd 9000 	str.w	r9, [sp]
 80a0a5c:	f7ff fd00 	bl	80a0460 <_Z8drawLineiiiiiii>
        drawLine(color, x, 0, 2, 3 - x, 3, 2);
 80a0a60:	2302      	movs	r3, #2
 80a0a62:	4651      	mov	r1, sl
 80a0a64:	2200      	movs	r2, #0
 80a0a66:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80a0a6a:	6838      	ldr	r0, [r7, #0]
 80a0a6c:	f8cd 9000 	str.w	r9, [sp]
 80a0a70:	f7ff fcf6 	bl	80a0460 <_Z8drawLineiiiiiii>
        drawLine(color, x, 0, 3, 3 - x, 3, 3);
 80a0a74:	4651      	mov	r1, sl
 80a0a76:	4633      	mov	r3, r6
 80a0a78:	2200      	movs	r2, #0
 80a0a7a:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80a0a7e:	6838      	ldr	r0, [r7, #0]
 80a0a80:	f8cd 9000 	str.w	r9, [sp]
      for (int x = 0; x < 3; x++)
 80a0a84:	44c2      	add	sl, r8
        drawLine(color, x, 0, 3, 3 - x, 3, 3);
 80a0a86:	f7ff fceb 	bl	80a0460 <_Z8drawLineiiiiiii>
      for (int x = 0; x < 3; x++)
 80a0a8a:	45b2      	cmp	sl, r6
 80a0a8c:	d1d0      	bne.n	80a0a30 <_Z10planarSpinv+0x18>
      for (int y = 0; y < 3; y++)
 80a0a8e:	2600      	movs	r6, #0
        drawLine(color, 3, y, 0, 0, 3 - y, 0);
 80a0a90:	f1c6 0903 	rsb	r9, r6, #3
 80a0a94:	e9cd 9501 	strd	r9, r5, [sp, #4]
 80a0a98:	9500      	str	r5, [sp, #0]
 80a0a9a:	4632      	mov	r2, r6
 80a0a9c:	2300      	movs	r3, #0
 80a0a9e:	2103      	movs	r1, #3
 80a0aa0:	6820      	ldr	r0, [r4, #0]
 80a0aa2:	f7ff fcdd 	bl	80a0460 <_Z8drawLineiiiiiii>
        drawLine(color, 3, y, 1, 0, 3 - y, 1);
 80a0aa6:	e9cd 9801 	strd	r9, r8, [sp, #4]
 80a0aaa:	9500      	str	r5, [sp, #0]
 80a0aac:	4632      	mov	r2, r6
 80a0aae:	2301      	movs	r3, #1
 80a0ab0:	2103      	movs	r1, #3
 80a0ab2:	6820      	ldr	r0, [r4, #0]
 80a0ab4:	f7ff fcd4 	bl	80a0460 <_Z8drawLineiiiiiii>
        drawLine(color, 3, y, 2, 0, 3 - y, 2);
 80a0ab8:	2302      	movs	r3, #2
 80a0aba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80a0abe:	9500      	str	r5, [sp, #0]
 80a0ac0:	4632      	mov	r2, r6
 80a0ac2:	2103      	movs	r1, #3
 80a0ac4:	6820      	ldr	r0, [r4, #0]
 80a0ac6:	f7ff fccb 	bl	80a0460 <_Z8drawLineiiiiiii>
        drawLine(color, 3, y, 3, 0, 3 - y, 3);
 80a0aca:	2303      	movs	r3, #3
 80a0acc:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 80a0ad0:	9500      	str	r5, [sp, #0]
 80a0ad2:	4632      	mov	r2, r6
 80a0ad4:	4619      	mov	r1, r3
 80a0ad6:	6820      	ldr	r0, [r4, #0]
      for (int y = 0; y < 3; y++)
 80a0ad8:	3601      	adds	r6, #1
        drawLine(color, 3, y, 3, 0, 3 - y, 3);
 80a0ada:	f7ff fcc1 	bl	80a0460 <_Z8drawLineiiiiiii>
      for (int y = 0; y < 3; y++)
 80a0ade:	2e03      	cmp	r6, #3
 80a0ae0:	d1d6      	bne.n	80a0a90 <_Z10planarSpinv+0x78>
 80a0ae2:	2664      	movs	r6, #100	; 0x64
        mainLoop();
 80a0ae4:	f7ff ff66 	bl	80a09b4 <_Z8mainLoopv>
      for (int i = 0; i < 100; i++)
 80a0ae8:	3e01      	subs	r6, #1
 80a0aea:	d1fb      	bne.n	80a0ae4 <_Z10planarSpinv+0xcc>
    for (int i = 0; i < spinsPerColor; i++)
 80a0aec:	f1bb 0b01 	subs.w	fp, fp, #1
 80a0af0:	d19c      	bne.n	80a0a2c <_Z10planarSpinv+0x14>
int nextColor(int color) { return (color + 1) % 3; }
 80a0af2:	2203      	movs	r2, #3
 80a0af4:	6823      	ldr	r3, [r4, #0]
 80a0af6:	3301      	adds	r3, #1
 80a0af8:	fb93 f2f2 	sdiv	r2, r3, r2
 80a0afc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a0b00:	1a9b      	subs	r3, r3, r2
    color = nextColor(color);
 80a0b02:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < 100; i++)
 80a0b04:	9b05      	ldr	r3, [sp, #20]
 80a0b06:	3b01      	subs	r3, #1
 80a0b08:	9305      	str	r3, [sp, #20]
 80a0b0a:	d18d      	bne.n	80a0a28 <_Z10planarSpinv+0x10>
}
 80a0b0c:	b007      	add	sp, #28
 80a0b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0b12:	bf00      	nop
 80a0b14:	200007b4 	.word	0x200007b4

080a0b18 <_Z8countUp26String>:
  int delayTime = 50;
 80a0b18:	2332      	movs	r3, #50	; 0x32
{
 80a0b1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sscanf(cmd, "%d", &delayTime) == 1)
 80a0b1e:	492a      	ldr	r1, [pc, #168]	; (80a0bc8 <_Z8countUp26String+0xb0>)
 80a0b20:	6800      	ldr	r0, [r0, #0]
 80a0b22:	aa01      	add	r2, sp, #4
  int delayTime = 50;
 80a0b24:	9301      	str	r3, [sp, #4]
  if (sscanf(cmd, "%d", &delayTime) == 1)
 80a0b26:	f001 f957 	bl	80a1dd8 <sscanf>
 80a0b2a:	2801      	cmp	r0, #1
 80a0b2c:	d104      	bne.n	80a0b38 <_Z8countUp26String+0x20>
    Log.info("delayTime=%d", delayTime);
 80a0b2e:	9a01      	ldr	r2, [sp, #4]
 80a0b30:	4926      	ldr	r1, [pc, #152]	; (80a0bcc <_Z8countUp26String+0xb4>)
 80a0b32:	4827      	ldr	r0, [pc, #156]	; (80a0bd0 <_Z8countUp26String+0xb8>)
 80a0b34:	f7ff fb1e 	bl	80a0174 <_ZNK5spark6Logger4infoEPKcz>
{
 80a0b38:	f04f 0800 	mov.w	r8, #0
 80a0b3c:	f04f 0a80 	mov.w	sl, #128	; 0x80
 80a0b40:	f8df b098 	ldr.w	fp, [pc, #152]	; 80a0bdc <_Z8countUp26String+0xc4>
 80a0b44:	4b23      	ldr	r3, [pc, #140]	; (80a0bd4 <_Z8countUp26String+0xbc>)
 80a0b46:	4a24      	ldr	r2, [pc, #144]	; (80a0bd8 <_Z8countUp26String+0xc0>)
    for (int y = 0; y < 4; y++)
 80a0b48:	ea4f 1448 	mov.w	r4, r8, lsl #5
{
 80a0b4c:	f04f 0904 	mov.w	r9, #4
 80a0b50:	eb0b 0704 	add.w	r7, fp, r4
 80a0b54:	191e      	adds	r6, r3, r4
 80a0b56:	1915      	adds	r5, r2, r4
        set_pins(red[x][y][z][0], red[x][y][z][1]);
 80a0b58:	e9d7 0100 	ldrd	r0, r1, [r7]
 80a0b5c:	f7ff fef4 	bl	80a0948 <_Z8set_pinsii>
        delay(delayTime);
 80a0b60:	9801      	ldr	r0, [sp, #4]
 80a0b62:	f001 f949 	bl	80a1df8 <delay>
        reset_pins(red[x][y][z][0], red[x][y][z][1]);
 80a0b66:	6879      	ldr	r1, [r7, #4]
 80a0b68:	f857 0b08 	ldr.w	r0, [r7], #8
 80a0b6c:	f7ff fe8a 	bl	80a0884 <_Z10reset_pinsii>
        set_pins(green[x][y][z][0], green[x][y][z][1]);
 80a0b70:	e9d6 0100 	ldrd	r0, r1, [r6]
 80a0b74:	f7ff fee8 	bl	80a0948 <_Z8set_pinsii>
        delay(delayTime);
 80a0b78:	9801      	ldr	r0, [sp, #4]
 80a0b7a:	f001 f93d 	bl	80a1df8 <delay>
        reset_pins(green[x][y][z][0], green[x][y][z][1]);
 80a0b7e:	6871      	ldr	r1, [r6, #4]
 80a0b80:	f856 0b08 	ldr.w	r0, [r6], #8
 80a0b84:	f7ff fe7e 	bl	80a0884 <_Z10reset_pinsii>
        set_pins(blue[x][y][z][0], blue[x][y][z][1]);
 80a0b88:	e9d5 0100 	ldrd	r0, r1, [r5]
 80a0b8c:	f7ff fedc 	bl	80a0948 <_Z8set_pinsii>
        delay(delayTime);
 80a0b90:	9801      	ldr	r0, [sp, #4]
 80a0b92:	f001 f931 	bl	80a1df8 <delay>
        reset_pins(blue[x][y][z][0], blue[x][y][z][1]);
 80a0b96:	6869      	ldr	r1, [r5, #4]
 80a0b98:	f855 0b08 	ldr.w	r0, [r5], #8
 80a0b9c:	f7ff fe72 	bl	80a0884 <_Z10reset_pinsii>
      for (int z = 0; z < 4; z++)
 80a0ba0:	f1b9 0901 	subs.w	r9, r9, #1
 80a0ba4:	4b0b      	ldr	r3, [pc, #44]	; (80a0bd4 <_Z8countUp26String+0xbc>)
 80a0ba6:	4a0c      	ldr	r2, [pc, #48]	; (80a0bd8 <_Z8countUp26String+0xc0>)
 80a0ba8:	d1d6      	bne.n	80a0b58 <_Z8countUp26String+0x40>
    for (int y = 0; y < 4; y++)
 80a0baa:	3420      	adds	r4, #32
 80a0bac:	4554      	cmp	r4, sl
 80a0bae:	d1cd      	bne.n	80a0b4c <_Z8countUp26String+0x34>
  for (int x = 0; x < 4; x++)
 80a0bb0:	f108 0804 	add.w	r8, r8, #4
 80a0bb4:	f1b8 0f10 	cmp.w	r8, #16
 80a0bb8:	f104 0a80 	add.w	sl, r4, #128	; 0x80
 80a0bbc:	d1c4      	bne.n	80a0b48 <_Z8countUp26String+0x30>
}
 80a0bbe:	2001      	movs	r0, #1
 80a0bc0:	b003      	add	sp, #12
 80a0bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0bc6:	bf00      	nop
 80a0bc8:	080a2af3 	.word	0x080a2af3
 80a0bcc:	080a2af6 	.word	0x080a2af6
 80a0bd0:	200007c4 	.word	0x200007c4
 80a0bd4:	20000204 	.word	0x20000204
 80a0bd8:	20000000 	.word	0x20000000
 80a0bdc:	20000548 	.word	0x20000548

080a0be0 <_Z14reset_all_pinsv>:

void reset_all_pins()
{
 80a0be0:	b538      	push	{r3, r4, r5, lr}
 80a0be2:	2410      	movs	r4, #16
 80a0be4:	4d06      	ldr	r5, [pc, #24]	; (80a0c00 <_Z14reset_all_pinsv+0x20>)
  for (int x = 0; x < 16; x++)
  {
    pinMode(pins[x], INPUT);
 80a0be6:	2100      	movs	r1, #0
 80a0be8:	8828      	ldrh	r0, [r5, #0]
 80a0bea:	f001 fde1 	bl	80a27b0 <pinMode>
    digitalWrite(pins[x], LOW);
 80a0bee:	f855 0b04 	ldr.w	r0, [r5], #4
 80a0bf2:	2100      	movs	r1, #0
 80a0bf4:	b280      	uxth	r0, r0
 80a0bf6:	f001 fdec 	bl	80a27d2 <digitalWrite>
  for (int x = 0; x < 16; x++)
 80a0bfa:	3c01      	subs	r4, #1
 80a0bfc:	d1f3      	bne.n	80a0be6 <_Z14reset_all_pinsv+0x6>
  }
 80a0bfe:	bd38      	pop	{r3, r4, r5, pc}
 80a0c00:	20000508 	.word	0x20000508

080a0c04 <_Z7countUp6String>:
  int delayTime = 500;
 80a0c04:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
{
 80a0c08:	b507      	push	{r0, r1, r2, lr}
  if (sscanf(cmd, "%d", &delayTime) == 1)
 80a0c0a:	4907      	ldr	r1, [pc, #28]	; (80a0c28 <_Z7countUp6String+0x24>)
 80a0c0c:	6800      	ldr	r0, [r0, #0]
 80a0c0e:	aa01      	add	r2, sp, #4
  int delayTime = 500;
 80a0c10:	9301      	str	r3, [sp, #4]
  if (sscanf(cmd, "%d", &delayTime) == 1)
 80a0c12:	f001 f8e1 	bl	80a1dd8 <sscanf>
 80a0c16:	2801      	cmp	r0, #1
 80a0c18:	d10c      	bne.n	80a0c34 <_Z7countUp6String+0x30>
    Log.info("delayTime=%d", delayTime);
 80a0c1a:	9a01      	ldr	r2, [sp, #4]
 80a0c1c:	4903      	ldr	r1, [pc, #12]	; (80a0c2c <_Z7countUp6String+0x28>)
 80a0c1e:	4804      	ldr	r0, [pc, #16]	; (80a0c30 <_Z7countUp6String+0x2c>)
 80a0c20:	f7ff faa8 	bl	80a0174 <_ZNK5spark6Logger4infoEPKcz>
 80a0c24:	e006      	b.n	80a0c34 <_Z7countUp6String+0x30>
 80a0c26:	bf00      	nop
 80a0c28:	080a2af3 	.word	0x080a2af3
 80a0c2c:	080a2af6 	.word	0x080a2af6
 80a0c30:	200007c4 	.word	0x200007c4
  set_pins(D3, D7); // (0,0,0, Red)
 80a0c34:	2107      	movs	r1, #7
 80a0c36:	2003      	movs	r0, #3
 80a0c38:	f7ff fe86 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0c3c:	9801      	ldr	r0, [sp, #4]
 80a0c3e:	f001 f8db 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0c42:	f7ff ffcd 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A7, D3); // (0,0,1, Red)
 80a0c46:	2103      	movs	r1, #3
 80a0c48:	2011      	movs	r0, #17
 80a0c4a:	f7ff fe7d 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0c4e:	9801      	ldr	r0, [sp, #4]
 80a0c50:	f001 f8d2 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0c54:	f7ff ffc4 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A3, A7); // (0,0,2, Red)
 80a0c58:	2111      	movs	r1, #17
 80a0c5a:	200d      	movs	r0, #13
 80a0c5c:	f7ff fe74 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0c60:	9801      	ldr	r0, [sp, #4]
 80a0c62:	f001 f8c9 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0c66:	f7ff ffbb 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D7, A3); // (0,0,3, Red)
 80a0c6a:	210d      	movs	r1, #13
 80a0c6c:	2007      	movs	r0, #7
 80a0c6e:	f7ff fe6b 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0c72:	9801      	ldr	r0, [sp, #4]
 80a0c74:	f001 f8c0 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0c78:	f7ff ffb2 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D2, D7); // (0,1,0, Red)
 80a0c7c:	2107      	movs	r1, #7
 80a0c7e:	2002      	movs	r0, #2
 80a0c80:	f7ff fe62 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0c84:	9801      	ldr	r0, [sp, #4]
 80a0c86:	f001 f8b7 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0c8a:	f7ff ffa9 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A6, D2); // (0,1,1, Red)
 80a0c8e:	2102      	movs	r1, #2
 80a0c90:	2010      	movs	r0, #16
 80a0c92:	f7ff fe59 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0c96:	9801      	ldr	r0, [sp, #4]
 80a0c98:	f001 f8ae 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0c9c:	f7ff ffa0 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A2, A6); // (0,1,2, Red)
 80a0ca0:	2110      	movs	r1, #16
 80a0ca2:	200c      	movs	r0, #12
 80a0ca4:	f7ff fe50 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0ca8:	9801      	ldr	r0, [sp, #4]
 80a0caa:	f001 f8a5 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0cae:	f7ff ff97 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D7, A2); // (0,1,3, Red)
 80a0cb2:	210c      	movs	r1, #12
 80a0cb4:	2007      	movs	r0, #7
 80a0cb6:	f7ff fe47 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0cba:	9801      	ldr	r0, [sp, #4]
 80a0cbc:	f001 f89c 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0cc0:	f7ff ff8e 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D1, D7); // (0,2,0, Red)
 80a0cc4:	2107      	movs	r1, #7
 80a0cc6:	2001      	movs	r0, #1
 80a0cc8:	f7ff fe3e 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0ccc:	9801      	ldr	r0, [sp, #4]
 80a0cce:	f001 f893 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0cd2:	f7ff ff85 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A5, D1); // (0,2,1, Red)
 80a0cd6:	2101      	movs	r1, #1
 80a0cd8:	200f      	movs	r0, #15
 80a0cda:	f7ff fe35 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0cde:	9801      	ldr	r0, [sp, #4]
 80a0ce0:	f001 f88a 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0ce4:	f7ff ff7c 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A1, A5); // (0,2,2, Red)
 80a0ce8:	210f      	movs	r1, #15
 80a0cea:	200b      	movs	r0, #11
 80a0cec:	f7ff fe2c 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0cf0:	9801      	ldr	r0, [sp, #4]
 80a0cf2:	f001 f881 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0cf6:	f7ff ff73 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D7, A1); // (0,2,3, Red)
 80a0cfa:	210b      	movs	r1, #11
 80a0cfc:	2007      	movs	r0, #7
 80a0cfe:	f7ff fe23 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0d02:	9801      	ldr	r0, [sp, #4]
 80a0d04:	f001 f878 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0d08:	f7ff ff6a 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D0, D7); // (0,3,0, Red)
 80a0d0c:	2107      	movs	r1, #7
 80a0d0e:	2000      	movs	r0, #0
 80a0d10:	f7ff fe1a 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0d14:	9801      	ldr	r0, [sp, #4]
 80a0d16:	f001 f86f 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0d1a:	f7ff ff61 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A4, D0); // (0,3,1, Red)
 80a0d1e:	2100      	movs	r1, #0
 80a0d20:	200e      	movs	r0, #14
 80a0d22:	f7ff fe11 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0d26:	9801      	ldr	r0, [sp, #4]
 80a0d28:	f001 f866 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0d2c:	f7ff ff58 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A0, A4); // (0,3,2, Red)
 80a0d30:	210e      	movs	r1, #14
 80a0d32:	200a      	movs	r0, #10
 80a0d34:	f7ff fe08 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0d38:	9801      	ldr	r0, [sp, #4]
 80a0d3a:	f001 f85d 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0d3e:	f7ff ff4f 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D7, A0); // (0,3,3, Red)
 80a0d42:	210a      	movs	r1, #10
 80a0d44:	2007      	movs	r0, #7
 80a0d46:	f7ff fdff 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0d4a:	9801      	ldr	r0, [sp, #4]
 80a0d4c:	f001 f854 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0d50:	f7ff ff46 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D3, D6); // (1,0,0, Red)
 80a0d54:	2106      	movs	r1, #6
 80a0d56:	2003      	movs	r0, #3
 80a0d58:	f7ff fdf6 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0d5c:	9801      	ldr	r0, [sp, #4]
 80a0d5e:	f001 f84b 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0d62:	f7ff ff3d 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A4, D3); // (1,0,1, Red)
 80a0d66:	2103      	movs	r1, #3
 80a0d68:	200e      	movs	r0, #14
 80a0d6a:	f7ff fded 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0d6e:	9801      	ldr	r0, [sp, #4]
 80a0d70:	f001 f842 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0d74:	f7ff ff34 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A2, A4); // (1,0,2, Red)
 80a0d78:	210e      	movs	r1, #14
 80a0d7a:	200c      	movs	r0, #12
 80a0d7c:	f7ff fde4 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0d80:	9801      	ldr	r0, [sp, #4]
 80a0d82:	f001 f839 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0d86:	f7ff ff2b 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D6, A2); // (1,0,3, Red)
 80a0d8a:	210c      	movs	r1, #12
 80a0d8c:	2006      	movs	r0, #6
 80a0d8e:	f7ff fddb 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0d92:	9801      	ldr	r0, [sp, #4]
 80a0d94:	f001 f830 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0d98:	f7ff ff22 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D2, D6); // (1,1,0, Red)
 80a0d9c:	2106      	movs	r1, #6
 80a0d9e:	2002      	movs	r0, #2
 80a0da0:	f7ff fdd2 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0da4:	9801      	ldr	r0, [sp, #4]
 80a0da6:	f001 f827 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0daa:	f7ff ff19 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A5, D2); // (1,1,1, Red)
 80a0dae:	2102      	movs	r1, #2
 80a0db0:	200f      	movs	r0, #15
 80a0db2:	f7ff fdc9 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0db6:	9801      	ldr	r0, [sp, #4]
 80a0db8:	f001 f81e 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0dbc:	f7ff ff10 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A3, A5); // (1,1,2, Red)
 80a0dc0:	210f      	movs	r1, #15
 80a0dc2:	200d      	movs	r0, #13
 80a0dc4:	f7ff fdc0 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0dc8:	9801      	ldr	r0, [sp, #4]
 80a0dca:	f001 f815 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0dce:	f7ff ff07 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D6, A3); // (1,1,3, Red)
 80a0dd2:	210d      	movs	r1, #13
 80a0dd4:	2006      	movs	r0, #6
 80a0dd6:	f7ff fdb7 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0dda:	9801      	ldr	r0, [sp, #4]
 80a0ddc:	f001 f80c 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0de0:	f7ff fefe 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D1, D6); // (1,2,0, Red)
 80a0de4:	2106      	movs	r1, #6
 80a0de6:	2001      	movs	r0, #1
 80a0de8:	f7ff fdae 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0dec:	9801      	ldr	r0, [sp, #4]
 80a0dee:	f001 f803 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0df2:	f7ff fef5 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A6, D1); // (1,2,1, Red)
 80a0df6:	2101      	movs	r1, #1
 80a0df8:	2010      	movs	r0, #16
 80a0dfa:	f7ff fda5 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0dfe:	9801      	ldr	r0, [sp, #4]
 80a0e00:	f000 fffa 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0e04:	f7ff feec 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A0, A6); // (1,2,2, Red)
 80a0e08:	2110      	movs	r1, #16
 80a0e0a:	200a      	movs	r0, #10
 80a0e0c:	f7ff fd9c 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0e10:	9801      	ldr	r0, [sp, #4]
 80a0e12:	f000 fff1 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0e16:	f7ff fee3 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D6, A0); // (1,2,3, Red)
 80a0e1a:	210a      	movs	r1, #10
 80a0e1c:	2006      	movs	r0, #6
 80a0e1e:	f7ff fd93 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0e22:	9801      	ldr	r0, [sp, #4]
 80a0e24:	f000 ffe8 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0e28:	f7ff feda 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D0, D6); // (1,3,0, Red)
 80a0e2c:	2106      	movs	r1, #6
 80a0e2e:	2000      	movs	r0, #0
 80a0e30:	f7ff fd8a 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0e34:	9801      	ldr	r0, [sp, #4]
 80a0e36:	f000 ffdf 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0e3a:	f7ff fed1 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A7, D0); // (1,3,1, Red)
 80a0e3e:	2100      	movs	r1, #0
 80a0e40:	2011      	movs	r0, #17
 80a0e42:	f7ff fd81 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0e46:	9801      	ldr	r0, [sp, #4]
 80a0e48:	f000 ffd6 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0e4c:	f7ff fec8 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A1, A7); // (1,3,2, Red)
 80a0e50:	2111      	movs	r1, #17
 80a0e52:	200b      	movs	r0, #11
 80a0e54:	f7ff fd78 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0e58:	9801      	ldr	r0, [sp, #4]
 80a0e5a:	f000 ffcd 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0e5e:	f7ff febf 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D6, A1); // (1,3,3, Red)
 80a0e62:	210b      	movs	r1, #11
 80a0e64:	2006      	movs	r0, #6
 80a0e66:	f7ff fd6f 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0e6a:	9801      	ldr	r0, [sp, #4]
 80a0e6c:	f000 ffc4 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0e70:	f7ff feb6 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D3, D5); // (2,0,0, Red)
 80a0e74:	2105      	movs	r1, #5
 80a0e76:	2003      	movs	r0, #3
 80a0e78:	f7ff fd66 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0e7c:	9801      	ldr	r0, [sp, #4]
 80a0e7e:	f000 ffbb 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0e82:	f7ff fead 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A6, D3); // (2,0,1, Red)
 80a0e86:	2103      	movs	r1, #3
 80a0e88:	2010      	movs	r0, #16
 80a0e8a:	f7ff fd5d 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0e8e:	9801      	ldr	r0, [sp, #4]
 80a0e90:	f000 ffb2 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0e94:	f7ff fea4 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A1, A6); // (2,0,2, Red)
 80a0e98:	2110      	movs	r1, #16
 80a0e9a:	200b      	movs	r0, #11
 80a0e9c:	f7ff fd54 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0ea0:	9801      	ldr	r0, [sp, #4]
 80a0ea2:	f000 ffa9 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0ea6:	f7ff fe9b 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D5, A1); // (2,0,3, Red)
 80a0eaa:	210b      	movs	r1, #11
 80a0eac:	2005      	movs	r0, #5
 80a0eae:	f7ff fd4b 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0eb2:	9801      	ldr	r0, [sp, #4]
 80a0eb4:	f000 ffa0 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0eb8:	f7ff fe92 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D2, D5); // (2,1,0, Red)
 80a0ebc:	2105      	movs	r1, #5
 80a0ebe:	2002      	movs	r0, #2
 80a0ec0:	f7ff fd42 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0ec4:	9801      	ldr	r0, [sp, #4]
 80a0ec6:	f000 ff97 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0eca:	f7ff fe89 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A7, D2); // (2,1,1, Red)
 80a0ece:	2102      	movs	r1, #2
 80a0ed0:	2011      	movs	r0, #17
 80a0ed2:	f7ff fd39 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0ed6:	9801      	ldr	r0, [sp, #4]
 80a0ed8:	f000 ff8e 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0edc:	f7ff fe80 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A0, A7); // (2,1,2, Red)
 80a0ee0:	2111      	movs	r1, #17
 80a0ee2:	200a      	movs	r0, #10
 80a0ee4:	f7ff fd30 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0ee8:	9801      	ldr	r0, [sp, #4]
 80a0eea:	f000 ff85 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0eee:	f7ff fe77 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D5, A0); // (2,1,3, Red)
 80a0ef2:	210a      	movs	r1, #10
 80a0ef4:	2005      	movs	r0, #5
 80a0ef6:	f7ff fd27 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0efa:	9801      	ldr	r0, [sp, #4]
 80a0efc:	f000 ff7c 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0f00:	f7ff fe6e 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D1, D5); // (2,2,0, Red)
 80a0f04:	2105      	movs	r1, #5
 80a0f06:	2001      	movs	r0, #1
 80a0f08:	f7ff fd1e 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0f0c:	9801      	ldr	r0, [sp, #4]
 80a0f0e:	f000 ff73 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0f12:	f7ff fe65 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A4, D1); // (2,2,1, Red)
 80a0f16:	2101      	movs	r1, #1
 80a0f18:	200e      	movs	r0, #14
 80a0f1a:	f7ff fd15 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0f1e:	9801      	ldr	r0, [sp, #4]
 80a0f20:	f000 ff6a 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0f24:	f7ff fe5c 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A3, A4); // (2,2,2, Red)
 80a0f28:	210e      	movs	r1, #14
 80a0f2a:	200d      	movs	r0, #13
 80a0f2c:	f7ff fd0c 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0f30:	9801      	ldr	r0, [sp, #4]
 80a0f32:	f000 ff61 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0f36:	f7ff fe53 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D5, A3); // (2,2,3, Red)
 80a0f3a:	210d      	movs	r1, #13
 80a0f3c:	2005      	movs	r0, #5
 80a0f3e:	f7ff fd03 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0f42:	9801      	ldr	r0, [sp, #4]
 80a0f44:	f000 ff58 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0f48:	f7ff fe4a 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D0, D5); // (2,3,0, Red)
 80a0f4c:	2105      	movs	r1, #5
 80a0f4e:	2000      	movs	r0, #0
 80a0f50:	f7ff fcfa 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0f54:	9801      	ldr	r0, [sp, #4]
 80a0f56:	f000 ff4f 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0f5a:	f7ff fe41 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A5, D0); // (2,3,1, Red)
 80a0f5e:	2100      	movs	r1, #0
 80a0f60:	200f      	movs	r0, #15
 80a0f62:	f7ff fcf1 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0f66:	9801      	ldr	r0, [sp, #4]
 80a0f68:	f000 ff46 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0f6c:	f7ff fe38 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A2, A5); // (2,3,2, Red)
 80a0f70:	210f      	movs	r1, #15
 80a0f72:	200c      	movs	r0, #12
 80a0f74:	f7ff fce8 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0f78:	9801      	ldr	r0, [sp, #4]
 80a0f7a:	f000 ff3d 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0f7e:	f7ff fe2f 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D5, A2); // (2,3,3, Red)
 80a0f82:	210c      	movs	r1, #12
 80a0f84:	2005      	movs	r0, #5
 80a0f86:	f7ff fcdf 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0f8a:	9801      	ldr	r0, [sp, #4]
 80a0f8c:	f000 ff34 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0f90:	f7ff fe26 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D3, D4); // (3,0,0, Red)
 80a0f94:	2104      	movs	r1, #4
 80a0f96:	2003      	movs	r0, #3
 80a0f98:	f7ff fcd6 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0f9c:	9801      	ldr	r0, [sp, #4]
 80a0f9e:	f000 ff2b 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0fa2:	f7ff fe1d 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A5, D3); // (3,0,1, Red)
 80a0fa6:	2103      	movs	r1, #3
 80a0fa8:	200f      	movs	r0, #15
 80a0faa:	f7ff fccd 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0fae:	9801      	ldr	r0, [sp, #4]
 80a0fb0:	f000 ff22 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0fb4:	f7ff fe14 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A0, A5); // (3,0,2, Red)
 80a0fb8:	210f      	movs	r1, #15
 80a0fba:	200a      	movs	r0, #10
 80a0fbc:	f7ff fcc4 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0fc0:	9801      	ldr	r0, [sp, #4]
 80a0fc2:	f000 ff19 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0fc6:	f7ff fe0b 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D4, A0); // (3,0,3, Red)
 80a0fca:	210a      	movs	r1, #10
 80a0fcc:	2004      	movs	r0, #4
 80a0fce:	f7ff fcbb 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0fd2:	9801      	ldr	r0, [sp, #4]
 80a0fd4:	f000 ff10 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0fd8:	f7ff fe02 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D2, D4); // (3,1,0, Red)
 80a0fdc:	2104      	movs	r1, #4
 80a0fde:	2002      	movs	r0, #2
 80a0fe0:	f7ff fcb2 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0fe4:	9801      	ldr	r0, [sp, #4]
 80a0fe6:	f000 ff07 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0fea:	f7ff fdf9 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A4, D2); // (3,1,1, Red)
 80a0fee:	2102      	movs	r1, #2
 80a0ff0:	200e      	movs	r0, #14
 80a0ff2:	f7ff fca9 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a0ff6:	9801      	ldr	r0, [sp, #4]
 80a0ff8:	f000 fefe 	bl	80a1df8 <delay>
  reset_all_pins();
 80a0ffc:	f7ff fdf0 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A1, A4); // (3,1,2, Red)
 80a1000:	210e      	movs	r1, #14
 80a1002:	200b      	movs	r0, #11
 80a1004:	f7ff fca0 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1008:	9801      	ldr	r0, [sp, #4]
 80a100a:	f000 fef5 	bl	80a1df8 <delay>
  reset_all_pins();
 80a100e:	f7ff fde7 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D4, A1); // (3,1,3, Red)
 80a1012:	210b      	movs	r1, #11
 80a1014:	2004      	movs	r0, #4
 80a1016:	f7ff fc97 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a101a:	9801      	ldr	r0, [sp, #4]
 80a101c:	f000 feec 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1020:	f7ff fdde 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D1, D4); // (3,2,0, Red)
 80a1024:	2104      	movs	r1, #4
 80a1026:	2001      	movs	r0, #1
 80a1028:	f7ff fc8e 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a102c:	9801      	ldr	r0, [sp, #4]
 80a102e:	f000 fee3 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1032:	f7ff fdd5 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A7, D1); // (3,2,1, Red)
 80a1036:	2101      	movs	r1, #1
 80a1038:	2011      	movs	r0, #17
 80a103a:	f7ff fc85 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a103e:	9801      	ldr	r0, [sp, #4]
 80a1040:	f000 feda 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1044:	f7ff fdcc 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A2, A7); // (3,2,2, Red)
 80a1048:	2111      	movs	r1, #17
 80a104a:	200c      	movs	r0, #12
 80a104c:	f7ff fc7c 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1050:	9801      	ldr	r0, [sp, #4]
 80a1052:	f000 fed1 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1056:	f7ff fdc3 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D4, A2); // (3,2,3, Red)
 80a105a:	210c      	movs	r1, #12
 80a105c:	2004      	movs	r0, #4
 80a105e:	f7ff fc73 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1062:	9801      	ldr	r0, [sp, #4]
 80a1064:	f000 fec8 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1068:	f7ff fdba 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D0, D4); // (3,3,0, Red)
 80a106c:	2104      	movs	r1, #4
 80a106e:	2000      	movs	r0, #0
 80a1070:	f7ff fc6a 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1074:	9801      	ldr	r0, [sp, #4]
 80a1076:	f000 febf 	bl	80a1df8 <delay>
  reset_all_pins();
 80a107a:	f7ff fdb1 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A6, D0); // (3,3,1, Red)
 80a107e:	2100      	movs	r1, #0
 80a1080:	2010      	movs	r0, #16
 80a1082:	f7ff fc61 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1086:	9801      	ldr	r0, [sp, #4]
 80a1088:	f000 feb6 	bl	80a1df8 <delay>
  reset_all_pins();
 80a108c:	f7ff fda8 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A3, A6); // (3,3,2, Red)
 80a1090:	2110      	movs	r1, #16
 80a1092:	200d      	movs	r0, #13
 80a1094:	f7ff fc58 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1098:	9801      	ldr	r0, [sp, #4]
 80a109a:	f000 fead 	bl	80a1df8 <delay>
  reset_all_pins();
 80a109e:	f7ff fd9f 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D4, A3); // (3,3,3, Red)
 80a10a2:	210d      	movs	r1, #13
 80a10a4:	2004      	movs	r0, #4
 80a10a6:	f7ff fc4f 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a10aa:	9801      	ldr	r0, [sp, #4]
 80a10ac:	f000 fea4 	bl	80a1df8 <delay>
  reset_all_pins();
 80a10b0:	f7ff fd96 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D3, A3); // (0,0,0, Green)
 80a10b4:	210d      	movs	r1, #13
 80a10b6:	2003      	movs	r0, #3
 80a10b8:	f7ff fc46 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a10bc:	9801      	ldr	r0, [sp, #4]
 80a10be:	f000 fe9b 	bl	80a1df8 <delay>
  reset_all_pins();
 80a10c2:	f7ff fd8d 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A7, D7); // (0,0,1, Green)
 80a10c6:	2107      	movs	r1, #7
 80a10c8:	2011      	movs	r0, #17
 80a10ca:	f7ff fc3d 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a10ce:	9801      	ldr	r0, [sp, #4]
 80a10d0:	f000 fe92 	bl	80a1df8 <delay>
  reset_all_pins();
 80a10d4:	f7ff fd84 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A3, D3); // (0,0,2, Green)
 80a10d8:	2103      	movs	r1, #3
 80a10da:	200d      	movs	r0, #13
 80a10dc:	f7ff fc34 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a10e0:	9801      	ldr	r0, [sp, #4]
 80a10e2:	f000 fe89 	bl	80a1df8 <delay>
  reset_all_pins();
 80a10e6:	f7ff fd7b 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D7, A7); // (0,0,3, Green)
 80a10ea:	2111      	movs	r1, #17
 80a10ec:	2007      	movs	r0, #7
 80a10ee:	f7ff fc2b 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a10f2:	9801      	ldr	r0, [sp, #4]
 80a10f4:	f000 fe80 	bl	80a1df8 <delay>
  reset_all_pins();
 80a10f8:	f7ff fd72 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D2, A2); // (0,1,0, Green)
 80a10fc:	210c      	movs	r1, #12
 80a10fe:	2002      	movs	r0, #2
 80a1100:	f7ff fc22 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1104:	9801      	ldr	r0, [sp, #4]
 80a1106:	f000 fe77 	bl	80a1df8 <delay>
  reset_all_pins();
 80a110a:	f7ff fd69 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A6, D7); // (0,1,1, Green)
 80a110e:	2107      	movs	r1, #7
 80a1110:	2010      	movs	r0, #16
 80a1112:	f7ff fc19 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1116:	9801      	ldr	r0, [sp, #4]
 80a1118:	f000 fe6e 	bl	80a1df8 <delay>
  reset_all_pins();
 80a111c:	f7ff fd60 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A2, D2); // (0,1,2, Green)
 80a1120:	2102      	movs	r1, #2
 80a1122:	200c      	movs	r0, #12
 80a1124:	f7ff fc10 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1128:	9801      	ldr	r0, [sp, #4]
 80a112a:	f000 fe65 	bl	80a1df8 <delay>
  reset_all_pins();
 80a112e:	f7ff fd57 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D7, A6); // (0,1,3, Green)
 80a1132:	2110      	movs	r1, #16
 80a1134:	2007      	movs	r0, #7
 80a1136:	f7ff fc07 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a113a:	9801      	ldr	r0, [sp, #4]
 80a113c:	f000 fe5c 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1140:	f7ff fd4e 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D1, A1); // (0,2,0, Green)
 80a1144:	210b      	movs	r1, #11
 80a1146:	2001      	movs	r0, #1
 80a1148:	f7ff fbfe 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a114c:	9801      	ldr	r0, [sp, #4]
 80a114e:	f000 fe53 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1152:	f7ff fd45 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A5, D7); // (0,2,1, Green)
 80a1156:	2107      	movs	r1, #7
 80a1158:	200f      	movs	r0, #15
 80a115a:	f7ff fbf5 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a115e:	9801      	ldr	r0, [sp, #4]
 80a1160:	f000 fe4a 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1164:	f7ff fd3c 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A1, D1); // (0,2,2, Green)
 80a1168:	2101      	movs	r1, #1
 80a116a:	200b      	movs	r0, #11
 80a116c:	f7ff fbec 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1170:	9801      	ldr	r0, [sp, #4]
 80a1172:	f000 fe41 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1176:	f7ff fd33 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D7, A5); // (0,2,3, Green)
 80a117a:	210f      	movs	r1, #15
 80a117c:	2007      	movs	r0, #7
 80a117e:	f7ff fbe3 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1182:	9801      	ldr	r0, [sp, #4]
 80a1184:	f000 fe38 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1188:	f7ff fd2a 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D0, A0); // (0,3,0, Green)
 80a118c:	210a      	movs	r1, #10
 80a118e:	2000      	movs	r0, #0
 80a1190:	f7ff fbda 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1194:	9801      	ldr	r0, [sp, #4]
 80a1196:	f000 fe2f 	bl	80a1df8 <delay>
  reset_all_pins();
 80a119a:	f7ff fd21 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A4, D7); // (0,3,1, Green)
 80a119e:	2107      	movs	r1, #7
 80a11a0:	200e      	movs	r0, #14
 80a11a2:	f7ff fbd1 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a11a6:	9801      	ldr	r0, [sp, #4]
 80a11a8:	f000 fe26 	bl	80a1df8 <delay>
  reset_all_pins();
 80a11ac:	f7ff fd18 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A0, D0); // (0,3,2, Green)
 80a11b0:	2100      	movs	r1, #0
 80a11b2:	200a      	movs	r0, #10
 80a11b4:	f7ff fbc8 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a11b8:	9801      	ldr	r0, [sp, #4]
 80a11ba:	f000 fe1d 	bl	80a1df8 <delay>
  reset_all_pins();
 80a11be:	f7ff fd0f 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D7, A4); // (0,3,3, Green)
 80a11c2:	210e      	movs	r1, #14
 80a11c4:	2007      	movs	r0, #7
 80a11c6:	f7ff fbbf 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a11ca:	9801      	ldr	r0, [sp, #4]
 80a11cc:	f000 fe14 	bl	80a1df8 <delay>
  reset_all_pins();
 80a11d0:	f7ff fd06 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D3, A2); // (1,0,0, Green)
 80a11d4:	210c      	movs	r1, #12
 80a11d6:	2003      	movs	r0, #3
 80a11d8:	f7ff fbb6 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a11dc:	9801      	ldr	r0, [sp, #4]
 80a11de:	f000 fe0b 	bl	80a1df8 <delay>
  reset_all_pins();
 80a11e2:	f7ff fcfd 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A4, D6); // (1,0,1, Green)
 80a11e6:	2106      	movs	r1, #6
 80a11e8:	200e      	movs	r0, #14
 80a11ea:	f7ff fbad 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a11ee:	9801      	ldr	r0, [sp, #4]
 80a11f0:	f000 fe02 	bl	80a1df8 <delay>
  reset_all_pins();
 80a11f4:	f7ff fcf4 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A2, D3); // (1,0,2, Green)
 80a11f8:	2103      	movs	r1, #3
 80a11fa:	200c      	movs	r0, #12
 80a11fc:	f7ff fba4 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1200:	9801      	ldr	r0, [sp, #4]
 80a1202:	f000 fdf9 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1206:	f7ff fceb 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D6, A4); // (1,0,3, Green)
 80a120a:	210e      	movs	r1, #14
 80a120c:	2006      	movs	r0, #6
 80a120e:	f7ff fb9b 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1212:	9801      	ldr	r0, [sp, #4]
 80a1214:	f000 fdf0 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1218:	f7ff fce2 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D2, A3); // (1,1,0, Green)
 80a121c:	210d      	movs	r1, #13
 80a121e:	2002      	movs	r0, #2
 80a1220:	f7ff fb92 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1224:	9801      	ldr	r0, [sp, #4]
 80a1226:	f000 fde7 	bl	80a1df8 <delay>
  reset_all_pins();
 80a122a:	f7ff fcd9 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A5, D6); // (1,1,1, Green)
 80a122e:	2106      	movs	r1, #6
 80a1230:	200f      	movs	r0, #15
 80a1232:	f7ff fb89 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1236:	9801      	ldr	r0, [sp, #4]
 80a1238:	f000 fdde 	bl	80a1df8 <delay>
  reset_all_pins();
 80a123c:	f7ff fcd0 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A3, D2); // (1,1,2, Green)
 80a1240:	2102      	movs	r1, #2
 80a1242:	200d      	movs	r0, #13
 80a1244:	f7ff fb80 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1248:	9801      	ldr	r0, [sp, #4]
 80a124a:	f000 fdd5 	bl	80a1df8 <delay>
  reset_all_pins();
 80a124e:	f7ff fcc7 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D6, A5); // (1,1,3, Green)
 80a1252:	210f      	movs	r1, #15
 80a1254:	2006      	movs	r0, #6
 80a1256:	f7ff fb77 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a125a:	9801      	ldr	r0, [sp, #4]
 80a125c:	f000 fdcc 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1260:	f7ff fcbe 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D1, A0); // (1,2,0, Green)
 80a1264:	210a      	movs	r1, #10
 80a1266:	2001      	movs	r0, #1
 80a1268:	f7ff fb6e 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a126c:	9801      	ldr	r0, [sp, #4]
 80a126e:	f000 fdc3 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1272:	f7ff fcb5 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A6, D6); // (1,2,1, Green)
 80a1276:	2106      	movs	r1, #6
 80a1278:	2010      	movs	r0, #16
 80a127a:	f7ff fb65 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a127e:	9801      	ldr	r0, [sp, #4]
 80a1280:	f000 fdba 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1284:	f7ff fcac 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A0, D1); // (1,2,2, Green)
 80a1288:	2101      	movs	r1, #1
 80a128a:	200a      	movs	r0, #10
 80a128c:	f7ff fb5c 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1290:	9801      	ldr	r0, [sp, #4]
 80a1292:	f000 fdb1 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1296:	f7ff fca3 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D6, A6); // (1,2,3, Green)
 80a129a:	2110      	movs	r1, #16
 80a129c:	2006      	movs	r0, #6
 80a129e:	f7ff fb53 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a12a2:	9801      	ldr	r0, [sp, #4]
 80a12a4:	f000 fda8 	bl	80a1df8 <delay>
  reset_all_pins();
 80a12a8:	f7ff fc9a 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D0, A1); // (1,3,0, Green)
 80a12ac:	210b      	movs	r1, #11
 80a12ae:	2000      	movs	r0, #0
 80a12b0:	f7ff fb4a 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a12b4:	9801      	ldr	r0, [sp, #4]
 80a12b6:	f000 fd9f 	bl	80a1df8 <delay>
  reset_all_pins();
 80a12ba:	f7ff fc91 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A7, D6); // (1,3,1, Green)
 80a12be:	2106      	movs	r1, #6
 80a12c0:	2011      	movs	r0, #17
 80a12c2:	f7ff fb41 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a12c6:	9801      	ldr	r0, [sp, #4]
 80a12c8:	f000 fd96 	bl	80a1df8 <delay>
  reset_all_pins();
 80a12cc:	f7ff fc88 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A1, D0); // (1,3,2, Green)
 80a12d0:	2100      	movs	r1, #0
 80a12d2:	200b      	movs	r0, #11
 80a12d4:	f7ff fb38 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a12d8:	9801      	ldr	r0, [sp, #4]
 80a12da:	f000 fd8d 	bl	80a1df8 <delay>
  reset_all_pins();
 80a12de:	f7ff fc7f 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D6, A7); // (1,3,3, Green)
 80a12e2:	2111      	movs	r1, #17
 80a12e4:	2006      	movs	r0, #6
 80a12e6:	f7ff fb2f 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a12ea:	9801      	ldr	r0, [sp, #4]
 80a12ec:	f000 fd84 	bl	80a1df8 <delay>
  reset_all_pins();
 80a12f0:	f7ff fc76 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D3, A1); // (2,0,0, Green)
 80a12f4:	210b      	movs	r1, #11
 80a12f6:	2003      	movs	r0, #3
 80a12f8:	f7ff fb26 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a12fc:	9801      	ldr	r0, [sp, #4]
 80a12fe:	f000 fd7b 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1302:	f7ff fc6d 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A6, D5); // (2,0,1, Green)
 80a1306:	2105      	movs	r1, #5
 80a1308:	2010      	movs	r0, #16
 80a130a:	f7ff fb1d 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a130e:	9801      	ldr	r0, [sp, #4]
 80a1310:	f000 fd72 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1314:	f7ff fc64 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A1, D3); // (2,0,2, Green)
 80a1318:	2103      	movs	r1, #3
 80a131a:	200b      	movs	r0, #11
 80a131c:	f7ff fb14 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1320:	9801      	ldr	r0, [sp, #4]
 80a1322:	f000 fd69 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1326:	f7ff fc5b 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D5, A6); // (2,0,3, Green)
 80a132a:	2110      	movs	r1, #16
 80a132c:	2005      	movs	r0, #5
 80a132e:	f7ff fb0b 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1332:	9801      	ldr	r0, [sp, #4]
 80a1334:	f000 fd60 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1338:	f7ff fc52 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D2, A0); // (2,1,0, Green)
 80a133c:	210a      	movs	r1, #10
 80a133e:	2002      	movs	r0, #2
 80a1340:	f7ff fb02 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1344:	9801      	ldr	r0, [sp, #4]
 80a1346:	f000 fd57 	bl	80a1df8 <delay>
  reset_all_pins();
 80a134a:	f7ff fc49 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A7, D5); // (2,1,1, Green)
 80a134e:	2105      	movs	r1, #5
 80a1350:	2011      	movs	r0, #17
 80a1352:	f7ff faf9 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1356:	9801      	ldr	r0, [sp, #4]
 80a1358:	f000 fd4e 	bl	80a1df8 <delay>
  reset_all_pins();
 80a135c:	f7ff fc40 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A0, D2); // (2,1,2, Green)
 80a1360:	2102      	movs	r1, #2
 80a1362:	200a      	movs	r0, #10
 80a1364:	f7ff faf0 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1368:	9801      	ldr	r0, [sp, #4]
 80a136a:	f000 fd45 	bl	80a1df8 <delay>
  reset_all_pins();
 80a136e:	f7ff fc37 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D5, A7); // (2,1,3, Green)
 80a1372:	2111      	movs	r1, #17
 80a1374:	2005      	movs	r0, #5
 80a1376:	f7ff fae7 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a137a:	9801      	ldr	r0, [sp, #4]
 80a137c:	f000 fd3c 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1380:	f7ff fc2e 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D1, A3); // (2,2,0, Green)
 80a1384:	210d      	movs	r1, #13
 80a1386:	2001      	movs	r0, #1
 80a1388:	f7ff fade 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a138c:	9801      	ldr	r0, [sp, #4]
 80a138e:	f000 fd33 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1392:	f7ff fc25 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A4, D5); // (2,2,1, Green)
 80a1396:	2105      	movs	r1, #5
 80a1398:	200e      	movs	r0, #14
 80a139a:	f7ff fad5 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a139e:	9801      	ldr	r0, [sp, #4]
 80a13a0:	f000 fd2a 	bl	80a1df8 <delay>
  reset_all_pins();
 80a13a4:	f7ff fc1c 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A3, D1); // (2,2,2, Green)
 80a13a8:	2101      	movs	r1, #1
 80a13aa:	200d      	movs	r0, #13
 80a13ac:	f7ff facc 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a13b0:	9801      	ldr	r0, [sp, #4]
 80a13b2:	f000 fd21 	bl	80a1df8 <delay>
  reset_all_pins();
 80a13b6:	f7ff fc13 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D5, A4); // (2,2,3, Green)
 80a13ba:	210e      	movs	r1, #14
 80a13bc:	2005      	movs	r0, #5
 80a13be:	f7ff fac3 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a13c2:	9801      	ldr	r0, [sp, #4]
 80a13c4:	f000 fd18 	bl	80a1df8 <delay>
  reset_all_pins();
 80a13c8:	f7ff fc0a 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D0, A2); // (2,3,0, Green)
 80a13cc:	210c      	movs	r1, #12
 80a13ce:	2000      	movs	r0, #0
 80a13d0:	f7ff faba 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a13d4:	9801      	ldr	r0, [sp, #4]
 80a13d6:	f000 fd0f 	bl	80a1df8 <delay>
  reset_all_pins();
 80a13da:	f7ff fc01 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A5, D5); // (2,3,1, Green)
 80a13de:	2105      	movs	r1, #5
 80a13e0:	200f      	movs	r0, #15
 80a13e2:	f7ff fab1 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a13e6:	9801      	ldr	r0, [sp, #4]
 80a13e8:	f000 fd06 	bl	80a1df8 <delay>
  reset_all_pins();
 80a13ec:	f7ff fbf8 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A2, D0); // (2,3,2, Green)
 80a13f0:	2100      	movs	r1, #0
 80a13f2:	200c      	movs	r0, #12
 80a13f4:	f7ff faa8 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a13f8:	9801      	ldr	r0, [sp, #4]
 80a13fa:	f000 fcfd 	bl	80a1df8 <delay>
  reset_all_pins();
 80a13fe:	f7ff fbef 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D5, A5); // (2,3,3, Green)
 80a1402:	210f      	movs	r1, #15
 80a1404:	2005      	movs	r0, #5
 80a1406:	f7ff fa9f 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a140a:	9801      	ldr	r0, [sp, #4]
 80a140c:	f000 fcf4 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1410:	f7ff fbe6 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D3, A0); // (3,0,0, Green)
 80a1414:	210a      	movs	r1, #10
 80a1416:	2003      	movs	r0, #3
 80a1418:	f7ff fa96 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a141c:	9801      	ldr	r0, [sp, #4]
 80a141e:	f000 fceb 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1422:	f7ff fbdd 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A5, D4); // (3,0,1, Green)
 80a1426:	2104      	movs	r1, #4
 80a1428:	200f      	movs	r0, #15
 80a142a:	f7ff fa8d 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a142e:	9801      	ldr	r0, [sp, #4]
 80a1430:	f000 fce2 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1434:	f7ff fbd4 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A0, D3); // (3,0,2, Green)
 80a1438:	2103      	movs	r1, #3
 80a143a:	200a      	movs	r0, #10
 80a143c:	f7ff fa84 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1440:	9801      	ldr	r0, [sp, #4]
 80a1442:	f000 fcd9 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1446:	f7ff fbcb 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D4, A5); // (3,0,3, Green)
 80a144a:	210f      	movs	r1, #15
 80a144c:	2004      	movs	r0, #4
 80a144e:	f7ff fa7b 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1452:	9801      	ldr	r0, [sp, #4]
 80a1454:	f000 fcd0 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1458:	f7ff fbc2 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D2, A1); // (3,1,0, Green)
 80a145c:	210b      	movs	r1, #11
 80a145e:	2002      	movs	r0, #2
 80a1460:	f7ff fa72 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1464:	9801      	ldr	r0, [sp, #4]
 80a1466:	f000 fcc7 	bl	80a1df8 <delay>
  reset_all_pins();
 80a146a:	f7ff fbb9 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A4, D4); // (3,1,1, Green)
 80a146e:	2104      	movs	r1, #4
 80a1470:	200e      	movs	r0, #14
 80a1472:	f7ff fa69 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1476:	9801      	ldr	r0, [sp, #4]
 80a1478:	f000 fcbe 	bl	80a1df8 <delay>
  reset_all_pins();
 80a147c:	f7ff fbb0 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A1, D2); // (3,1,2, Green)
 80a1480:	2102      	movs	r1, #2
 80a1482:	200b      	movs	r0, #11
 80a1484:	f7ff fa60 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1488:	9801      	ldr	r0, [sp, #4]
 80a148a:	f000 fcb5 	bl	80a1df8 <delay>
  reset_all_pins();
 80a148e:	f7ff fba7 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D4, A4); // (3,1,3, Green)
 80a1492:	210e      	movs	r1, #14
 80a1494:	2004      	movs	r0, #4
 80a1496:	f7ff fa57 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a149a:	9801      	ldr	r0, [sp, #4]
 80a149c:	f000 fcac 	bl	80a1df8 <delay>
  reset_all_pins();
 80a14a0:	f7ff fb9e 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D1, A2); // (3,2,0, Green)
 80a14a4:	210c      	movs	r1, #12
 80a14a6:	2001      	movs	r0, #1
 80a14a8:	f7ff fa4e 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a14ac:	9801      	ldr	r0, [sp, #4]
 80a14ae:	f000 fca3 	bl	80a1df8 <delay>
  reset_all_pins();
 80a14b2:	f7ff fb95 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A7, D4); // (3,2,1, Green)
 80a14b6:	2104      	movs	r1, #4
 80a14b8:	2011      	movs	r0, #17
 80a14ba:	f7ff fa45 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a14be:	9801      	ldr	r0, [sp, #4]
 80a14c0:	f000 fc9a 	bl	80a1df8 <delay>
  reset_all_pins();
 80a14c4:	f7ff fb8c 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A2, D1); // (3,2,2, Green)
 80a14c8:	2101      	movs	r1, #1
 80a14ca:	200c      	movs	r0, #12
 80a14cc:	f7ff fa3c 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a14d0:	9801      	ldr	r0, [sp, #4]
 80a14d2:	f000 fc91 	bl	80a1df8 <delay>
  reset_all_pins();
 80a14d6:	f7ff fb83 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D4, A7); // (3,2,3, Green)
 80a14da:	2111      	movs	r1, #17
 80a14dc:	2004      	movs	r0, #4
 80a14de:	f7ff fa33 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a14e2:	9801      	ldr	r0, [sp, #4]
 80a14e4:	f000 fc88 	bl	80a1df8 <delay>
  reset_all_pins();
 80a14e8:	f7ff fb7a 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D0, A3); // (3,3,0, Green)
 80a14ec:	210d      	movs	r1, #13
 80a14ee:	2000      	movs	r0, #0
 80a14f0:	f7ff fa2a 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a14f4:	9801      	ldr	r0, [sp, #4]
 80a14f6:	f000 fc7f 	bl	80a1df8 <delay>
  reset_all_pins();
 80a14fa:	f7ff fb71 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A6, D4); // (3,3,1, Green)
 80a14fe:	2104      	movs	r1, #4
 80a1500:	2010      	movs	r0, #16
 80a1502:	f7ff fa21 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1506:	9801      	ldr	r0, [sp, #4]
 80a1508:	f000 fc76 	bl	80a1df8 <delay>
  reset_all_pins();
 80a150c:	f7ff fb68 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A3, D0); // (3,3,2, Green)
 80a1510:	2100      	movs	r1, #0
 80a1512:	200d      	movs	r0, #13
 80a1514:	f7ff fa18 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1518:	9801      	ldr	r0, [sp, #4]
 80a151a:	f000 fc6d 	bl	80a1df8 <delay>
  reset_all_pins();
 80a151e:	f7ff fb5f 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D4, A6); // (3,3,3, Green)
 80a1522:	2110      	movs	r1, #16
 80a1524:	2004      	movs	r0, #4
 80a1526:	f7ff fa0f 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a152a:	9801      	ldr	r0, [sp, #4]
 80a152c:	f000 fc64 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1530:	f7ff fb56 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D3, A7); // (0,0,0, Blue)
 80a1534:	2111      	movs	r1, #17
 80a1536:	2003      	movs	r0, #3
 80a1538:	f7ff fa06 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a153c:	9801      	ldr	r0, [sp, #4]
 80a153e:	f000 fc5b 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1542:	f7ff fb4d 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A7, A3); // (0,0,1, Blue)
 80a1546:	210d      	movs	r1, #13
 80a1548:	2011      	movs	r0, #17
 80a154a:	f7ff f9fd 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a154e:	9801      	ldr	r0, [sp, #4]
 80a1550:	f000 fc52 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1554:	f7ff fb44 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A3, D7); // (0,0,2, Blue)
 80a1558:	2107      	movs	r1, #7
 80a155a:	200d      	movs	r0, #13
 80a155c:	f7ff f9f4 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1560:	9801      	ldr	r0, [sp, #4]
 80a1562:	f000 fc49 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1566:	f7ff fb3b 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D7, D3); // (0,0,3, Blue)
 80a156a:	2103      	movs	r1, #3
 80a156c:	2007      	movs	r0, #7
 80a156e:	f7ff f9eb 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1572:	9801      	ldr	r0, [sp, #4]
 80a1574:	f000 fc40 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1578:	f7ff fb32 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D2, A6); // (0,1,0, Blue)
 80a157c:	2110      	movs	r1, #16
 80a157e:	2002      	movs	r0, #2
 80a1580:	f7ff f9e2 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1584:	9801      	ldr	r0, [sp, #4]
 80a1586:	f000 fc37 	bl	80a1df8 <delay>
  reset_all_pins();
 80a158a:	f7ff fb29 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A6, A2); // (0,1,1, Blue)
 80a158e:	210c      	movs	r1, #12
 80a1590:	2010      	movs	r0, #16
 80a1592:	f7ff f9d9 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1596:	9801      	ldr	r0, [sp, #4]
 80a1598:	f000 fc2e 	bl	80a1df8 <delay>
  reset_all_pins();
 80a159c:	f7ff fb20 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A2, D7); // (0,1,2, Blue)
 80a15a0:	2107      	movs	r1, #7
 80a15a2:	200c      	movs	r0, #12
 80a15a4:	f7ff f9d0 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a15a8:	9801      	ldr	r0, [sp, #4]
 80a15aa:	f000 fc25 	bl	80a1df8 <delay>
  reset_all_pins();
 80a15ae:	f7ff fb17 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D7, D2); // (0,1,3, Blue)
 80a15b2:	2102      	movs	r1, #2
 80a15b4:	2007      	movs	r0, #7
 80a15b6:	f7ff f9c7 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a15ba:	9801      	ldr	r0, [sp, #4]
 80a15bc:	f000 fc1c 	bl	80a1df8 <delay>
  reset_all_pins();
 80a15c0:	f7ff fb0e 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D1, A5); // (0,2,0, Blue)
 80a15c4:	210f      	movs	r1, #15
 80a15c6:	2001      	movs	r0, #1
 80a15c8:	f7ff f9be 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a15cc:	9801      	ldr	r0, [sp, #4]
 80a15ce:	f000 fc13 	bl	80a1df8 <delay>
  reset_all_pins();
 80a15d2:	f7ff fb05 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A5, A1); // (0,2,1, Blue)
 80a15d6:	210b      	movs	r1, #11
 80a15d8:	200f      	movs	r0, #15
 80a15da:	f7ff f9b5 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a15de:	9801      	ldr	r0, [sp, #4]
 80a15e0:	f000 fc0a 	bl	80a1df8 <delay>
  reset_all_pins();
 80a15e4:	f7ff fafc 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A1, D7); // (0,2,2, Blue)
 80a15e8:	2107      	movs	r1, #7
 80a15ea:	200b      	movs	r0, #11
 80a15ec:	f7ff f9ac 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a15f0:	9801      	ldr	r0, [sp, #4]
 80a15f2:	f000 fc01 	bl	80a1df8 <delay>
  reset_all_pins();
 80a15f6:	f7ff faf3 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D7, D1); // (0,2,3, Blue)
 80a15fa:	2101      	movs	r1, #1
 80a15fc:	2007      	movs	r0, #7
 80a15fe:	f7ff f9a3 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1602:	9801      	ldr	r0, [sp, #4]
 80a1604:	f000 fbf8 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1608:	f7ff faea 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D0, A4); // (0,3,0, Blue)
 80a160c:	210e      	movs	r1, #14
 80a160e:	2000      	movs	r0, #0
 80a1610:	f7ff f99a 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1614:	9801      	ldr	r0, [sp, #4]
 80a1616:	f000 fbef 	bl	80a1df8 <delay>
  reset_all_pins();
 80a161a:	f7ff fae1 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A4, A0); // (0,3,1, Blue)
 80a161e:	210a      	movs	r1, #10
 80a1620:	200e      	movs	r0, #14
 80a1622:	f7ff f991 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1626:	9801      	ldr	r0, [sp, #4]
 80a1628:	f000 fbe6 	bl	80a1df8 <delay>
  reset_all_pins();
 80a162c:	f7ff fad8 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A0, D7); // (0,3,2, Blue)
 80a1630:	2107      	movs	r1, #7
 80a1632:	200a      	movs	r0, #10
 80a1634:	f7ff f988 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1638:	9801      	ldr	r0, [sp, #4]
 80a163a:	f000 fbdd 	bl	80a1df8 <delay>
  reset_all_pins();
 80a163e:	f7ff facf 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D7, D0); // (0,3,3, Blue)
 80a1642:	2100      	movs	r1, #0
 80a1644:	2007      	movs	r0, #7
 80a1646:	f7ff f97f 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a164a:	9801      	ldr	r0, [sp, #4]
 80a164c:	f000 fbd4 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1650:	f7ff fac6 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D3, A4); // (1,0,0, Blue)
 80a1654:	210e      	movs	r1, #14
 80a1656:	2003      	movs	r0, #3
 80a1658:	f7ff f976 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a165c:	9801      	ldr	r0, [sp, #4]
 80a165e:	f000 fbcb 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1662:	f7ff fabd 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A4, A2); // (1,0,1, Blue)
 80a1666:	210c      	movs	r1, #12
 80a1668:	200e      	movs	r0, #14
 80a166a:	f7ff f96d 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a166e:	9801      	ldr	r0, [sp, #4]
 80a1670:	f000 fbc2 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1674:	f7ff fab4 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A2, D6); // (1,0,2, Blue)
 80a1678:	2106      	movs	r1, #6
 80a167a:	200c      	movs	r0, #12
 80a167c:	f7ff f964 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1680:	9801      	ldr	r0, [sp, #4]
 80a1682:	f000 fbb9 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1686:	f7ff faab 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D6, D3); // (1,0,3, Blue)
 80a168a:	2103      	movs	r1, #3
 80a168c:	2006      	movs	r0, #6
 80a168e:	f7ff f95b 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1692:	9801      	ldr	r0, [sp, #4]
 80a1694:	f000 fbb0 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1698:	f7ff faa2 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D2, A5); // (1,1,0, Blue)
 80a169c:	210f      	movs	r1, #15
 80a169e:	2002      	movs	r0, #2
 80a16a0:	f7ff f952 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a16a4:	9801      	ldr	r0, [sp, #4]
 80a16a6:	f000 fba7 	bl	80a1df8 <delay>
  reset_all_pins();
 80a16aa:	f7ff fa99 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A5, A3); // (1,1,1, Blue)
 80a16ae:	210d      	movs	r1, #13
 80a16b0:	200f      	movs	r0, #15
 80a16b2:	f7ff f949 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a16b6:	9801      	ldr	r0, [sp, #4]
 80a16b8:	f000 fb9e 	bl	80a1df8 <delay>
  reset_all_pins();
 80a16bc:	f7ff fa90 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A3, D6); // (1,1,2, Blue)
 80a16c0:	2106      	movs	r1, #6
 80a16c2:	200d      	movs	r0, #13
 80a16c4:	f7ff f940 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a16c8:	9801      	ldr	r0, [sp, #4]
 80a16ca:	f000 fb95 	bl	80a1df8 <delay>
  reset_all_pins();
 80a16ce:	f7ff fa87 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D6, D2); // (1,1,3, Blue)
 80a16d2:	2102      	movs	r1, #2
 80a16d4:	2006      	movs	r0, #6
 80a16d6:	f7ff f937 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a16da:	9801      	ldr	r0, [sp, #4]
 80a16dc:	f000 fb8c 	bl	80a1df8 <delay>
  reset_all_pins();
 80a16e0:	f7ff fa7e 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D1, A6); // (1,2,0, Blue)
 80a16e4:	2110      	movs	r1, #16
 80a16e6:	2001      	movs	r0, #1
 80a16e8:	f7ff f92e 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a16ec:	9801      	ldr	r0, [sp, #4]
 80a16ee:	f000 fb83 	bl	80a1df8 <delay>
  reset_all_pins();
 80a16f2:	f7ff fa75 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A6, A0); // (1,2,1, Blue)
 80a16f6:	210a      	movs	r1, #10
 80a16f8:	2010      	movs	r0, #16
 80a16fa:	f7ff f925 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a16fe:	9801      	ldr	r0, [sp, #4]
 80a1700:	f000 fb7a 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1704:	f7ff fa6c 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A0, D6); // (1,2,2, Blue)
 80a1708:	2106      	movs	r1, #6
 80a170a:	200a      	movs	r0, #10
 80a170c:	f7ff f91c 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1710:	9801      	ldr	r0, [sp, #4]
 80a1712:	f000 fb71 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1716:	f7ff fa63 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D6, D1); // (1,2,3, Blue)
 80a171a:	2101      	movs	r1, #1
 80a171c:	2006      	movs	r0, #6
 80a171e:	f7ff f913 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1722:	9801      	ldr	r0, [sp, #4]
 80a1724:	f000 fb68 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1728:	f7ff fa5a 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D0, A7); // (1,3,0, Blue)
 80a172c:	2111      	movs	r1, #17
 80a172e:	2000      	movs	r0, #0
 80a1730:	f7ff f90a 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1734:	9801      	ldr	r0, [sp, #4]
 80a1736:	f000 fb5f 	bl	80a1df8 <delay>
  reset_all_pins();
 80a173a:	f7ff fa51 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A7, A1); // (1,3,1, Blue)
 80a173e:	210b      	movs	r1, #11
 80a1740:	2011      	movs	r0, #17
 80a1742:	f7ff f901 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1746:	9801      	ldr	r0, [sp, #4]
 80a1748:	f000 fb56 	bl	80a1df8 <delay>
  reset_all_pins();
 80a174c:	f7ff fa48 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A1, D6); // (1,3,2, Blue)
 80a1750:	2106      	movs	r1, #6
 80a1752:	200b      	movs	r0, #11
 80a1754:	f7ff f8f8 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1758:	9801      	ldr	r0, [sp, #4]
 80a175a:	f000 fb4d 	bl	80a1df8 <delay>
  reset_all_pins();
 80a175e:	f7ff fa3f 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D6, D0); // (1,3,3, Blue)
 80a1762:	2100      	movs	r1, #0
 80a1764:	2006      	movs	r0, #6
 80a1766:	f7ff f8ef 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a176a:	9801      	ldr	r0, [sp, #4]
 80a176c:	f000 fb44 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1770:	f7ff fa36 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D3, A6); // (2,0,0, Blue)
 80a1774:	2110      	movs	r1, #16
 80a1776:	2003      	movs	r0, #3
 80a1778:	f7ff f8e6 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a177c:	9801      	ldr	r0, [sp, #4]
 80a177e:	f000 fb3b 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1782:	f7ff fa2d 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A6, A1); // (2,0,1, Blue)
 80a1786:	210b      	movs	r1, #11
 80a1788:	2010      	movs	r0, #16
 80a178a:	f7ff f8dd 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a178e:	9801      	ldr	r0, [sp, #4]
 80a1790:	f000 fb32 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1794:	f7ff fa24 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A1, D5); // (2,0,2, Blue)
 80a1798:	2105      	movs	r1, #5
 80a179a:	200b      	movs	r0, #11
 80a179c:	f7ff f8d4 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a17a0:	9801      	ldr	r0, [sp, #4]
 80a17a2:	f000 fb29 	bl	80a1df8 <delay>
  reset_all_pins();
 80a17a6:	f7ff fa1b 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D5, D3); // (2,0,3, Blue)
 80a17aa:	2103      	movs	r1, #3
 80a17ac:	2005      	movs	r0, #5
 80a17ae:	f7ff f8cb 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a17b2:	9801      	ldr	r0, [sp, #4]
 80a17b4:	f000 fb20 	bl	80a1df8 <delay>
  reset_all_pins();
 80a17b8:	f7ff fa12 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D2, A7); // (2,1,0, Blue)
 80a17bc:	2111      	movs	r1, #17
 80a17be:	2002      	movs	r0, #2
 80a17c0:	f7ff f8c2 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a17c4:	9801      	ldr	r0, [sp, #4]
 80a17c6:	f000 fb17 	bl	80a1df8 <delay>
  reset_all_pins();
 80a17ca:	f7ff fa09 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A7, A0); // (2,1,1, Blue)
 80a17ce:	210a      	movs	r1, #10
 80a17d0:	2011      	movs	r0, #17
 80a17d2:	f7ff f8b9 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a17d6:	9801      	ldr	r0, [sp, #4]
 80a17d8:	f000 fb0e 	bl	80a1df8 <delay>
  reset_all_pins();
 80a17dc:	f7ff fa00 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A0, D5); // (2,1,2, Blue)
 80a17e0:	2105      	movs	r1, #5
 80a17e2:	200a      	movs	r0, #10
 80a17e4:	f7ff f8b0 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a17e8:	9801      	ldr	r0, [sp, #4]
 80a17ea:	f000 fb05 	bl	80a1df8 <delay>
  reset_all_pins();
 80a17ee:	f7ff f9f7 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D5, D2); // (2,1,3, Blue)
 80a17f2:	2102      	movs	r1, #2
 80a17f4:	2005      	movs	r0, #5
 80a17f6:	f7ff f8a7 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a17fa:	9801      	ldr	r0, [sp, #4]
 80a17fc:	f000 fafc 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1800:	f7ff f9ee 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D1, A4); // (2,2,0, Blue)
 80a1804:	210e      	movs	r1, #14
 80a1806:	2001      	movs	r0, #1
 80a1808:	f7ff f89e 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a180c:	9801      	ldr	r0, [sp, #4]
 80a180e:	f000 faf3 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1812:	f7ff f9e5 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A4, A3); // (2,2,1, Blue)
 80a1816:	210d      	movs	r1, #13
 80a1818:	200e      	movs	r0, #14
 80a181a:	f7ff f895 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a181e:	9801      	ldr	r0, [sp, #4]
 80a1820:	f000 faea 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1824:	f7ff f9dc 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A3, D5); // (2,2,2, Blue)
 80a1828:	2105      	movs	r1, #5
 80a182a:	200d      	movs	r0, #13
 80a182c:	f7ff f88c 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1830:	9801      	ldr	r0, [sp, #4]
 80a1832:	f000 fae1 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1836:	f7ff f9d3 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D5, D1); // (2,2,3, Blue)
 80a183a:	2101      	movs	r1, #1
 80a183c:	2005      	movs	r0, #5
 80a183e:	f7ff f883 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1842:	9801      	ldr	r0, [sp, #4]
 80a1844:	f000 fad8 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1848:	f7ff f9ca 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D0, A5); // (2,3,0, Blue)
 80a184c:	210f      	movs	r1, #15
 80a184e:	2000      	movs	r0, #0
 80a1850:	f7ff f87a 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1854:	9801      	ldr	r0, [sp, #4]
 80a1856:	f000 facf 	bl	80a1df8 <delay>
  reset_all_pins();
 80a185a:	f7ff f9c1 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A5, A2); // (2,3,1, Blue)
 80a185e:	210c      	movs	r1, #12
 80a1860:	200f      	movs	r0, #15
 80a1862:	f7ff f871 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1866:	9801      	ldr	r0, [sp, #4]
 80a1868:	f000 fac6 	bl	80a1df8 <delay>
  reset_all_pins();
 80a186c:	f7ff f9b8 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A2, D5); // (2,3,2, Blue)
 80a1870:	2105      	movs	r1, #5
 80a1872:	200c      	movs	r0, #12
 80a1874:	f7ff f868 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1878:	9801      	ldr	r0, [sp, #4]
 80a187a:	f000 fabd 	bl	80a1df8 <delay>
  reset_all_pins();
 80a187e:	f7ff f9af 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D5, D0); // (2,3,3, Blue)
 80a1882:	2100      	movs	r1, #0
 80a1884:	2005      	movs	r0, #5
 80a1886:	f7ff f85f 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a188a:	9801      	ldr	r0, [sp, #4]
 80a188c:	f000 fab4 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1890:	f7ff f9a6 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D3, A5); // (3,0,0, Blue)
 80a1894:	210f      	movs	r1, #15
 80a1896:	2003      	movs	r0, #3
 80a1898:	f7ff f856 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a189c:	9801      	ldr	r0, [sp, #4]
 80a189e:	f000 faab 	bl	80a1df8 <delay>
  reset_all_pins();
 80a18a2:	f7ff f99d 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A5, A0); // (3,0,1, Blue)
 80a18a6:	210a      	movs	r1, #10
 80a18a8:	200f      	movs	r0, #15
 80a18aa:	f7ff f84d 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a18ae:	9801      	ldr	r0, [sp, #4]
 80a18b0:	f000 faa2 	bl	80a1df8 <delay>
  reset_all_pins();
 80a18b4:	f7ff f994 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A0, D4); // (3,0,2, Blue)
 80a18b8:	2104      	movs	r1, #4
 80a18ba:	200a      	movs	r0, #10
 80a18bc:	f7ff f844 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a18c0:	9801      	ldr	r0, [sp, #4]
 80a18c2:	f000 fa99 	bl	80a1df8 <delay>
  reset_all_pins();
 80a18c6:	f7ff f98b 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D4, D3); // (3,0,3, Blue)
 80a18ca:	2103      	movs	r1, #3
 80a18cc:	2004      	movs	r0, #4
 80a18ce:	f7ff f83b 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a18d2:	9801      	ldr	r0, [sp, #4]
 80a18d4:	f000 fa90 	bl	80a1df8 <delay>
  reset_all_pins();
 80a18d8:	f7ff f982 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D2, A4); // (3,1,0, Blue)
 80a18dc:	210e      	movs	r1, #14
 80a18de:	2002      	movs	r0, #2
 80a18e0:	f7ff f832 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a18e4:	9801      	ldr	r0, [sp, #4]
 80a18e6:	f000 fa87 	bl	80a1df8 <delay>
  reset_all_pins();
 80a18ea:	f7ff f979 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A4, A1); // (3,1,1, Blue)
 80a18ee:	210b      	movs	r1, #11
 80a18f0:	200e      	movs	r0, #14
 80a18f2:	f7ff f829 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a18f6:	9801      	ldr	r0, [sp, #4]
 80a18f8:	f000 fa7e 	bl	80a1df8 <delay>
  reset_all_pins();
 80a18fc:	f7ff f970 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A1, D4); // (3,1,2, Blue)
 80a1900:	2104      	movs	r1, #4
 80a1902:	200b      	movs	r0, #11
 80a1904:	f7ff f820 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1908:	9801      	ldr	r0, [sp, #4]
 80a190a:	f000 fa75 	bl	80a1df8 <delay>
  reset_all_pins();
 80a190e:	f7ff f967 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D4, D2); // (3,1,3, Blue)
 80a1912:	2102      	movs	r1, #2
 80a1914:	2004      	movs	r0, #4
 80a1916:	f7ff f817 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a191a:	9801      	ldr	r0, [sp, #4]
 80a191c:	f000 fa6c 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1920:	f7ff f95e 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D1, A7); // (3,2,0, Blue)
 80a1924:	2111      	movs	r1, #17
 80a1926:	2001      	movs	r0, #1
 80a1928:	f7ff f80e 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a192c:	9801      	ldr	r0, [sp, #4]
 80a192e:	f000 fa63 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1932:	f7ff f955 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A7, A2); // (3,2,1, Blue)
 80a1936:	210c      	movs	r1, #12
 80a1938:	2011      	movs	r0, #17
 80a193a:	f7ff f805 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a193e:	9801      	ldr	r0, [sp, #4]
 80a1940:	f000 fa5a 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1944:	f7ff f94c 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A2, D4); // (3,2,2, Blue)
 80a1948:	2104      	movs	r1, #4
 80a194a:	200c      	movs	r0, #12
 80a194c:	f7fe fffc 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1950:	9801      	ldr	r0, [sp, #4]
 80a1952:	f000 fa51 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1956:	f7ff f943 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D4, D1); // (3,2,3, Blue)
 80a195a:	2101      	movs	r1, #1
 80a195c:	2004      	movs	r0, #4
 80a195e:	f7fe fff3 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1962:	9801      	ldr	r0, [sp, #4]
 80a1964:	f000 fa48 	bl	80a1df8 <delay>
  reset_all_pins();
 80a1968:	f7ff f93a 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D0, A6); // (3,3,0, Blue)
 80a196c:	2110      	movs	r1, #16
 80a196e:	2000      	movs	r0, #0
 80a1970:	f7fe ffea 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1974:	9801      	ldr	r0, [sp, #4]
 80a1976:	f000 fa3f 	bl	80a1df8 <delay>
  reset_all_pins();
 80a197a:	f7ff f931 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A6, A3); // (3,3,1, Blue)
 80a197e:	210d      	movs	r1, #13
 80a1980:	2010      	movs	r0, #16
 80a1982:	f7fe ffe1 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1986:	9801      	ldr	r0, [sp, #4]
 80a1988:	f000 fa36 	bl	80a1df8 <delay>
  reset_all_pins();
 80a198c:	f7ff f928 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(A3, D4); // (3,3,2, Blue)
 80a1990:	2104      	movs	r1, #4
 80a1992:	200d      	movs	r0, #13
 80a1994:	f7fe ffd8 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a1998:	9801      	ldr	r0, [sp, #4]
 80a199a:	f000 fa2d 	bl	80a1df8 <delay>
  reset_all_pins();
 80a199e:	f7ff f91f 	bl	80a0be0 <_Z14reset_all_pinsv>
  set_pins(D4, D0); // (3,3,3, Blue)
 80a19a2:	2100      	movs	r1, #0
 80a19a4:	2004      	movs	r0, #4
 80a19a6:	f7fe ffcf 	bl	80a0948 <_Z8set_pinsii>
  delay(delayTime);
 80a19aa:	9801      	ldr	r0, [sp, #4]
 80a19ac:	f000 fa24 	bl	80a1df8 <delay>
  reset_all_pins();
 80a19b0:	f7ff f916 	bl	80a0be0 <_Z14reset_all_pinsv>
}
 80a19b4:	2001      	movs	r0, #1
 80a19b6:	b003      	add	sp, #12
 80a19b8:	f85d fb04 	ldr.w	pc, [sp], #4

080a19bc <loop>:
{
 80a19bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  switch (currentAnimation)
 80a19be:	4b29      	ldr	r3, [pc, #164]	; (80a1a64 <loop+0xa8>)
 80a19c0:	781b      	ldrb	r3, [r3, #0]
 80a19c2:	2b08      	cmp	r3, #8
 80a19c4:	d810      	bhi.n	80a19e8 <loop+0x2c>
 80a19c6:	e8df f003 	tbb	[pc, r3]
 80a19ca:	1605      	.short	0x1605
 80a19cc:	2c292119 	.word	0x2c292119
 80a19d0:	343c      	.short	0x343c
 80a19d2:	44          	.byte	0x44
 80a19d3:	00          	.byte	0x00
    countUp("");
 80a19d4:	4668      	mov	r0, sp
 80a19d6:	4924      	ldr	r1, [pc, #144]	; (80a1a68 <loop+0xac>)
 80a19d8:	f000 fc0b 	bl	80a21f2 <_ZN6StringC1EPKc>
 80a19dc:	4668      	mov	r0, sp
 80a19de:	f7ff f911 	bl	80a0c04 <_Z7countUp6String>
 80a19e2:	4668      	mov	r0, sp
 80a19e4:	f000 fbbb 	bl	80a215e <_ZN6StringD1Ev>
{
 80a19e8:	2428      	movs	r4, #40	; 0x28
    mainLoop();
 80a19ea:	f7fe ffe3 	bl	80a09b4 <_Z8mainLoopv>
  for (int i = 0; i < 40; i++)
 80a19ee:	3c01      	subs	r4, #1
 80a19f0:	d1fb      	bne.n	80a19ea <loop+0x2e>
}
 80a19f2:	b004      	add	sp, #16
 80a19f4:	bd10      	pop	{r4, pc}
    planarSpin();
 80a19f6:	f7ff f80f 	bl	80a0a18 <_Z10planarSpinv>
    break;
 80a19fa:	e7f5      	b.n	80a19e8 <loop+0x2c>
    planarFlop3D("");
 80a19fc:	4668      	mov	r0, sp
 80a19fe:	491a      	ldr	r1, [pc, #104]	; (80a1a68 <loop+0xac>)
 80a1a00:	f000 fbf7 	bl	80a21f2 <_ZN6StringC1EPKc>
 80a1a04:	4668      	mov	r0, sp
 80a1a06:	f7fe fe07 	bl	80a0618 <_Z12planarFlop3D6String>
 80a1a0a:	e7ea      	b.n	80a19e2 <loop+0x26>
    nextColorCube("");
 80a1a0c:	4668      	mov	r0, sp
 80a1a0e:	4916      	ldr	r1, [pc, #88]	; (80a1a68 <loop+0xac>)
 80a1a10:	f000 fbef 	bl	80a21f2 <_ZN6StringC1EPKc>
 80a1a14:	4668      	mov	r0, sp
 80a1a16:	f7fe fb4b 	bl	80a00b0 <_Z13nextColorCube6String>
 80a1a1a:	e7e2      	b.n	80a19e2 <loop+0x26>
    chaseTheDot();
 80a1a1c:	f7fe fca0 	bl	80a0360 <_Z11chaseTheDotv>
    break;
 80a1a20:	e7e2      	b.n	80a19e8 <loop+0x2c>
    drawColumn("");
 80a1a22:	4668      	mov	r0, sp
 80a1a24:	4910      	ldr	r1, [pc, #64]	; (80a1a68 <loop+0xac>)
 80a1a26:	f000 fbe4 	bl	80a21f2 <_ZN6StringC1EPKc>
 80a1a2a:	4668      	mov	r0, sp
 80a1a2c:	f7fe fb6e 	bl	80a010c <_Z10drawColumn6String>
 80a1a30:	e7d7      	b.n	80a19e2 <loop+0x26>
    drawXRow("");
 80a1a32:	4668      	mov	r0, sp
 80a1a34:	490c      	ldr	r1, [pc, #48]	; (80a1a68 <loop+0xac>)
 80a1a36:	f000 fbdc 	bl	80a21f2 <_ZN6StringC1EPKc>
 80a1a3a:	4668      	mov	r0, sp
 80a1a3c:	f7fe fc28 	bl	80a0290 <_Z8drawXRow6String>
 80a1a40:	e7cf      	b.n	80a19e2 <loop+0x26>
    drawYRow("");
 80a1a42:	4668      	mov	r0, sp
 80a1a44:	4908      	ldr	r1, [pc, #32]	; (80a1a68 <loop+0xac>)
 80a1a46:	f000 fbd4 	bl	80a21f2 <_ZN6StringC1EPKc>
 80a1a4a:	4668      	mov	r0, sp
 80a1a4c:	f7fe fc54 	bl	80a02f8 <_Z8drawYRow6String>
 80a1a50:	e7c7      	b.n	80a19e2 <loop+0x26>
    drawWalls("");
 80a1a52:	4668      	mov	r0, sp
 80a1a54:	4904      	ldr	r1, [pc, #16]	; (80a1a68 <loop+0xac>)
 80a1a56:	f000 fbcc 	bl	80a21f2 <_ZN6StringC1EPKc>
 80a1a5a:	4668      	mov	r0, sp
 80a1a5c:	f7fe fbe4 	bl	80a0228 <_Z9drawWalls6String>
 80a1a60:	e7bf      	b.n	80a19e2 <loop+0x26>
 80a1a62:	bf00      	nop
 80a1a64:	20000201 	.word	0x20000201
 80a1a68:	080a2a90 	.word	0x080a2a90

080a1a6c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a1a6c:	b508      	push	{r3, lr}
 80a1a6e:	4b02      	ldr	r3, [pc, #8]	; (80a1a78 <os_mutex_recursive_create+0xc>)
 80a1a70:	681b      	ldr	r3, [r3, #0]
 80a1a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1a74:	9301      	str	r3, [sp, #4]
 80a1a76:	bd08      	pop	{r3, pc}
 80a1a78:	080601d0 	.word	0x080601d0

080a1a7c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a1a7c:	b508      	push	{r3, lr}
 80a1a7e:	4b02      	ldr	r3, [pc, #8]	; (80a1a88 <os_mutex_recursive_destroy+0xc>)
 80a1a80:	681b      	ldr	r3, [r3, #0]
 80a1a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1a84:	9301      	str	r3, [sp, #4]
 80a1a86:	bd08      	pop	{r3, pc}
 80a1a88:	080601d0 	.word	0x080601d0

080a1a8c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1a8c:	b508      	push	{r3, lr}
 80a1a8e:	4b02      	ldr	r3, [pc, #8]	; (80a1a98 <HAL_RNG_GetRandomNumber+0xc>)
 80a1a90:	681b      	ldr	r3, [r3, #0]
 80a1a92:	685b      	ldr	r3, [r3, #4]
 80a1a94:	9301      	str	r3, [sp, #4]
 80a1a96:	bd08      	pop	{r3, pc}
 80a1a98:	0806019c 	.word	0x0806019c

080a1a9c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a1a9c:	b508      	push	{r3, lr}
 80a1a9e:	4b02      	ldr	r3, [pc, #8]	; (80a1aa8 <HAL_Delay_Microseconds+0xc>)
 80a1aa0:	681b      	ldr	r3, [r3, #0]
 80a1aa2:	68db      	ldr	r3, [r3, #12]
 80a1aa4:	9301      	str	r3, [sp, #4]
 80a1aa6:	bd08      	pop	{r3, pc}
 80a1aa8:	0806019c 	.word	0x0806019c

080a1aac <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1aac:	b508      	push	{r3, lr}
 80a1aae:	4b02      	ldr	r3, [pc, #8]	; (80a1ab8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1ab0:	681b      	ldr	r3, [r3, #0]
 80a1ab2:	695b      	ldr	r3, [r3, #20]
 80a1ab4:	9301      	str	r3, [sp, #4]
 80a1ab6:	bd08      	pop	{r3, pc}
 80a1ab8:	0806019c 	.word	0x0806019c

080a1abc <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1abc:	b508      	push	{r3, lr}
 80a1abe:	4b02      	ldr	r3, [pc, #8]	; (80a1ac8 <HAL_Pin_Mode+0xc>)
 80a1ac0:	681b      	ldr	r3, [r3, #0]
 80a1ac2:	689b      	ldr	r3, [r3, #8]
 80a1ac4:	9301      	str	r3, [sp, #4]
 80a1ac6:	bd08      	pop	{r3, pc}
 80a1ac8:	080601b0 	.word	0x080601b0

080a1acc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1acc:	b508      	push	{r3, lr}
 80a1ace:	4b02      	ldr	r3, [pc, #8]	; (80a1ad8 <HAL_Get_Pin_Mode+0xc>)
 80a1ad0:	681b      	ldr	r3, [r3, #0]
 80a1ad2:	68db      	ldr	r3, [r3, #12]
 80a1ad4:	9301      	str	r3, [sp, #4]
 80a1ad6:	bd08      	pop	{r3, pc}
 80a1ad8:	080601b0 	.word	0x080601b0

080a1adc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1adc:	b508      	push	{r3, lr}
 80a1ade:	4b02      	ldr	r3, [pc, #8]	; (80a1ae8 <HAL_GPIO_Write+0xc>)
 80a1ae0:	681b      	ldr	r3, [r3, #0]
 80a1ae2:	691b      	ldr	r3, [r3, #16]
 80a1ae4:	9301      	str	r3, [sp, #4]
 80a1ae6:	bd08      	pop	{r3, pc}
 80a1ae8:	080601b0 	.word	0x080601b0

080a1aec <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a1aec:	b508      	push	{r3, lr}
 80a1aee:	4b02      	ldr	r3, [pc, #8]	; (80a1af8 <hal_i2c_write+0xc>)
 80a1af0:	681b      	ldr	r3, [r3, #0]
 80a1af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1af4:	9301      	str	r3, [sp, #4]
 80a1af6:	bd08      	pop	{r3, pc}
 80a1af8:	080601ac 	.word	0x080601ac

080a1afc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a1afc:	b508      	push	{r3, lr}
 80a1afe:	4b02      	ldr	r3, [pc, #8]	; (80a1b08 <hal_i2c_available+0xc>)
 80a1b00:	681b      	ldr	r3, [r3, #0]
 80a1b02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1b04:	9301      	str	r3, [sp, #4]
 80a1b06:	bd08      	pop	{r3, pc}
 80a1b08:	080601ac 	.word	0x080601ac

080a1b0c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a1b0c:	b508      	push	{r3, lr}
 80a1b0e:	4b02      	ldr	r3, [pc, #8]	; (80a1b18 <hal_i2c_read+0xc>)
 80a1b10:	681b      	ldr	r3, [r3, #0]
 80a1b12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1b14:	9301      	str	r3, [sp, #4]
 80a1b16:	bd08      	pop	{r3, pc}
 80a1b18:	080601ac 	.word	0x080601ac

080a1b1c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a1b1c:	b508      	push	{r3, lr}
 80a1b1e:	4b02      	ldr	r3, [pc, #8]	; (80a1b28 <hal_i2c_peek+0xc>)
 80a1b20:	681b      	ldr	r3, [r3, #0]
 80a1b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1b24:	9301      	str	r3, [sp, #4]
 80a1b26:	bd08      	pop	{r3, pc}
 80a1b28:	080601ac 	.word	0x080601ac

080a1b2c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a1b2c:	b508      	push	{r3, lr}
 80a1b2e:	4b02      	ldr	r3, [pc, #8]	; (80a1b38 <hal_i2c_flush+0xc>)
 80a1b30:	681b      	ldr	r3, [r3, #0]
 80a1b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1b34:	9301      	str	r3, [sp, #4]
 80a1b36:	bd08      	pop	{r3, pc}
 80a1b38:	080601ac 	.word	0x080601ac

080a1b3c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a1b3c:	b508      	push	{r3, lr}
 80a1b3e:	4b02      	ldr	r3, [pc, #8]	; (80a1b48 <hal_i2c_is_enabled+0xc>)
 80a1b40:	681b      	ldr	r3, [r3, #0]
 80a1b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1b44:	9301      	str	r3, [sp, #4]
 80a1b46:	bd08      	pop	{r3, pc}
 80a1b48:	080601ac 	.word	0x080601ac

080a1b4c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a1b4c:	b508      	push	{r3, lr}
 80a1b4e:	4b03      	ldr	r3, [pc, #12]	; (80a1b5c <hal_i2c_init+0x10>)
 80a1b50:	681b      	ldr	r3, [r3, #0]
 80a1b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1b56:	9301      	str	r3, [sp, #4]
 80a1b58:	bd08      	pop	{r3, pc}
 80a1b5a:	0000      	.short	0x0000
 80a1b5c:	080601ac 	.word	0x080601ac

080a1b60 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a1b60:	b508      	push	{r3, lr}
 80a1b62:	4b02      	ldr	r3, [pc, #8]	; (80a1b6c <hal_spi_init+0xc>)
 80a1b64:	681b      	ldr	r3, [r3, #0]
 80a1b66:	69db      	ldr	r3, [r3, #28]
 80a1b68:	9301      	str	r3, [sp, #4]
 80a1b6a:	bd08      	pop	{r3, pc}
 80a1b6c:	080601b4 	.word	0x080601b4

080a1b70 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a1b70:	b508      	push	{r3, lr}
 80a1b72:	4b02      	ldr	r3, [pc, #8]	; (80a1b7c <hal_spi_is_enabled+0xc>)
 80a1b74:	681b      	ldr	r3, [r3, #0]
 80a1b76:	6a1b      	ldr	r3, [r3, #32]
 80a1b78:	9301      	str	r3, [sp, #4]
 80a1b7a:	bd08      	pop	{r3, pc}
 80a1b7c:	080601b4 	.word	0x080601b4

080a1b80 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a1b80:	b508      	push	{r3, lr}
 80a1b82:	4b02      	ldr	r3, [pc, #8]	; (80a1b8c <hal_usart_init+0xc>)
 80a1b84:	681b      	ldr	r3, [r3, #0]
 80a1b86:	699b      	ldr	r3, [r3, #24]
 80a1b88:	9301      	str	r3, [sp, #4]
 80a1b8a:	bd08      	pop	{r3, pc}
 80a1b8c:	080601c4 	.word	0x080601c4

080a1b90 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a1b90:	b508      	push	{r3, lr}
 80a1b92:	4b02      	ldr	r3, [pc, #8]	; (80a1b9c <hal_usart_write+0xc>)
 80a1b94:	681b      	ldr	r3, [r3, #0]
 80a1b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1b98:	9301      	str	r3, [sp, #4]
 80a1b9a:	bd08      	pop	{r3, pc}
 80a1b9c:	080601c4 	.word	0x080601c4

080a1ba0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a1ba0:	b508      	push	{r3, lr}
 80a1ba2:	4b02      	ldr	r3, [pc, #8]	; (80a1bac <hal_usart_available+0xc>)
 80a1ba4:	681b      	ldr	r3, [r3, #0]
 80a1ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1ba8:	9301      	str	r3, [sp, #4]
 80a1baa:	bd08      	pop	{r3, pc}
 80a1bac:	080601c4 	.word	0x080601c4

080a1bb0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a1bb0:	b508      	push	{r3, lr}
 80a1bb2:	4b02      	ldr	r3, [pc, #8]	; (80a1bbc <hal_usart_read+0xc>)
 80a1bb4:	681b      	ldr	r3, [r3, #0]
 80a1bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1bb8:	9301      	str	r3, [sp, #4]
 80a1bba:	bd08      	pop	{r3, pc}
 80a1bbc:	080601c4 	.word	0x080601c4

080a1bc0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a1bc0:	b508      	push	{r3, lr}
 80a1bc2:	4b02      	ldr	r3, [pc, #8]	; (80a1bcc <hal_usart_peek+0xc>)
 80a1bc4:	681b      	ldr	r3, [r3, #0]
 80a1bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1bc8:	9301      	str	r3, [sp, #4]
 80a1bca:	bd08      	pop	{r3, pc}
 80a1bcc:	080601c4 	.word	0x080601c4

080a1bd0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a1bd0:	b508      	push	{r3, lr}
 80a1bd2:	4b02      	ldr	r3, [pc, #8]	; (80a1bdc <hal_usart_flush+0xc>)
 80a1bd4:	681b      	ldr	r3, [r3, #0]
 80a1bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1bd8:	9301      	str	r3, [sp, #4]
 80a1bda:	bd08      	pop	{r3, pc}
 80a1bdc:	080601c4 	.word	0x080601c4

080a1be0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a1be0:	b508      	push	{r3, lr}
 80a1be2:	4b02      	ldr	r3, [pc, #8]	; (80a1bec <hal_usart_is_enabled+0xc>)
 80a1be4:	681b      	ldr	r3, [r3, #0]
 80a1be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1be8:	9301      	str	r3, [sp, #4]
 80a1bea:	bd08      	pop	{r3, pc}
 80a1bec:	080601c4 	.word	0x080601c4

080a1bf0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a1bf0:	b508      	push	{r3, lr}
 80a1bf2:	4b02      	ldr	r3, [pc, #8]	; (80a1bfc <hal_usart_available_data_for_write+0xc>)
 80a1bf4:	681b      	ldr	r3, [r3, #0]
 80a1bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1bf8:	9301      	str	r3, [sp, #4]
 80a1bfa:	bd08      	pop	{r3, pc}
 80a1bfc:	080601c4 	.word	0x080601c4

080a1c00 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1c00:	b508      	push	{r3, lr}
 80a1c02:	4b02      	ldr	r3, [pc, #8]	; (80a1c0c <HAL_USB_USART_Init+0xc>)
 80a1c04:	681b      	ldr	r3, [r3, #0]
 80a1c06:	681b      	ldr	r3, [r3, #0]
 80a1c08:	9301      	str	r3, [sp, #4]
 80a1c0a:	bd08      	pop	{r3, pc}
 80a1c0c:	080601d8 	.word	0x080601d8

080a1c10 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1c10:	b508      	push	{r3, lr}
 80a1c12:	4b02      	ldr	r3, [pc, #8]	; (80a1c1c <HAL_USB_USART_Available_Data+0xc>)
 80a1c14:	681b      	ldr	r3, [r3, #0]
 80a1c16:	691b      	ldr	r3, [r3, #16]
 80a1c18:	9301      	str	r3, [sp, #4]
 80a1c1a:	bd08      	pop	{r3, pc}
 80a1c1c:	080601d8 	.word	0x080601d8

080a1c20 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1c20:	b508      	push	{r3, lr}
 80a1c22:	4b02      	ldr	r3, [pc, #8]	; (80a1c2c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1c24:	681b      	ldr	r3, [r3, #0]
 80a1c26:	695b      	ldr	r3, [r3, #20]
 80a1c28:	9301      	str	r3, [sp, #4]
 80a1c2a:	bd08      	pop	{r3, pc}
 80a1c2c:	080601d8 	.word	0x080601d8

080a1c30 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1c30:	b508      	push	{r3, lr}
 80a1c32:	4b02      	ldr	r3, [pc, #8]	; (80a1c3c <HAL_USB_USART_Receive_Data+0xc>)
 80a1c34:	681b      	ldr	r3, [r3, #0]
 80a1c36:	699b      	ldr	r3, [r3, #24]
 80a1c38:	9301      	str	r3, [sp, #4]
 80a1c3a:	bd08      	pop	{r3, pc}
 80a1c3c:	080601d8 	.word	0x080601d8

080a1c40 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1c40:	b508      	push	{r3, lr}
 80a1c42:	4b02      	ldr	r3, [pc, #8]	; (80a1c4c <HAL_USB_USART_Send_Data+0xc>)
 80a1c44:	681b      	ldr	r3, [r3, #0]
 80a1c46:	69db      	ldr	r3, [r3, #28]
 80a1c48:	9301      	str	r3, [sp, #4]
 80a1c4a:	bd08      	pop	{r3, pc}
 80a1c4c:	080601d8 	.word	0x080601d8

080a1c50 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1c50:	b508      	push	{r3, lr}
 80a1c52:	4b02      	ldr	r3, [pc, #8]	; (80a1c5c <HAL_USB_USART_Flush_Data+0xc>)
 80a1c54:	681b      	ldr	r3, [r3, #0]
 80a1c56:	6a1b      	ldr	r3, [r3, #32]
 80a1c58:	9301      	str	r3, [sp, #4]
 80a1c5a:	bd08      	pop	{r3, pc}
 80a1c5c:	080601d8 	.word	0x080601d8

080a1c60 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1c60:	b508      	push	{r3, lr}
 80a1c62:	4b02      	ldr	r3, [pc, #8]	; (80a1c6c <inet_gethostbyname+0xc>)
 80a1c64:	681b      	ldr	r3, [r3, #0]
 80a1c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1c68:	9301      	str	r3, [sp, #4]
 80a1c6a:	bd08      	pop	{r3, pc}
 80a1c6c:	080601c0 	.word	0x080601c0

080a1c70 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 80a1c70:	b508      	push	{r3, lr}
 80a1c72:	4b02      	ldr	r3, [pc, #8]	; (80a1c7c <log_message_v+0xc>)
 80a1c74:	681b      	ldr	r3, [r3, #0]
 80a1c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1c78:	9301      	str	r3, [sp, #4]
 80a1c7a:	bd08      	pop	{r3, pc}
 80a1c7c:	080201a8 	.word	0x080201a8

080a1c80 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1c80:	b508      	push	{r3, lr}
 80a1c82:	4b02      	ldr	r3, [pc, #8]	; (80a1c8c <set_system_mode+0xc>)
 80a1c84:	681b      	ldr	r3, [r3, #0]
 80a1c86:	685b      	ldr	r3, [r3, #4]
 80a1c88:	9301      	str	r3, [sp, #4]
 80a1c8a:	bd08      	pop	{r3, pc}
 80a1c8c:	080601a4 	.word	0x080601a4

080a1c90 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1c90:	b508      	push	{r3, lr}
 80a1c92:	4b02      	ldr	r3, [pc, #8]	; (80a1c9c <system_delay_ms+0xc>)
 80a1c94:	681b      	ldr	r3, [r3, #0]
 80a1c96:	695b      	ldr	r3, [r3, #20]
 80a1c98:	9301      	str	r3, [sp, #4]
 80a1c9a:	bd08      	pop	{r3, pc}
 80a1c9c:	080601a4 	.word	0x080601a4

080a1ca0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1ca0:	b508      	push	{r3, lr}
 80a1ca2:	4b03      	ldr	r3, [pc, #12]	; (80a1cb0 <system_ctrl_set_app_request_handler+0x10>)
 80a1ca4:	681b      	ldr	r3, [r3, #0]
 80a1ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1caa:	9301      	str	r3, [sp, #4]
 80a1cac:	bd08      	pop	{r3, pc}
 80a1cae:	0000      	.short	0x0000
 80a1cb0:	080601a4 	.word	0x080601a4

080a1cb4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1cb4:	b508      	push	{r3, lr}
 80a1cb6:	4b03      	ldr	r3, [pc, #12]	; (80a1cc4 <system_ctrl_set_result+0x10>)
 80a1cb8:	681b      	ldr	r3, [r3, #0]
 80a1cba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1cbe:	9301      	str	r3, [sp, #4]
 80a1cc0:	bd08      	pop	{r3, pc}
 80a1cc2:	0000      	.short	0x0000
 80a1cc4:	080601a4 	.word	0x080601a4

080a1cc8 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a1cc8:	b508      	push	{r3, lr}
 80a1cca:	4b02      	ldr	r3, [pc, #8]	; (80a1cd4 <spark_function+0xc>)
 80a1ccc:	681b      	ldr	r3, [r3, #0]
 80a1cce:	685b      	ldr	r3, [r3, #4]
 80a1cd0:	9301      	str	r3, [sp, #4]
 80a1cd2:	bd08      	pop	{r3, pc}
 80a1cd4:	080601cc 	.word	0x080601cc

080a1cd8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1cd8:	b508      	push	{r3, lr}
 80a1cda:	4b02      	ldr	r3, [pc, #8]	; (80a1ce4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1cdc:	681b      	ldr	r3, [r3, #0]
 80a1cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1ce0:	9301      	str	r3, [sp, #4]
 80a1ce2:	bd08      	pop	{r3, pc}
 80a1ce4:	080601cc 	.word	0x080601cc

080a1ce8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1ce8:	b508      	push	{r3, lr}
 80a1cea:	4b02      	ldr	r3, [pc, #8]	; (80a1cf4 <network_connect+0xc>)
 80a1cec:	681b      	ldr	r3, [r3, #0]
 80a1cee:	685b      	ldr	r3, [r3, #4]
 80a1cf0:	9301      	str	r3, [sp, #4]
 80a1cf2:	bd08      	pop	{r3, pc}
 80a1cf4:	080601c8 	.word	0x080601c8

080a1cf8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1cf8:	b508      	push	{r3, lr}
 80a1cfa:	4b02      	ldr	r3, [pc, #8]	; (80a1d04 <network_connecting+0xc>)
 80a1cfc:	681b      	ldr	r3, [r3, #0]
 80a1cfe:	689b      	ldr	r3, [r3, #8]
 80a1d00:	9301      	str	r3, [sp, #4]
 80a1d02:	bd08      	pop	{r3, pc}
 80a1d04:	080601c8 	.word	0x080601c8

080a1d08 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1d08:	b508      	push	{r3, lr}
 80a1d0a:	4b02      	ldr	r3, [pc, #8]	; (80a1d14 <network_disconnect+0xc>)
 80a1d0c:	681b      	ldr	r3, [r3, #0]
 80a1d0e:	68db      	ldr	r3, [r3, #12]
 80a1d10:	9301      	str	r3, [sp, #4]
 80a1d12:	bd08      	pop	{r3, pc}
 80a1d14:	080601c8 	.word	0x080601c8

080a1d18 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1d18:	b508      	push	{r3, lr}
 80a1d1a:	4b02      	ldr	r3, [pc, #8]	; (80a1d24 <network_ready+0xc>)
 80a1d1c:	681b      	ldr	r3, [r3, #0]
 80a1d1e:	691b      	ldr	r3, [r3, #16]
 80a1d20:	9301      	str	r3, [sp, #4]
 80a1d22:	bd08      	pop	{r3, pc}
 80a1d24:	080601c8 	.word	0x080601c8

080a1d28 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1d28:	b508      	push	{r3, lr}
 80a1d2a:	4b02      	ldr	r3, [pc, #8]	; (80a1d34 <network_on+0xc>)
 80a1d2c:	681b      	ldr	r3, [r3, #0]
 80a1d2e:	695b      	ldr	r3, [r3, #20]
 80a1d30:	9301      	str	r3, [sp, #4]
 80a1d32:	bd08      	pop	{r3, pc}
 80a1d34:	080601c8 	.word	0x080601c8

080a1d38 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1d38:	b508      	push	{r3, lr}
 80a1d3a:	4b02      	ldr	r3, [pc, #8]	; (80a1d44 <network_off+0xc>)
 80a1d3c:	681b      	ldr	r3, [r3, #0]
 80a1d3e:	699b      	ldr	r3, [r3, #24]
 80a1d40:	9301      	str	r3, [sp, #4]
 80a1d42:	bd08      	pop	{r3, pc}
 80a1d44:	080601c8 	.word	0x080601c8

080a1d48 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1d48:	b508      	push	{r3, lr}
 80a1d4a:	4b02      	ldr	r3, [pc, #8]	; (80a1d54 <network_listen+0xc>)
 80a1d4c:	681b      	ldr	r3, [r3, #0]
 80a1d4e:	69db      	ldr	r3, [r3, #28]
 80a1d50:	9301      	str	r3, [sp, #4]
 80a1d52:	bd08      	pop	{r3, pc}
 80a1d54:	080601c8 	.word	0x080601c8

080a1d58 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1d58:	b508      	push	{r3, lr}
 80a1d5a:	4b02      	ldr	r3, [pc, #8]	; (80a1d64 <network_listening+0xc>)
 80a1d5c:	681b      	ldr	r3, [r3, #0]
 80a1d5e:	6a1b      	ldr	r3, [r3, #32]
 80a1d60:	9301      	str	r3, [sp, #4]
 80a1d62:	bd08      	pop	{r3, pc}
 80a1d64:	080601c8 	.word	0x080601c8

080a1d68 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1d68:	b508      	push	{r3, lr}
 80a1d6a:	4b02      	ldr	r3, [pc, #8]	; (80a1d74 <network_set_listen_timeout+0xc>)
 80a1d6c:	681b      	ldr	r3, [r3, #0]
 80a1d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1d70:	9301      	str	r3, [sp, #4]
 80a1d72:	bd08      	pop	{r3, pc}
 80a1d74:	080601c8 	.word	0x080601c8

080a1d78 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1d78:	b508      	push	{r3, lr}
 80a1d7a:	4b02      	ldr	r3, [pc, #8]	; (80a1d84 <network_get_listen_timeout+0xc>)
 80a1d7c:	681b      	ldr	r3, [r3, #0]
 80a1d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1d80:	9301      	str	r3, [sp, #4]
 80a1d82:	bd08      	pop	{r3, pc}
 80a1d84:	080601c8 	.word	0x080601c8

080a1d88 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a1d88:	b508      	push	{r3, lr}
 80a1d8a:	4b02      	ldr	r3, [pc, #8]	; (80a1d94 <network_is_on+0xc>)
 80a1d8c:	681b      	ldr	r3, [r3, #0]
 80a1d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1d90:	9301      	str	r3, [sp, #4]
 80a1d92:	bd08      	pop	{r3, pc}
 80a1d94:	080601c8 	.word	0x080601c8

080a1d98 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a1d98:	b508      	push	{r3, lr}
 80a1d9a:	4b02      	ldr	r3, [pc, #8]	; (80a1da4 <network_is_off+0xc>)
 80a1d9c:	681b      	ldr	r3, [r3, #0]
 80a1d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1da0:	9301      	str	r3, [sp, #4]
 80a1da2:	bd08      	pop	{r3, pc}
 80a1da4:	080601c8 	.word	0x080601c8

080a1da8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1da8:	b508      	push	{r3, lr}
 80a1daa:	4b02      	ldr	r3, [pc, #8]	; (80a1db4 <malloc+0xc>)
 80a1dac:	681b      	ldr	r3, [r3, #0]
 80a1dae:	681b      	ldr	r3, [r3, #0]
 80a1db0:	9301      	str	r3, [sp, #4]
 80a1db2:	bd08      	pop	{r3, pc}
 80a1db4:	080601a0 	.word	0x080601a0

080a1db8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1db8:	b508      	push	{r3, lr}
 80a1dba:	4b02      	ldr	r3, [pc, #8]	; (80a1dc4 <free+0xc>)
 80a1dbc:	681b      	ldr	r3, [r3, #0]
 80a1dbe:	685b      	ldr	r3, [r3, #4]
 80a1dc0:	9301      	str	r3, [sp, #4]
 80a1dc2:	bd08      	pop	{r3, pc}
 80a1dc4:	080601a0 	.word	0x080601a0

080a1dc8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1dc8:	b508      	push	{r3, lr}
 80a1dca:	4b02      	ldr	r3, [pc, #8]	; (80a1dd4 <realloc+0xc>)
 80a1dcc:	681b      	ldr	r3, [r3, #0]
 80a1dce:	689b      	ldr	r3, [r3, #8]
 80a1dd0:	9301      	str	r3, [sp, #4]
 80a1dd2:	bd08      	pop	{r3, pc}
 80a1dd4:	080601a0 	.word	0x080601a0

080a1dd8 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
 80a1dd8:	b508      	push	{r3, lr}
 80a1dda:	4b02      	ldr	r3, [pc, #8]	; (80a1de4 <sscanf+0xc>)
 80a1ddc:	681b      	ldr	r3, [r3, #0]
 80a1dde:	695b      	ldr	r3, [r3, #20]
 80a1de0:	9301      	str	r3, [sp, #4]
 80a1de2:	bd08      	pop	{r3, pc}
 80a1de4:	080601a0 	.word	0x080601a0

080a1de8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a1de8:	b508      	push	{r3, lr}
 80a1dea:	4b02      	ldr	r3, [pc, #8]	; (80a1df4 <newlib_impure_ptr_callback+0xc>)
 80a1dec:	681b      	ldr	r3, [r3, #0]
 80a1dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1df0:	9301      	str	r3, [sp, #4]
 80a1df2:	bd08      	pop	{r3, pc}
 80a1df4:	080601a0 	.word	0x080601a0

080a1df8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1df8:	2100      	movs	r1, #0
 80a1dfa:	f7ff bf49 	b.w	80a1c90 <system_delay_ms>

080a1dfe <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a1dfe:	b510      	push	{r4, lr}
 80a1e00:	b088      	sub	sp, #32
 80a1e02:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a1e04:	4668      	mov	r0, sp
 80a1e06:	f000 f9f4 	bl	80a21f2 <_ZN6StringC1EPKc>
    return (*fn)(p);
 80a1e0a:	4669      	mov	r1, sp
 80a1e0c:	a804      	add	r0, sp, #16
 80a1e0e:	f000 fa12 	bl	80a2236 <_ZN6StringC1ERKS_>
 80a1e12:	a804      	add	r0, sp, #16
 80a1e14:	47a0      	blx	r4
 80a1e16:	4604      	mov	r4, r0
 80a1e18:	a804      	add	r0, sp, #16
 80a1e1a:	f000 f9a0 	bl	80a215e <_ZN6StringD1Ev>
    String p(param);
 80a1e1e:	4668      	mov	r0, sp
 80a1e20:	f000 f99d 	bl	80a215e <_ZN6StringD1Ev>
}
 80a1e24:	4620      	mov	r0, r4
 80a1e26:	b008      	add	sp, #32
 80a1e28:	bd10      	pop	{r4, pc}

080a1e2a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a1e2a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a1e2c:	2300      	movs	r3, #0
         size = sizeof(*this);
 80a1e2e:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 80a1e30:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 80a1e34:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a1e36:	4669      	mov	r1, sp
 80a1e38:	461a      	mov	r2, r3
 80a1e3a:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 80a1e3c:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 80a1e40:	f8ad 4000 	strh.w	r4, [sp]
 80a1e44:	f7ff ff40 	bl	80a1cc8 <spark_function>
}
 80a1e48:	b004      	add	sp, #16
 80a1e4a:	bd10      	pop	{r4, pc}

080a1e4c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1e4c:	4770      	bx	lr

080a1e4e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1e50:	4606      	mov	r6, r0
 80a1e52:	4615      	mov	r5, r2
 80a1e54:	460c      	mov	r4, r1
 80a1e56:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1e58:	42bc      	cmp	r4, r7
 80a1e5a:	d006      	beq.n	80a1e6a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1e5c:	6833      	ldr	r3, [r6, #0]
 80a1e5e:	4630      	mov	r0, r6
 80a1e60:	689b      	ldr	r3, [r3, #8]
 80a1e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1e66:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a1e68:	e7f6      	b.n	80a1e58 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a1e6a:	4628      	mov	r0, r5
 80a1e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1e6e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a1e6e:	2200      	movs	r2, #0
 80a1e70:	7c00      	ldrb	r0, [r0, #16]
 80a1e72:	f7ff be3b 	b.w	80a1aec <hal_i2c_write>

080a1e76 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a1e76:	2100      	movs	r1, #0
 80a1e78:	7c00      	ldrb	r0, [r0, #16]
 80a1e7a:	f7ff be3f 	b.w	80a1afc <hal_i2c_available>

080a1e7e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a1e7e:	2100      	movs	r1, #0
 80a1e80:	7c00      	ldrb	r0, [r0, #16]
 80a1e82:	f7ff be43 	b.w	80a1b0c <hal_i2c_read>

080a1e86 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a1e86:	2100      	movs	r1, #0
 80a1e88:	7c00      	ldrb	r0, [r0, #16]
 80a1e8a:	f7ff be47 	b.w	80a1b1c <hal_i2c_peek>

080a1e8e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a1e8e:	2100      	movs	r1, #0
 80a1e90:	7c00      	ldrb	r0, [r0, #16]
 80a1e92:	f7ff be4b 	b.w	80a1b2c <hal_i2c_flush>

080a1e96 <_ZN7TwoWireD0Ev>:
 80a1e96:	b510      	push	{r4, lr}
 80a1e98:	4604      	mov	r4, r0
 80a1e9a:	2114      	movs	r1, #20
 80a1e9c:	f000 fcfe 	bl	80a289c <_ZdlPvj>
 80a1ea0:	4620      	mov	r0, r4
 80a1ea2:	bd10      	pop	{r4, pc}

080a1ea4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1ea4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1eaa:	4604      	mov	r4, r0
 80a1eac:	4608      	mov	r0, r1
 80a1eae:	2100      	movs	r1, #0
 80a1eb0:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1eb4:	4b03      	ldr	r3, [pc, #12]	; (80a1ec4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a1eb6:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1eb8:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a1eba:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a1ebc:	f7ff fe46 	bl	80a1b4c <hal_i2c_init>
}
 80a1ec0:	4620      	mov	r0, r4
 80a1ec2:	bd10      	pop	{r4, pc}
 80a1ec4:	080a2b0c 	.word	0x080a2b0c

080a1ec8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1ec8:	4770      	bx	lr

080a1eca <_ZN9IPAddressD0Ev>:
 80a1eca:	b510      	push	{r4, lr}
 80a1ecc:	4604      	mov	r4, r0
 80a1ece:	2118      	movs	r1, #24
 80a1ed0:	f000 fce4 	bl	80a289c <_ZdlPvj>
 80a1ed4:	4620      	mov	r0, r4
 80a1ed6:	bd10      	pop	{r4, pc}

080a1ed8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1eda:	460e      	mov	r6, r1
 80a1edc:	2400      	movs	r4, #0
 80a1ede:	f100 0708 	add.w	r7, r0, #8
 80a1ee2:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a1ee4:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a1ee8:	220a      	movs	r2, #10
 80a1eea:	4630      	mov	r0, r6
 80a1eec:	f000 f8ef 	bl	80a20ce <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1ef0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1ef2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a1ef4:	d101      	bne.n	80a1efa <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a1ef6:	4620      	mov	r0, r4
 80a1ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a1efa:	2c00      	cmp	r4, #0
 80a1efc:	d0f2      	beq.n	80a1ee4 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1efe:	212e      	movs	r1, #46	; 0x2e
 80a1f00:	4630      	mov	r0, r6
 80a1f02:	f000 f8e1 	bl	80a20c8 <_ZN5Print5printEc>
 80a1f06:	4404      	add	r4, r0
 80a1f08:	e7ec      	b.n	80a1ee4 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a1f0c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a1f0c:	b510      	push	{r4, lr}
 80a1f0e:	4604      	mov	r4, r0
 80a1f10:	4b04      	ldr	r3, [pc, #16]	; (80a1f24 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1f12:	2211      	movs	r2, #17
 80a1f14:	2100      	movs	r1, #0
 80a1f16:	f840 3b04 	str.w	r3, [r0], #4
 80a1f1a:	f000 fcd7 	bl	80a28cc <memset>
}
 80a1f1e:	4620      	mov	r0, r4
 80a1f20:	bd10      	pop	{r4, pc}
 80a1f22:	bf00      	nop
 80a1f24:	080a2b34 	.word	0x080a2b34

080a1f28 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1f28:	4603      	mov	r3, r0
 80a1f2a:	4a07      	ldr	r2, [pc, #28]	; (80a1f48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1f2c:	b510      	push	{r4, lr}
 80a1f2e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a1f32:	f101 0210 	add.w	r2, r1, #16
 80a1f36:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1f3a:	4291      	cmp	r1, r2
 80a1f3c:	f843 4b04 	str.w	r4, [r3], #4
 80a1f40:	d1f9      	bne.n	80a1f36 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1f42:	780a      	ldrb	r2, [r1, #0]
 80a1f44:	701a      	strb	r2, [r3, #0]
}
 80a1f46:	bd10      	pop	{r4, pc}
 80a1f48:	080a2b34 	.word	0x080a2b34

080a1f4c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a1f4c:	4a02      	ldr	r2, [pc, #8]	; (80a1f58 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a1f4e:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a1f52:	2204      	movs	r2, #4
 80a1f54:	7502      	strb	r2, [r0, #20]
}
 80a1f56:	4770      	bx	lr
 80a1f58:	080a2b34 	.word	0x080a2b34

080a1f5c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a1f5c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1f5e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1f62:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a1f66:	2304      	movs	r3, #4
 80a1f68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a1f6c:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1f70:	6044      	str	r4, [r0, #4]
 80a1f72:	7503      	strb	r3, [r0, #20]
}
 80a1f74:	bd10      	pop	{r4, pc}
	...

080a1f78 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1f7a:	4d04      	ldr	r5, [pc, #16]	; (80a1f8c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1f7c:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1f7e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1f82:	9500      	str	r5, [sp, #0]
 80a1f84:	f7ff ffea 	bl	80a1f5c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1f88:	b003      	add	sp, #12
 80a1f8a:	bd30      	pop	{r4, r5, pc}
 80a1f8c:	080a2b34 	.word	0x080a2b34

080a1f90 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1f90:	4b01      	ldr	r3, [pc, #4]	; (80a1f98 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1f92:	4a02      	ldr	r2, [pc, #8]	; (80a1f9c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1f94:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a1f96:	4770      	bx	lr
 80a1f98:	200007c4 	.word	0x200007c4
 80a1f9c:	080a2b40 	.word	0x080a2b40

080a1fa0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1fa0:	2300      	movs	r3, #0
 80a1fa2:	6840      	ldr	r0, [r0, #4]
 80a1fa4:	461a      	mov	r2, r3
 80a1fa6:	f7ff be9f 	b.w	80a1ce8 <network_connect>

080a1faa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1faa:	2200      	movs	r2, #0
 80a1fac:	2102      	movs	r1, #2
 80a1fae:	6840      	ldr	r0, [r0, #4]
 80a1fb0:	f7ff beaa 	b.w	80a1d08 <network_disconnect>

080a1fb4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1fb4:	2200      	movs	r2, #0
 80a1fb6:	6840      	ldr	r0, [r0, #4]
 80a1fb8:	4611      	mov	r1, r2
 80a1fba:	f7ff be9d 	b.w	80a1cf8 <network_connecting>

080a1fbe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1fbe:	2200      	movs	r2, #0
 80a1fc0:	6840      	ldr	r0, [r0, #4]
 80a1fc2:	4611      	mov	r1, r2
 80a1fc4:	f7ff bea8 	b.w	80a1d18 <network_ready>

080a1fc8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1fc8:	2300      	movs	r3, #0
 80a1fca:	6840      	ldr	r0, [r0, #4]
 80a1fcc:	461a      	mov	r2, r3
 80a1fce:	4619      	mov	r1, r3
 80a1fd0:	f7ff beaa 	b.w	80a1d28 <network_on>

080a1fd4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1fd4:	2300      	movs	r3, #0
 80a1fd6:	6840      	ldr	r0, [r0, #4]
 80a1fd8:	461a      	mov	r2, r3
 80a1fda:	4619      	mov	r1, r3
 80a1fdc:	f7ff beac 	b.w	80a1d38 <network_off>

080a1fe0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a1fe0:	2100      	movs	r1, #0
 80a1fe2:	6840      	ldr	r0, [r0, #4]
 80a1fe4:	f7ff bed0 	b.w	80a1d88 <network_is_on>

080a1fe8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a1fe8:	2100      	movs	r1, #0
 80a1fea:	6840      	ldr	r0, [r0, #4]
 80a1fec:	f7ff bed4 	b.w	80a1d98 <network_is_off>

080a1ff0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1ff0:	2200      	movs	r2, #0
 80a1ff2:	6840      	ldr	r0, [r0, #4]
 80a1ff4:	f081 0101 	eor.w	r1, r1, #1
 80a1ff8:	f7ff bea6 	b.w	80a1d48 <network_listen>

080a1ffc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1ffc:	2200      	movs	r2, #0
 80a1ffe:	6840      	ldr	r0, [r0, #4]
 80a2000:	f7ff beb2 	b.w	80a1d68 <network_set_listen_timeout>

080a2004 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2004:	2200      	movs	r2, #0
 80a2006:	6840      	ldr	r0, [r0, #4]
 80a2008:	4611      	mov	r1, r2
 80a200a:	f7ff beb5 	b.w	80a1d78 <network_get_listen_timeout>

080a200e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a200e:	2200      	movs	r2, #0
 80a2010:	6840      	ldr	r0, [r0, #4]
 80a2012:	4611      	mov	r1, r2
 80a2014:	f7ff bea0 	b.w	80a1d58 <network_listening>

080a2018 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2018:	b570      	push	{r4, r5, r6, lr}
 80a201a:	4615      	mov	r5, r2
 80a201c:	b08e      	sub	sp, #56	; 0x38
 80a201e:	4604      	mov	r4, r0
    IPAddress addr;
 80a2020:	a808      	add	r0, sp, #32
 80a2022:	f7ff ff73 	bl	80a1f0c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2026:	2211      	movs	r2, #17
 80a2028:	2100      	movs	r1, #0
 80a202a:	a803      	add	r0, sp, #12
 80a202c:	f000 fc4e 	bl	80a28cc <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2030:	2600      	movs	r6, #0
 80a2032:	4628      	mov	r0, r5
 80a2034:	f000 fcaa 	bl	80a298c <strlen>
 80a2038:	4b0a      	ldr	r3, [pc, #40]	; (80a2064 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a203a:	9600      	str	r6, [sp, #0]
 80a203c:	b281      	uxth	r1, r0
 80a203e:	685b      	ldr	r3, [r3, #4]
 80a2040:	4628      	mov	r0, r5
 80a2042:	aa03      	add	r2, sp, #12
 80a2044:	f7ff fe0c 	bl	80a1c60 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2048:	b130      	cbz	r0, 80a2058 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a204a:	4631      	mov	r1, r6
 80a204c:	4620      	mov	r0, r4
 80a204e:	f7ff ff7d 	bl	80a1f4c <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2052:	4620      	mov	r0, r4
 80a2054:	b00e      	add	sp, #56	; 0x38
 80a2056:	bd70      	pop	{r4, r5, r6, pc}
 80a2058:	4620      	mov	r0, r4
 80a205a:	a903      	add	r1, sp, #12
 80a205c:	f7ff ff64 	bl	80a1f28 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a2060:	e7f7      	b.n	80a2052 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a2062:	bf00      	nop
 80a2064:	20000c48 	.word	0x20000c48

080a2068 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2068:	4b02      	ldr	r3, [pc, #8]	; (80a2074 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a206a:	4a03      	ldr	r2, [pc, #12]	; (80a2078 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a206c:	601a      	str	r2, [r3, #0]
 80a206e:	2200      	movs	r2, #0
 80a2070:	605a      	str	r2, [r3, #4]

} // spark
 80a2072:	4770      	bx	lr
 80a2074:	200007c8 	.word	0x200007c8
 80a2078:	080a2b4c 	.word	0x080a2b4c

080a207c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a207c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a207e:	4606      	mov	r6, r0
 80a2080:	460d      	mov	r5, r1
  size_t n = 0;
 80a2082:	2400      	movs	r4, #0
 80a2084:	188f      	adds	r7, r1, r2
  while (size--) {
 80a2086:	42bd      	cmp	r5, r7
 80a2088:	d00c      	beq.n	80a20a4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a208a:	6833      	ldr	r3, [r6, #0]
 80a208c:	4630      	mov	r0, r6
 80a208e:	689b      	ldr	r3, [r3, #8]
 80a2090:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2094:	4798      	blx	r3
     if (chunk>=0)
 80a2096:	1e03      	subs	r3, r0, #0
 80a2098:	db01      	blt.n	80a209e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a209a:	441c      	add	r4, r3
  while (size--) {
 80a209c:	e7f3      	b.n	80a2086 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a209e:	2c00      	cmp	r4, #0
 80a20a0:	bf08      	it	eq
 80a20a2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a20a4:	4620      	mov	r0, r4
 80a20a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a20a8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a20a8:	b570      	push	{r4, r5, r6, lr}
 80a20aa:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a20ac:	460c      	mov	r4, r1
    }
 80a20ae:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a20b0:	b149      	cbz	r1, 80a20c6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a20b2:	f000 fc6b 	bl	80a298c <strlen>
 80a20b6:	682b      	ldr	r3, [r5, #0]
 80a20b8:	4602      	mov	r2, r0
 80a20ba:	4621      	mov	r1, r4
 80a20bc:	4628      	mov	r0, r5
    }
 80a20be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a20c2:	68db      	ldr	r3, [r3, #12]
 80a20c4:	4718      	bx	r3
    }
 80a20c6:	bd70      	pop	{r4, r5, r6, pc}

080a20c8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a20c8:	6803      	ldr	r3, [r0, #0]
 80a20ca:	689b      	ldr	r3, [r3, #8]
 80a20cc:	4718      	bx	r3

080a20ce <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a20ce:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a20d0:	2a01      	cmp	r2, #1
 80a20d2:	bf98      	it	ls
 80a20d4:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a20d6:	b530      	push	{r4, r5, lr}
 80a20d8:	b08b      	sub	sp, #44	; 0x2c
 80a20da:	460c      	mov	r4, r1
  *str = '\0';
 80a20dc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a20e0:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a20e2:	4625      	mov	r5, r4
 80a20e4:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a20e8:	fb04 5312 	mls	r3, r4, r2, r5
 80a20ec:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a20ee:	2b09      	cmp	r3, #9
 80a20f0:	bf94      	ite	ls
 80a20f2:	3330      	addls	r3, #48	; 0x30
 80a20f4:	3337      	addhi	r3, #55	; 0x37
 80a20f6:	b2db      	uxtb	r3, r3
  } while(n);
 80a20f8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a20fa:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a20fe:	d9f0      	bls.n	80a20e2 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a2100:	f7ff ffd2 	bl	80a20a8 <_ZN5Print5writeEPKc>
}
 80a2104:	b00b      	add	sp, #44	; 0x2c
 80a2106:	bd30      	pop	{r4, r5, pc}

080a2108 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
 80a2108:	b510      	push	{r4, lr}
  if (0 == max) {
 80a210a:	4604      	mov	r4, r0
 80a210c:	b128      	cbz	r0, 80a211a <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
 80a210e:	f000 fc09 	bl	80a2924 <rand>
 80a2112:	fb90 f3f4 	sdiv	r3, r0, r4
 80a2116:	fb03 0414 	mls	r4, r3, r4, r0
}
 80a211a:	4620      	mov	r0, r4
 80a211c:	bd10      	pop	{r4, pc}

080a211e <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
 80a211e:	4288      	cmp	r0, r1
{
 80a2120:	b510      	push	{r4, lr}
 80a2122:	4604      	mov	r4, r0
  if (min >= max) {
 80a2124:	da03      	bge.n	80a212e <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
 80a2126:	1a08      	subs	r0, r1, r0
 80a2128:	f7ff ffee 	bl	80a2108 <_Z6randomi>
 80a212c:	4404      	add	r4, r0
}
 80a212e:	4620      	mov	r0, r4
 80a2130:	bd10      	pop	{r4, pc}
	...

080a2134 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2134:	2200      	movs	r2, #0
 80a2136:	4b01      	ldr	r3, [pc, #4]	; (80a213c <_GLOBAL__sub_I_RGB+0x8>)
 80a2138:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a213a:	4770      	bx	lr
 80a213c:	200007d0 	.word	0x200007d0

080a2140 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a2140:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a2142:	2600      	movs	r6, #0
 80a2144:	4604      	mov	r4, r0
 80a2146:	460d      	mov	r5, r1
 80a2148:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a214c:	f7ff fc8e 	bl	80a1a6c <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a2150:	4628      	mov	r0, r5
    _spi = spi;
 80a2152:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a2154:	f7ff fd04 	bl	80a1b60 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a2158:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a215a:	6066      	str	r6, [r4, #4]
}
 80a215c:	bd70      	pop	{r4, r5, r6, pc}

080a215e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a215e:	b510      	push	{r4, lr}
 80a2160:	4604      	mov	r4, r0
{
	free(buffer);
 80a2162:	6800      	ldr	r0, [r0, #0]
 80a2164:	f7ff fe28 	bl	80a1db8 <free>
}
 80a2168:	4620      	mov	r0, r4
 80a216a:	bd10      	pop	{r4, pc}

080a216c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a216c:	b510      	push	{r4, lr}
 80a216e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a2170:	6800      	ldr	r0, [r0, #0]
 80a2172:	b108      	cbz	r0, 80a2178 <_ZN6String10invalidateEv+0xc>
 80a2174:	f7ff fe20 	bl	80a1db8 <free>
	buffer = NULL;
 80a2178:	2300      	movs	r3, #0
	capacity = len = 0;
 80a217a:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a217e:	6023      	str	r3, [r4, #0]
}
 80a2180:	bd10      	pop	{r4, pc}

080a2182 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a2182:	b538      	push	{r3, r4, r5, lr}
 80a2184:	4604      	mov	r4, r0
 80a2186:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a2188:	6800      	ldr	r0, [r0, #0]
 80a218a:	3101      	adds	r1, #1
 80a218c:	f7ff fe1c 	bl	80a1dc8 <realloc>
	if (newbuffer) {
 80a2190:	b110      	cbz	r0, 80a2198 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a2192:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a2196:	2001      	movs	r0, #1
	}
	return 0;
}
 80a2198:	bd38      	pop	{r3, r4, r5, pc}

080a219a <_ZN6String7reserveEj>:
{
 80a219a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a219c:	6803      	ldr	r3, [r0, #0]
{
 80a219e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a21a0:	b123      	cbz	r3, 80a21ac <_ZN6String7reserveEj+0x12>
 80a21a2:	6843      	ldr	r3, [r0, #4]
 80a21a4:	428b      	cmp	r3, r1
 80a21a6:	d301      	bcc.n	80a21ac <_ZN6String7reserveEj+0x12>
 80a21a8:	2001      	movs	r0, #1
}
 80a21aa:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a21ac:	4620      	mov	r0, r4
 80a21ae:	f7ff ffe8 	bl	80a2182 <_ZN6String12changeBufferEj>
 80a21b2:	2800      	cmp	r0, #0
 80a21b4:	d0f9      	beq.n	80a21aa <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a21b6:	68a3      	ldr	r3, [r4, #8]
 80a21b8:	2b00      	cmp	r3, #0
 80a21ba:	d1f5      	bne.n	80a21a8 <_ZN6String7reserveEj+0xe>
 80a21bc:	6822      	ldr	r2, [r4, #0]
 80a21be:	7013      	strb	r3, [r2, #0]
 80a21c0:	e7f2      	b.n	80a21a8 <_ZN6String7reserveEj+0xe>

080a21c2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a21c2:	b570      	push	{r4, r5, r6, lr}
 80a21c4:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a21c6:	4611      	mov	r1, r2
{
 80a21c8:	4604      	mov	r4, r0
 80a21ca:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a21cc:	f7ff ffe5 	bl	80a219a <_ZN6String7reserveEj>
 80a21d0:	b920      	cbnz	r0, 80a21dc <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a21d2:	4620      	mov	r0, r4
 80a21d4:	f7ff ffca 	bl	80a216c <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a21d8:	4620      	mov	r0, r4
 80a21da:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a21dc:	462a      	mov	r2, r5
 80a21de:	4631      	mov	r1, r6
 80a21e0:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a21e2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a21e4:	f000 fb64 	bl	80a28b0 <memcpy>
	buffer[len] = 0;
 80a21e8:	2100      	movs	r1, #0
 80a21ea:	6822      	ldr	r2, [r4, #0]
 80a21ec:	68a3      	ldr	r3, [r4, #8]
 80a21ee:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a21f0:	e7f2      	b.n	80a21d8 <_ZN6String4copyEPKcj+0x16>

080a21f2 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a21f2:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a21f4:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a21f6:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a21f8:	460d      	mov	r5, r1
	capacity = 0;
 80a21fa:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a21fe:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2200:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a2202:	b139      	cbz	r1, 80a2214 <_ZN6StringC1EPKc+0x22>
 80a2204:	4608      	mov	r0, r1
 80a2206:	f000 fbc1 	bl	80a298c <strlen>
 80a220a:	4629      	mov	r1, r5
 80a220c:	4602      	mov	r2, r0
 80a220e:	4620      	mov	r0, r4
 80a2210:	f7ff ffd7 	bl	80a21c2 <_ZN6String4copyEPKcj>
}
 80a2214:	4620      	mov	r0, r4
 80a2216:	bd38      	pop	{r3, r4, r5, pc}

080a2218 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a2218:	4288      	cmp	r0, r1
{
 80a221a:	b510      	push	{r4, lr}
 80a221c:	460b      	mov	r3, r1
 80a221e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a2220:	d004      	beq.n	80a222c <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a2222:	6809      	ldr	r1, [r1, #0]
 80a2224:	b121      	cbz	r1, 80a2230 <_ZN6StringaSERKS_+0x18>
 80a2226:	689a      	ldr	r2, [r3, #8]
 80a2228:	f7ff ffcb 	bl	80a21c2 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a222c:	4620      	mov	r0, r4
 80a222e:	bd10      	pop	{r4, pc}
	else invalidate();
 80a2230:	f7ff ff9c 	bl	80a216c <_ZN6String10invalidateEv>
 80a2234:	e7fa      	b.n	80a222c <_ZN6StringaSERKS_+0x14>

080a2236 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a2236:	2300      	movs	r3, #0
String::String(const String &value)
 80a2238:	b510      	push	{r4, lr}
 80a223a:	4604      	mov	r4, r0
	capacity = 0;
 80a223c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a2240:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2242:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a2244:	f7ff ffe8 	bl	80a2218 <_ZN6StringaSERKS_>
}
 80a2248:	4620      	mov	r0, r4
 80a224a:	bd10      	pop	{r4, pc}

080a224c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a224c:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a224e:	2000      	movs	r0, #0
 80a2250:	4b04      	ldr	r3, [pc, #16]	; (80a2264 <_GLOBAL__sub_I_System+0x18>)
 80a2252:	601a      	str	r2, [r3, #0]
 80a2254:	4b04      	ldr	r3, [pc, #16]	; (80a2268 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a2256:	4a05      	ldr	r2, [pc, #20]	; (80a226c <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a2258:	6018      	str	r0, [r3, #0]
 80a225a:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a225c:	7198      	strb	r0, [r3, #6]
 80a225e:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2260:	f7ff bd0e 	b.w	80a1c80 <set_system_mode>
 80a2264:	200007ec 	.word	0x200007ec
 80a2268:	200007e0 	.word	0x200007e0
 80a226c:	ffff0000 	.word	0xffff0000

080a2270 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2270:	4b02      	ldr	r3, [pc, #8]	; (80a227c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2272:	681a      	ldr	r2, [r3, #0]
 80a2274:	4b02      	ldr	r3, [pc, #8]	; (80a2280 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2276:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a2278:	4770      	bx	lr
 80a227a:	bf00      	nop
 80a227c:	20000748 	.word	0x20000748
 80a2280:	200007f0 	.word	0x200007f0

080a2284 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a2284:	4770      	bx	lr

080a2286 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2286:	7441      	strb	r1, [r0, #17]
}
 80a2288:	4770      	bx	lr

080a228a <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a228a:	4770      	bx	lr

080a228c <_ZN11USARTSerial17availableForWriteEv>:
{
 80a228c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a228e:	7c00      	ldrb	r0, [r0, #16]
 80a2290:	f7ff fcae 	bl	80a1bf0 <hal_usart_available_data_for_write>
}
 80a2294:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2298:	bd08      	pop	{r3, pc}

080a229a <_ZN11USARTSerial9availableEv>:
{
 80a229a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a229c:	7c00      	ldrb	r0, [r0, #16]
 80a229e:	f7ff fc7f 	bl	80a1ba0 <hal_usart_available>
}
 80a22a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a22a6:	bd08      	pop	{r3, pc}

080a22a8 <_ZN11USARTSerial4peekEv>:
{
 80a22a8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a22aa:	7c00      	ldrb	r0, [r0, #16]
 80a22ac:	f7ff fc88 	bl	80a1bc0 <hal_usart_peek>
}
 80a22b0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a22b4:	bd08      	pop	{r3, pc}

080a22b6 <_ZN11USARTSerial4readEv>:
{
 80a22b6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a22b8:	7c00      	ldrb	r0, [r0, #16]
 80a22ba:	f7ff fc79 	bl	80a1bb0 <hal_usart_read>
}
 80a22be:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a22c2:	bd08      	pop	{r3, pc}

080a22c4 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a22c4:	7c00      	ldrb	r0, [r0, #16]
 80a22c6:	f7ff bc83 	b.w	80a1bd0 <hal_usart_flush>

080a22ca <_ZN11USARTSerial5writeEh>:
{
 80a22ca:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a22cc:	7c46      	ldrb	r6, [r0, #17]
{
 80a22ce:	4604      	mov	r4, r0
 80a22d0:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a22d2:	b12e      	cbz	r6, 80a22e0 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a22d4:	4629      	mov	r1, r5
 80a22d6:	7c20      	ldrb	r0, [r4, #16]
}
 80a22d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a22dc:	f7ff bc58 	b.w	80a1b90 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a22e0:	7c00      	ldrb	r0, [r0, #16]
 80a22e2:	f7ff fc85 	bl	80a1bf0 <hal_usart_available_data_for_write>
 80a22e6:	2800      	cmp	r0, #0
 80a22e8:	dcf4      	bgt.n	80a22d4 <_ZN11USARTSerial5writeEh+0xa>
}
 80a22ea:	4630      	mov	r0, r6
 80a22ec:	bd70      	pop	{r4, r5, r6, pc}

080a22ee <_ZN11USARTSerialD0Ev>:
 80a22ee:	b510      	push	{r4, lr}
 80a22f0:	4604      	mov	r4, r0
 80a22f2:	2114      	movs	r1, #20
 80a22f4:	f000 fad2 	bl	80a289c <_ZdlPvj>
 80a22f8:	4620      	mov	r0, r4
 80a22fa:	bd10      	pop	{r4, pc}

080a22fc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a22fc:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a2300:	b510      	push	{r4, lr}
 80a2302:	4604      	mov	r4, r0
 80a2304:	4608      	mov	r0, r1
 80a2306:	4611      	mov	r1, r2
 80a2308:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a230c:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a2310:	4a04      	ldr	r2, [pc, #16]	; (80a2324 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a2312:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a2314:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a2316:	2201      	movs	r2, #1
 80a2318:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a231a:	461a      	mov	r2, r3
 80a231c:	f7ff fc30 	bl	80a1b80 <hal_usart_init>
}
 80a2320:	4620      	mov	r0, r4
 80a2322:	bd10      	pop	{r4, pc}
 80a2324:	080a2ba4 	.word	0x080a2ba4

080a2328 <_Z22__fetch_global_Serial1v>:
{
 80a2328:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a232a:	4d0c      	ldr	r5, [pc, #48]	; (80a235c <_Z22__fetch_global_Serial1v+0x34>)
 80a232c:	7829      	ldrb	r1, [r5, #0]
 80a232e:	f3bf 8f5b 	dmb	ish
 80a2332:	f011 0401 	ands.w	r4, r1, #1
 80a2336:	d10f      	bne.n	80a2358 <_Z22__fetch_global_Serial1v+0x30>
 80a2338:	4628      	mov	r0, r5
 80a233a:	f7fd feb0 	bl	80a009e <__cxa_guard_acquire>
 80a233e:	b158      	cbz	r0, 80a2358 <_Z22__fetch_global_Serial1v+0x30>
 80a2340:	4621      	mov	r1, r4
 80a2342:	4b07      	ldr	r3, [pc, #28]	; (80a2360 <_Z22__fetch_global_Serial1v+0x38>)
 80a2344:	4a07      	ldr	r2, [pc, #28]	; (80a2364 <_Z22__fetch_global_Serial1v+0x3c>)
 80a2346:	4808      	ldr	r0, [pc, #32]	; (80a2368 <_Z22__fetch_global_Serial1v+0x40>)
 80a2348:	f7ff ffd8 	bl	80a22fc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a234c:	4628      	mov	r0, r5
 80a234e:	f7fd feab 	bl	80a00a8 <__cxa_guard_release>
 80a2352:	4806      	ldr	r0, [pc, #24]	; (80a236c <_Z22__fetch_global_Serial1v+0x44>)
 80a2354:	f000 faa6 	bl	80a28a4 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2358:	4803      	ldr	r0, [pc, #12]	; (80a2368 <_Z22__fetch_global_Serial1v+0x40>)
 80a235a:	bd38      	pop	{r3, r4, r5, pc}
 80a235c:	200007f4 	.word	0x200007f4
 80a2360:	2000087c 	.word	0x2000087c
 80a2364:	200007f8 	.word	0x200007f8
 80a2368:	20000900 	.word	0x20000900
 80a236c:	080a228b 	.word	0x080a228b

080a2370 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2370:	7441      	strb	r1, [r0, #17]
}
 80a2372:	4770      	bx	lr

080a2374 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2374:	4770      	bx	lr

080a2376 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2376:	4770      	bx	lr

080a2378 <_ZN9USBSerial4readEv>:
{
 80a2378:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a237a:	2100      	movs	r1, #0
 80a237c:	7c00      	ldrb	r0, [r0, #16]
 80a237e:	f7ff fc57 	bl	80a1c30 <HAL_USB_USART_Receive_Data>
}
 80a2382:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2386:	bd08      	pop	{r3, pc}

080a2388 <_ZN9USBSerial4peekEv>:
{
 80a2388:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a238a:	2101      	movs	r1, #1
 80a238c:	7c00      	ldrb	r0, [r0, #16]
 80a238e:	f7ff fc4f 	bl	80a1c30 <HAL_USB_USART_Receive_Data>
}
 80a2392:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2396:	bd08      	pop	{r3, pc}

080a2398 <_ZN9USBSerial17availableForWriteEv>:
{
 80a2398:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a239a:	7c00      	ldrb	r0, [r0, #16]
 80a239c:	f7ff fc40 	bl	80a1c20 <HAL_USB_USART_Available_Data_For_Write>
}
 80a23a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a23a4:	bd08      	pop	{r3, pc}

080a23a6 <_ZN9USBSerial9availableEv>:
{
 80a23a6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a23a8:	7c00      	ldrb	r0, [r0, #16]
 80a23aa:	f7ff fc31 	bl	80a1c10 <HAL_USB_USART_Available_Data>
}
 80a23ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a23b2:	bd08      	pop	{r3, pc}

080a23b4 <_ZN9USBSerial5writeEh>:
{
 80a23b4:	b538      	push	{r3, r4, r5, lr}
 80a23b6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a23b8:	7c00      	ldrb	r0, [r0, #16]
{
 80a23ba:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a23bc:	f7ff fc30 	bl	80a1c20 <HAL_USB_USART_Available_Data_For_Write>
 80a23c0:	2800      	cmp	r0, #0
 80a23c2:	dc01      	bgt.n	80a23c8 <_ZN9USBSerial5writeEh+0x14>
 80a23c4:	7c60      	ldrb	r0, [r4, #17]
 80a23c6:	b128      	cbz	r0, 80a23d4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a23c8:	4629      	mov	r1, r5
 80a23ca:	7c20      	ldrb	r0, [r4, #16]
 80a23cc:	f7ff fc38 	bl	80a1c40 <HAL_USB_USART_Send_Data>
 80a23d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a23d4:	bd38      	pop	{r3, r4, r5, pc}

080a23d6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a23d6:	7c00      	ldrb	r0, [r0, #16]
 80a23d8:	f7ff bc3a 	b.w	80a1c50 <HAL_USB_USART_Flush_Data>

080a23dc <_ZN9USBSerialD0Ev>:
 80a23dc:	b510      	push	{r4, lr}
 80a23de:	4604      	mov	r4, r0
 80a23e0:	2114      	movs	r1, #20
 80a23e2:	f000 fa5b 	bl	80a289c <_ZdlPvj>
 80a23e6:	4620      	mov	r0, r4
 80a23e8:	bd10      	pop	{r4, pc}

080a23ea <__tcf_1>:
 80a23ea:	4770      	bx	lr

080a23ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a23ec:	b510      	push	{r4, lr}
 80a23ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a23f2:	4604      	mov	r4, r0
 80a23f4:	4608      	mov	r0, r1
 80a23f6:	2100      	movs	r1, #0
 80a23f8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a23fc:	4b04      	ldr	r3, [pc, #16]	; (80a2410 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a23fe:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2400:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a2402:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a2404:	4611      	mov	r1, r2
  _blocking = true;
 80a2406:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a2408:	f7ff fbfa 	bl	80a1c00 <HAL_USB_USART_Init>
}
 80a240c:	4620      	mov	r0, r4
 80a240e:	bd10      	pop	{r4, pc}
 80a2410:	080a2bd4 	.word	0x080a2bd4

080a2414 <_Z19acquireSerialBufferv>:
{
 80a2414:	b510      	push	{r4, lr}
 80a2416:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2418:	2214      	movs	r2, #20
 80a241a:	2100      	movs	r1, #0
 80a241c:	f000 fa56 	bl	80a28cc <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a2420:	4b05      	ldr	r3, [pc, #20]	; (80a2438 <_Z19acquireSerialBufferv+0x24>)
}
 80a2422:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a2424:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2426:	4b05      	ldr	r3, [pc, #20]	; (80a243c <_Z19acquireSerialBufferv+0x28>)
 80a2428:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a242a:	f240 1301 	movw	r3, #257	; 0x101
 80a242e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2430:	2381      	movs	r3, #129	; 0x81
 80a2432:	8223      	strh	r3, [r4, #16]
}
 80a2434:	bd10      	pop	{r4, pc}
 80a2436:	bf00      	nop
 80a2438:	20000944 	.word	0x20000944
 80a243c:	20000a45 	.word	0x20000a45

080a2440 <_Z16_fetch_usbserialv>:
{
 80a2440:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2442:	4d0e      	ldr	r5, [pc, #56]	; (80a247c <_Z16_fetch_usbserialv+0x3c>)
{
 80a2444:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2446:	a801      	add	r0, sp, #4
 80a2448:	f7ff ffe4 	bl	80a2414 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a244c:	7829      	ldrb	r1, [r5, #0]
 80a244e:	f3bf 8f5b 	dmb	ish
 80a2452:	f011 0401 	ands.w	r4, r1, #1
 80a2456:	d10e      	bne.n	80a2476 <_Z16_fetch_usbserialv+0x36>
 80a2458:	4628      	mov	r0, r5
 80a245a:	f7fd fe20 	bl	80a009e <__cxa_guard_acquire>
 80a245e:	b150      	cbz	r0, 80a2476 <_Z16_fetch_usbserialv+0x36>
 80a2460:	4621      	mov	r1, r4
 80a2462:	aa01      	add	r2, sp, #4
 80a2464:	4806      	ldr	r0, [pc, #24]	; (80a2480 <_Z16_fetch_usbserialv+0x40>)
 80a2466:	f7ff ffc1 	bl	80a23ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a246a:	4628      	mov	r0, r5
 80a246c:	f7fd fe1c 	bl	80a00a8 <__cxa_guard_release>
 80a2470:	4804      	ldr	r0, [pc, #16]	; (80a2484 <_Z16_fetch_usbserialv+0x44>)
 80a2472:	f000 fa17 	bl	80a28a4 <atexit>
	return _usbserial;
}
 80a2476:	4802      	ldr	r0, [pc, #8]	; (80a2480 <_Z16_fetch_usbserialv+0x40>)
 80a2478:	b007      	add	sp, #28
 80a247a:	bd30      	pop	{r4, r5, pc}
 80a247c:	20000914 	.word	0x20000914
 80a2480:	2000091c 	.word	0x2000091c
 80a2484:	080a2375 	.word	0x080a2375

080a2488 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2488:	b510      	push	{r4, lr}
 80a248a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a248c:	2214      	movs	r2, #20
 80a248e:	2100      	movs	r1, #0
 80a2490:	f000 fa1c 	bl	80a28cc <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2494:	4b05      	ldr	r3, [pc, #20]	; (80a24ac <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2496:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a2498:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a249a:	4b05      	ldr	r3, [pc, #20]	; (80a24b0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a249c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a249e:	f240 1301 	movw	r3, #257	; 0x101
 80a24a2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a24a4:	2381      	movs	r3, #129	; 0x81
 80a24a6:	8223      	strh	r3, [r4, #16]
}
 80a24a8:	bd10      	pop	{r4, pc}
 80a24aa:	bf00      	nop
 80a24ac:	20000ac6 	.word	0x20000ac6
 80a24b0:	20000bc7 	.word	0x20000bc7

080a24b4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a24b4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a24b6:	4c0e      	ldr	r4, [pc, #56]	; (80a24f0 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a24b8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a24ba:	a801      	add	r0, sp, #4
 80a24bc:	f7ff ffe4 	bl	80a2488 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a24c0:	7823      	ldrb	r3, [r4, #0]
 80a24c2:	f3bf 8f5b 	dmb	ish
 80a24c6:	07db      	lsls	r3, r3, #31
 80a24c8:	d40e      	bmi.n	80a24e8 <_Z17_fetch_usbserial1v+0x34>
 80a24ca:	4620      	mov	r0, r4
 80a24cc:	f7fd fde7 	bl	80a009e <__cxa_guard_acquire>
 80a24d0:	b150      	cbz	r0, 80a24e8 <_Z17_fetch_usbserial1v+0x34>
 80a24d2:	2101      	movs	r1, #1
 80a24d4:	aa01      	add	r2, sp, #4
 80a24d6:	4807      	ldr	r0, [pc, #28]	; (80a24f4 <_Z17_fetch_usbserial1v+0x40>)
 80a24d8:	f7ff ff88 	bl	80a23ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a24dc:	4620      	mov	r0, r4
 80a24de:	f7fd fde3 	bl	80a00a8 <__cxa_guard_release>
 80a24e2:	4805      	ldr	r0, [pc, #20]	; (80a24f8 <_Z17_fetch_usbserial1v+0x44>)
 80a24e4:	f000 f9de 	bl	80a28a4 <atexit>
  return _usbserial1;
}
 80a24e8:	4802      	ldr	r0, [pc, #8]	; (80a24f4 <_Z17_fetch_usbserial1v+0x40>)
 80a24ea:	b006      	add	sp, #24
 80a24ec:	bd10      	pop	{r4, pc}
 80a24ee:	bf00      	nop
 80a24f0:	20000918 	.word	0x20000918
 80a24f4:	20000930 	.word	0x20000930
 80a24f8:	080a23eb 	.word	0x080a23eb

080a24fc <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a24fc:	2200      	movs	r2, #0
 80a24fe:	6840      	ldr	r0, [r0, #4]
 80a2500:	4611      	mov	r1, r2
 80a2502:	f7ff bc09 	b.w	80a1d18 <network_ready>

080a2506 <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a2506:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2508:	4615      	mov	r5, r2
 80a250a:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a250c:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a250e:	460e      	mov	r6, r1
 80a2510:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a2512:	2100      	movs	r1, #0
 80a2514:	a803      	add	r0, sp, #12
 80a2516:	f000 f9d9 	bl	80a28cc <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a251a:	4628      	mov	r0, r5
 80a251c:	f000 fa36 	bl	80a298c <strlen>
 80a2520:	2700      	movs	r7, #0
 80a2522:	b281      	uxth	r1, r0
 80a2524:	6873      	ldr	r3, [r6, #4]
 80a2526:	4628      	mov	r0, r5
 80a2528:	9700      	str	r7, [sp, #0]
 80a252a:	aa03      	add	r2, sp, #12
 80a252c:	f7ff fb98 	bl	80a1c60 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2530:	b130      	cbz	r0, 80a2540 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a2532:	4639      	mov	r1, r7
 80a2534:	4620      	mov	r0, r4
 80a2536:	f7ff fd09 	bl	80a1f4c <_ZN9IPAddressC1Em>
    }
 80a253a:	4620      	mov	r0, r4
 80a253c:	b009      	add	sp, #36	; 0x24
 80a253e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2540:	4620      	mov	r0, r4
 80a2542:	a903      	add	r1, sp, #12
 80a2544:	f7ff fcf0 	bl	80a1f28 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a2548:	e7f7      	b.n	80a253a <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a254a <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a254a:	2200      	movs	r2, #0
 80a254c:	6840      	ldr	r0, [r0, #4]
 80a254e:	4611      	mov	r1, r2
 80a2550:	f7ff bc02 	b.w	80a1d58 <network_listening>

080a2554 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a2554:	2200      	movs	r2, #0
 80a2556:	6840      	ldr	r0, [r0, #4]
 80a2558:	4611      	mov	r1, r2
 80a255a:	f7ff bc0d 	b.w	80a1d78 <network_get_listen_timeout>

080a255e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a255e:	2200      	movs	r2, #0
 80a2560:	6840      	ldr	r0, [r0, #4]
 80a2562:	f7ff bc01 	b.w	80a1d68 <network_set_listen_timeout>

080a2566 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2566:	2200      	movs	r2, #0
 80a2568:	6840      	ldr	r0, [r0, #4]
 80a256a:	f081 0101 	eor.w	r1, r1, #1
 80a256e:	f7ff bbeb 	b.w	80a1d48 <network_listen>

080a2572 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a2572:	2300      	movs	r3, #0
 80a2574:	6840      	ldr	r0, [r0, #4]
 80a2576:	461a      	mov	r2, r3
 80a2578:	4619      	mov	r1, r3
 80a257a:	f7ff bbdd 	b.w	80a1d38 <network_off>

080a257e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a257e:	2300      	movs	r3, #0
 80a2580:	6840      	ldr	r0, [r0, #4]
 80a2582:	461a      	mov	r2, r3
 80a2584:	4619      	mov	r1, r3
 80a2586:	f7ff bbcf 	b.w	80a1d28 <network_on>

080a258a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a258a:	2200      	movs	r2, #0
 80a258c:	6840      	ldr	r0, [r0, #4]
 80a258e:	4611      	mov	r1, r2
 80a2590:	f7ff bbb2 	b.w	80a1cf8 <network_connecting>

080a2594 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2594:	2200      	movs	r2, #0
 80a2596:	2102      	movs	r1, #2
 80a2598:	6840      	ldr	r0, [r0, #4]
 80a259a:	f7ff bbb5 	b.w	80a1d08 <network_disconnect>

080a259e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a259e:	2300      	movs	r3, #0
 80a25a0:	6840      	ldr	r0, [r0, #4]
 80a25a2:	461a      	mov	r2, r3
 80a25a4:	f7ff bba0 	b.w	80a1ce8 <network_connect>

080a25a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a25a8:	2204      	movs	r2, #4
 80a25aa:	4b02      	ldr	r3, [pc, #8]	; (80a25b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a25ac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a25ae:	4a02      	ldr	r2, [pc, #8]	; (80a25b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a25b0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a25b2:	4770      	bx	lr
 80a25b4:	20000c48 	.word	0x20000c48
 80a25b8:	080a2c04 	.word	0x080a2c04

080a25bc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a25bc:	4b01      	ldr	r3, [pc, #4]	; (80a25c4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a25be:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a25c0:	4770      	bx	lr
 80a25c2:	bf00      	nop
 80a25c4:	2000074c 	.word	0x2000074c

080a25c8 <serialEventRun>:
{
 80a25c8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a25ca:	4b13      	ldr	r3, [pc, #76]	; (80a2618 <serialEventRun+0x50>)
 80a25cc:	b143      	cbz	r3, 80a25e0 <serialEventRun+0x18>
 80a25ce:	f7ff ff37 	bl	80a2440 <_Z16_fetch_usbserialv>
 80a25d2:	6803      	ldr	r3, [r0, #0]
 80a25d4:	691b      	ldr	r3, [r3, #16]
 80a25d6:	4798      	blx	r3
 80a25d8:	2800      	cmp	r0, #0
 80a25da:	dd01      	ble.n	80a25e0 <serialEventRun+0x18>
        serialEvent();
 80a25dc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a25e0:	4b0e      	ldr	r3, [pc, #56]	; (80a261c <serialEventRun+0x54>)
 80a25e2:	b143      	cbz	r3, 80a25f6 <serialEventRun+0x2e>
 80a25e4:	f7ff fea0 	bl	80a2328 <_Z22__fetch_global_Serial1v>
 80a25e8:	6803      	ldr	r3, [r0, #0]
 80a25ea:	691b      	ldr	r3, [r3, #16]
 80a25ec:	4798      	blx	r3
 80a25ee:	2800      	cmp	r0, #0
 80a25f0:	dd01      	ble.n	80a25f6 <serialEventRun+0x2e>
        serialEvent1();
 80a25f2:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a25f6:	4b0a      	ldr	r3, [pc, #40]	; (80a2620 <serialEventRun+0x58>)
 80a25f8:	b10b      	cbz	r3, 80a25fe <serialEventRun+0x36>
 80a25fa:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a25fe:	4b09      	ldr	r3, [pc, #36]	; (80a2624 <serialEventRun+0x5c>)
 80a2600:	b143      	cbz	r3, 80a2614 <serialEventRun+0x4c>
 80a2602:	f7ff ff57 	bl	80a24b4 <_Z17_fetch_usbserial1v>
 80a2606:	6803      	ldr	r3, [r0, #0]
 80a2608:	691b      	ldr	r3, [r3, #16]
 80a260a:	4798      	blx	r3
 80a260c:	2800      	cmp	r0, #0
 80a260e:	dd01      	ble.n	80a2614 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a2610:	f3af 8000 	nop.w
}
 80a2614:	bd08      	pop	{r3, pc}
 80a2616:	bf00      	nop
	...

080a2628 <_post_loop>:
{
 80a2628:	b508      	push	{r3, lr}
	serialEventRun();
 80a262a:	f7ff ffcd 	bl	80a25c8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a262e:	f7ff fa3d 	bl	80a1aac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2632:	4b01      	ldr	r3, [pc, #4]	; (80a2638 <_post_loop+0x10>)
 80a2634:	6018      	str	r0, [r3, #0]
}
 80a2636:	bd08      	pop	{r3, pc}
 80a2638:	20000c68 	.word	0x20000c68

080a263c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a263c:	4805      	ldr	r0, [pc, #20]	; (80a2654 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a263e:	4a06      	ldr	r2, [pc, #24]	; (80a2658 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a2640:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2642:	1a12      	subs	r2, r2, r0
 80a2644:	4905      	ldr	r1, [pc, #20]	; (80a265c <_Z33system_initialize_user_backup_ramv+0x20>)
 80a2646:	f000 f933 	bl	80a28b0 <memcpy>
    __backup_sram_signature = signature;
 80a264a:	4b05      	ldr	r3, [pc, #20]	; (80a2660 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a264c:	4a05      	ldr	r2, [pc, #20]	; (80a2664 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a264e:	601a      	str	r2, [r3, #0]
}
 80a2650:	bd08      	pop	{r3, pc}
 80a2652:	bf00      	nop
 80a2654:	40024000 	.word	0x40024000
 80a2658:	40024004 	.word	0x40024004
 80a265c:	080a2c60 	.word	0x080a2c60
 80a2660:	40024000 	.word	0x40024000
 80a2664:	9a271c1e 	.word	0x9a271c1e

080a2668 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2668:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a266a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a266c:	461a      	mov	r2, r3
 80a266e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2672:	9300      	str	r3, [sp, #0]
 80a2674:	f7ff fb1e 	bl	80a1cb4 <system_ctrl_set_result>
}
 80a2678:	b003      	add	sp, #12
 80a267a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2680 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a2680:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2682:	8843      	ldrh	r3, [r0, #2]
 80a2684:	2b0a      	cmp	r3, #10
 80a2686:	d008      	beq.n	80a269a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2688:	2b50      	cmp	r3, #80	; 0x50
 80a268a:	d10b      	bne.n	80a26a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a268c:	4b09      	ldr	r3, [pc, #36]	; (80a26b4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a268e:	681b      	ldr	r3, [r3, #0]
 80a2690:	b14b      	cbz	r3, 80a26a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a2692:	b003      	add	sp, #12
 80a2694:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a2698:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a269a:	f7ff ffe5 	bl	80a2668 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a269e:	b003      	add	sp, #12
 80a26a0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a26a4:	2300      	movs	r3, #0
 80a26a6:	461a      	mov	r2, r3
 80a26a8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a26ac:	9300      	str	r3, [sp, #0]
 80a26ae:	f7ff fb01 	bl	80a1cb4 <system_ctrl_set_result>
}
 80a26b2:	e7f4      	b.n	80a269e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a26b4:	20000c54 	.word	0x20000c54

080a26b8 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a26b8:	2100      	movs	r1, #0
{
 80a26ba:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a26bc:	4811      	ldr	r0, [pc, #68]	; (80a2704 <module_user_init_hook+0x4c>)
 80a26be:	f7ff fb93 	bl	80a1de8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a26c2:	4b11      	ldr	r3, [pc, #68]	; (80a2708 <module_user_init_hook+0x50>)
 80a26c4:	681a      	ldr	r2, [r3, #0]
 80a26c6:	4b11      	ldr	r3, [pc, #68]	; (80a270c <module_user_init_hook+0x54>)
 80a26c8:	429a      	cmp	r2, r3
 80a26ca:	bf0c      	ite	eq
 80a26cc:	2201      	moveq	r2, #1
 80a26ce:	2200      	movne	r2, #0
 80a26d0:	4b0f      	ldr	r3, [pc, #60]	; (80a2710 <module_user_init_hook+0x58>)
 80a26d2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a26d4:	d001      	beq.n	80a26da <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a26d6:	f7ff ffb1 	bl	80a263c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a26da:	f7ff f9d7 	bl	80a1a8c <HAL_RNG_GetRandomNumber>
 80a26de:	4604      	mov	r4, r0
    srand(seed);
 80a26e0:	f000 f8fc 	bl	80a28dc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a26e4:	4b0b      	ldr	r3, [pc, #44]	; (80a2714 <module_user_init_hook+0x5c>)
 80a26e6:	b113      	cbz	r3, 80a26ee <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a26e8:	4620      	mov	r0, r4
 80a26ea:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a26ee:	2100      	movs	r1, #0
 80a26f0:	4808      	ldr	r0, [pc, #32]	; (80a2714 <module_user_init_hook+0x5c>)
 80a26f2:	f7ff faf1 	bl	80a1cd8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a26f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a26fa:	2100      	movs	r1, #0
 80a26fc:	4806      	ldr	r0, [pc, #24]	; (80a2718 <module_user_init_hook+0x60>)
 80a26fe:	f7ff bacf 	b.w	80a1ca0 <system_ctrl_set_app_request_handler>
 80a2702:	bf00      	nop
 80a2704:	080a25bd 	.word	0x080a25bd
 80a2708:	40024000 	.word	0x40024000
 80a270c:	9a271c1e 	.word	0x9a271c1e
 80a2710:	20000c50 	.word	0x20000c50
 80a2714:	00000000 	.word	0x00000000
 80a2718:	080a2681 	.word	0x080a2681

080a271c <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a271c:	4b02      	ldr	r3, [pc, #8]	; (80a2728 <__tcf_0+0xc>)
 80a271e:	6898      	ldr	r0, [r3, #8]
 80a2720:	b108      	cbz	r0, 80a2726 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a2722:	f7ff b9ab 	b.w	80a1a7c <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a2726:	4770      	bx	lr
 80a2728:	20000c5c 	.word	0x20000c5c

080a272c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a272c:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a272e:	b570      	push	{r4, r5, r6, lr}
 80a2730:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a2732:	d901      	bls.n	80a2738 <pinAvailable+0xc>
    return false;
 80a2734:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a2736:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2738:	f1a0 030d 	sub.w	r3, r0, #13
 80a273c:	2b02      	cmp	r3, #2
 80a273e:	d90b      	bls.n	80a2758 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a2740:	2801      	cmp	r0, #1
 80a2742:	d824      	bhi.n	80a278e <pinAvailable+0x62>
 80a2744:	f000 f878 	bl	80a2838 <_Z19__fetch_global_Wirev>
 80a2748:	2100      	movs	r1, #0
 80a274a:	7c00      	ldrb	r0, [r0, #16]
 80a274c:	f7ff f9f6 	bl	80a1b3c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2750:	f080 0001 	eor.w	r0, r0, #1
 80a2754:	b2c0      	uxtb	r0, r0
 80a2756:	e7ee      	b.n	80a2736 <pinAvailable+0xa>
 80a2758:	4e12      	ldr	r6, [pc, #72]	; (80a27a4 <pinAvailable+0x78>)
 80a275a:	7831      	ldrb	r1, [r6, #0]
 80a275c:	f3bf 8f5b 	dmb	ish
 80a2760:	f011 0501 	ands.w	r5, r1, #1
 80a2764:	d10d      	bne.n	80a2782 <pinAvailable+0x56>
 80a2766:	4630      	mov	r0, r6
 80a2768:	f7fd fc99 	bl	80a009e <__cxa_guard_acquire>
 80a276c:	b148      	cbz	r0, 80a2782 <pinAvailable+0x56>
 80a276e:	4629      	mov	r1, r5
 80a2770:	480d      	ldr	r0, [pc, #52]	; (80a27a8 <pinAvailable+0x7c>)
 80a2772:	f7ff fce5 	bl	80a2140 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a2776:	4630      	mov	r0, r6
 80a2778:	f7fd fc96 	bl	80a00a8 <__cxa_guard_release>
 80a277c:	480b      	ldr	r0, [pc, #44]	; (80a27ac <pinAvailable+0x80>)
 80a277e:	f000 f891 	bl	80a28a4 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2782:	4b09      	ldr	r3, [pc, #36]	; (80a27a8 <pinAvailable+0x7c>)
 80a2784:	7818      	ldrb	r0, [r3, #0]
 80a2786:	f7ff f9f3 	bl	80a1b70 <hal_spi_is_enabled>
 80a278a:	2800      	cmp	r0, #0
 80a278c:	d1d2      	bne.n	80a2734 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a278e:	3c12      	subs	r4, #18
 80a2790:	2c01      	cmp	r4, #1
 80a2792:	d805      	bhi.n	80a27a0 <pinAvailable+0x74>
 80a2794:	f7ff fdc8 	bl	80a2328 <_Z22__fetch_global_Serial1v>
 80a2798:	7c00      	ldrb	r0, [r0, #16]
 80a279a:	f7ff fa21 	bl	80a1be0 <hal_usart_is_enabled>
 80a279e:	e7d7      	b.n	80a2750 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a27a0:	2001      	movs	r0, #1
 80a27a2:	e7c8      	b.n	80a2736 <pinAvailable+0xa>
 80a27a4:	20000c58 	.word	0x20000c58
 80a27a8:	20000c5c 	.word	0x20000c5c
 80a27ac:	080a271d 	.word	0x080a271d

080a27b0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a27b0:	2817      	cmp	r0, #23
{
 80a27b2:	b538      	push	{r3, r4, r5, lr}
 80a27b4:	4604      	mov	r4, r0
 80a27b6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a27b8:	d80a      	bhi.n	80a27d0 <pinMode+0x20>
 80a27ba:	29ff      	cmp	r1, #255	; 0xff
 80a27bc:	d008      	beq.n	80a27d0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a27be:	f7ff ffb5 	bl	80a272c <pinAvailable>
 80a27c2:	b128      	cbz	r0, 80a27d0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a27c4:	4629      	mov	r1, r5
 80a27c6:	4620      	mov	r0, r4
}
 80a27c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a27cc:	f7ff b976 	b.w	80a1abc <HAL_Pin_Mode>
}
 80a27d0:	bd38      	pop	{r3, r4, r5, pc}

080a27d2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a27d2:	b538      	push	{r3, r4, r5, lr}
 80a27d4:	4604      	mov	r4, r0
 80a27d6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a27d8:	f7ff f978 	bl	80a1acc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a27dc:	28ff      	cmp	r0, #255	; 0xff
 80a27de:	d010      	beq.n	80a2802 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a27e0:	2806      	cmp	r0, #6
 80a27e2:	d804      	bhi.n	80a27ee <digitalWrite+0x1c>
 80a27e4:	234d      	movs	r3, #77	; 0x4d
 80a27e6:	fa23 f000 	lsr.w	r0, r3, r0
 80a27ea:	07c3      	lsls	r3, r0, #31
 80a27ec:	d409      	bmi.n	80a2802 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a27ee:	4620      	mov	r0, r4
 80a27f0:	f7ff ff9c 	bl	80a272c <pinAvailable>
 80a27f4:	b128      	cbz	r0, 80a2802 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a27f6:	4629      	mov	r1, r5
 80a27f8:	4620      	mov	r0, r4
}
 80a27fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a27fe:	f7ff b96d 	b.w	80a1adc <HAL_GPIO_Write>
}
 80a2802:	bd38      	pop	{r3, r4, r5, pc}

080a2804 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2804:	4770      	bx	lr
	...

080a2808 <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a2808:	2300      	movs	r3, #0
{
 80a280a:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a280c:	2520      	movs	r5, #32
 80a280e:	8043      	strh	r3, [r0, #2]
 80a2810:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2812:	4e08      	ldr	r6, [pc, #32]	; (80a2834 <_Z17acquireWireBufferv+0x2c>)
{
 80a2814:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a2816:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2818:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a281a:	6085      	str	r5, [r0, #8]
 80a281c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a281e:	4628      	mov	r0, r5
 80a2820:	f000 f83e 	bl	80a28a0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2824:	4631      	mov	r1, r6
	};
 80a2826:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2828:	4628      	mov	r0, r5
 80a282a:	f000 f839 	bl	80a28a0 <_ZnajRKSt9nothrow_t>
	};
 80a282e:	60e0      	str	r0, [r4, #12]
}
 80a2830:	4620      	mov	r0, r4
 80a2832:	bd70      	pop	{r4, r5, r6, pc}
 80a2834:	080a2c38 	.word	0x080a2c38

080a2838 <_Z19__fetch_global_Wirev>:
{
 80a2838:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a283a:	4d0e      	ldr	r5, [pc, #56]	; (80a2874 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a283c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a283e:	7829      	ldrb	r1, [r5, #0]
 80a2840:	f3bf 8f5b 	dmb	ish
 80a2844:	f011 0401 	ands.w	r4, r1, #1
 80a2848:	d111      	bne.n	80a286e <_Z19__fetch_global_Wirev+0x36>
 80a284a:	4628      	mov	r0, r5
 80a284c:	f7fd fc27 	bl	80a009e <__cxa_guard_acquire>
 80a2850:	b168      	cbz	r0, 80a286e <_Z19__fetch_global_Wirev+0x36>
 80a2852:	a801      	add	r0, sp, #4
 80a2854:	f7ff ffd8 	bl	80a2808 <_Z17acquireWireBufferv>
 80a2858:	4621      	mov	r1, r4
 80a285a:	aa01      	add	r2, sp, #4
 80a285c:	4806      	ldr	r0, [pc, #24]	; (80a2878 <_Z19__fetch_global_Wirev+0x40>)
 80a285e:	f7ff fb21 	bl	80a1ea4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a2862:	4628      	mov	r0, r5
 80a2864:	f7fd fc20 	bl	80a00a8 <__cxa_guard_release>
 80a2868:	4804      	ldr	r0, [pc, #16]	; (80a287c <_Z19__fetch_global_Wirev+0x44>)
 80a286a:	f000 f81b 	bl	80a28a4 <atexit>
	return wire;
}
 80a286e:	4802      	ldr	r0, [pc, #8]	; (80a2878 <_Z19__fetch_global_Wirev+0x40>)
 80a2870:	b007      	add	sp, #28
 80a2872:	bd30      	pop	{r4, r5, pc}
 80a2874:	20000c6c 	.word	0x20000c6c
 80a2878:	20000c70 	.word	0x20000c70
 80a287c:	080a2805 	.word	0x080a2805

080a2880 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2880:	2300      	movs	r3, #0
 80a2882:	b507      	push	{r0, r1, r2, lr}
 80a2884:	461a      	mov	r2, r3
 80a2886:	4619      	mov	r1, r3
 80a2888:	9300      	str	r3, [sp, #0]
 80a288a:	4803      	ldr	r0, [pc, #12]	; (80a2898 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a288c:	f7ff fb74 	bl	80a1f78 <_ZN9IPAddressC1Ehhhh>
 80a2890:	b003      	add	sp, #12
 80a2892:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2896:	bf00      	nop
 80a2898:	20000c84 	.word	0x20000c84

080a289c <_ZdlPvj>:
 80a289c:	f7fd bbfd 	b.w	80a009a <_ZdlPv>

080a28a0 <_ZnajRKSt9nothrow_t>:
 80a28a0:	f7fd bbf9 	b.w	80a0096 <_Znaj>

080a28a4 <atexit>:
 80a28a4:	2300      	movs	r3, #0
 80a28a6:	4601      	mov	r1, r0
 80a28a8:	461a      	mov	r2, r3
 80a28aa:	4618      	mov	r0, r3
 80a28ac:	f000 b876 	b.w	80a299c <__register_exitproc>

080a28b0 <memcpy>:
 80a28b0:	440a      	add	r2, r1
 80a28b2:	4291      	cmp	r1, r2
 80a28b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a28b8:	d100      	bne.n	80a28bc <memcpy+0xc>
 80a28ba:	4770      	bx	lr
 80a28bc:	b510      	push	{r4, lr}
 80a28be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a28c2:	4291      	cmp	r1, r2
 80a28c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a28c8:	d1f9      	bne.n	80a28be <memcpy+0xe>
 80a28ca:	bd10      	pop	{r4, pc}

080a28cc <memset>:
 80a28cc:	4603      	mov	r3, r0
 80a28ce:	4402      	add	r2, r0
 80a28d0:	4293      	cmp	r3, r2
 80a28d2:	d100      	bne.n	80a28d6 <memset+0xa>
 80a28d4:	4770      	bx	lr
 80a28d6:	f803 1b01 	strb.w	r1, [r3], #1
 80a28da:	e7f9      	b.n	80a28d0 <memset+0x4>

080a28dc <srand>:
 80a28dc:	b538      	push	{r3, r4, r5, lr}
 80a28de:	4b0d      	ldr	r3, [pc, #52]	; (80a2914 <srand+0x38>)
 80a28e0:	4604      	mov	r4, r0
 80a28e2:	681d      	ldr	r5, [r3, #0]
 80a28e4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a28e6:	b97b      	cbnz	r3, 80a2908 <srand+0x2c>
 80a28e8:	2018      	movs	r0, #24
 80a28ea:	f7ff fa5d 	bl	80a1da8 <malloc>
 80a28ee:	4a0a      	ldr	r2, [pc, #40]	; (80a2918 <srand+0x3c>)
 80a28f0:	4b0a      	ldr	r3, [pc, #40]	; (80a291c <srand+0x40>)
 80a28f2:	63a8      	str	r0, [r5, #56]	; 0x38
 80a28f4:	e9c0 2300 	strd	r2, r3, [r0]
 80a28f8:	4b09      	ldr	r3, [pc, #36]	; (80a2920 <srand+0x44>)
 80a28fa:	2201      	movs	r2, #1
 80a28fc:	6083      	str	r3, [r0, #8]
 80a28fe:	230b      	movs	r3, #11
 80a2900:	8183      	strh	r3, [r0, #12]
 80a2902:	2300      	movs	r3, #0
 80a2904:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2908:	2200      	movs	r2, #0
 80a290a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a290c:	611c      	str	r4, [r3, #16]
 80a290e:	615a      	str	r2, [r3, #20]
 80a2910:	bd38      	pop	{r3, r4, r5, pc}
 80a2912:	bf00      	nop
 80a2914:	2000074c 	.word	0x2000074c
 80a2918:	abcd330e 	.word	0xabcd330e
 80a291c:	e66d1234 	.word	0xe66d1234
 80a2920:	0005deec 	.word	0x0005deec

080a2924 <rand>:
 80a2924:	4b13      	ldr	r3, [pc, #76]	; (80a2974 <rand+0x50>)
 80a2926:	b510      	push	{r4, lr}
 80a2928:	681c      	ldr	r4, [r3, #0]
 80a292a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a292c:	b97b      	cbnz	r3, 80a294e <rand+0x2a>
 80a292e:	2018      	movs	r0, #24
 80a2930:	f7ff fa3a 	bl	80a1da8 <malloc>
 80a2934:	4a10      	ldr	r2, [pc, #64]	; (80a2978 <rand+0x54>)
 80a2936:	4b11      	ldr	r3, [pc, #68]	; (80a297c <rand+0x58>)
 80a2938:	63a0      	str	r0, [r4, #56]	; 0x38
 80a293a:	e9c0 2300 	strd	r2, r3, [r0]
 80a293e:	4b10      	ldr	r3, [pc, #64]	; (80a2980 <rand+0x5c>)
 80a2940:	2201      	movs	r2, #1
 80a2942:	6083      	str	r3, [r0, #8]
 80a2944:	230b      	movs	r3, #11
 80a2946:	8183      	strh	r3, [r0, #12]
 80a2948:	2300      	movs	r3, #0
 80a294a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a294e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a2950:	480c      	ldr	r0, [pc, #48]	; (80a2984 <rand+0x60>)
 80a2952:	690a      	ldr	r2, [r1, #16]
 80a2954:	694b      	ldr	r3, [r1, #20]
 80a2956:	4350      	muls	r0, r2
 80a2958:	4c0b      	ldr	r4, [pc, #44]	; (80a2988 <rand+0x64>)
 80a295a:	fb04 0003 	mla	r0, r4, r3, r0
 80a295e:	fba2 3404 	umull	r3, r4, r2, r4
 80a2962:	1c5a      	adds	r2, r3, #1
 80a2964:	4404      	add	r4, r0
 80a2966:	f144 0000 	adc.w	r0, r4, #0
 80a296a:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80a296e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80a2972:	bd10      	pop	{r4, pc}
 80a2974:	2000074c 	.word	0x2000074c
 80a2978:	abcd330e 	.word	0xabcd330e
 80a297c:	e66d1234 	.word	0xe66d1234
 80a2980:	0005deec 	.word	0x0005deec
 80a2984:	5851f42d 	.word	0x5851f42d
 80a2988:	4c957f2d 	.word	0x4c957f2d

080a298c <strlen>:
 80a298c:	4603      	mov	r3, r0
 80a298e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2992:	2a00      	cmp	r2, #0
 80a2994:	d1fb      	bne.n	80a298e <strlen+0x2>
 80a2996:	1a18      	subs	r0, r3, r0
 80a2998:	3801      	subs	r0, #1
 80a299a:	4770      	bx	lr

080a299c <__register_exitproc>:
 80a299c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a29a0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a2a60 <__register_exitproc+0xc4>
 80a29a4:	4606      	mov	r6, r0
 80a29a6:	f8d8 0000 	ldr.w	r0, [r8]
 80a29aa:	461f      	mov	r7, r3
 80a29ac:	460d      	mov	r5, r1
 80a29ae:	4691      	mov	r9, r2
 80a29b0:	f000 f858 	bl	80a2a64 <__retarget_lock_acquire_recursive>
 80a29b4:	4b26      	ldr	r3, [pc, #152]	; (80a2a50 <__register_exitproc+0xb4>)
 80a29b6:	681c      	ldr	r4, [r3, #0]
 80a29b8:	b934      	cbnz	r4, 80a29c8 <__register_exitproc+0x2c>
 80a29ba:	4c26      	ldr	r4, [pc, #152]	; (80a2a54 <__register_exitproc+0xb8>)
 80a29bc:	601c      	str	r4, [r3, #0]
 80a29be:	4b26      	ldr	r3, [pc, #152]	; (80a2a58 <__register_exitproc+0xbc>)
 80a29c0:	b113      	cbz	r3, 80a29c8 <__register_exitproc+0x2c>
 80a29c2:	681b      	ldr	r3, [r3, #0]
 80a29c4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a29c8:	6863      	ldr	r3, [r4, #4]
 80a29ca:	2b1f      	cmp	r3, #31
 80a29cc:	dd07      	ble.n	80a29de <__register_exitproc+0x42>
 80a29ce:	f8d8 0000 	ldr.w	r0, [r8]
 80a29d2:	f000 f849 	bl	80a2a68 <__retarget_lock_release_recursive>
 80a29d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a29da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a29de:	b35e      	cbz	r6, 80a2a38 <__register_exitproc+0x9c>
 80a29e0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a29e4:	b988      	cbnz	r0, 80a2a0a <__register_exitproc+0x6e>
 80a29e6:	4b1d      	ldr	r3, [pc, #116]	; (80a2a5c <__register_exitproc+0xc0>)
 80a29e8:	b923      	cbnz	r3, 80a29f4 <__register_exitproc+0x58>
 80a29ea:	f8d8 0000 	ldr.w	r0, [r8]
 80a29ee:	f000 f83a 	bl	80a2a66 <__retarget_lock_release>
 80a29f2:	e7f0      	b.n	80a29d6 <__register_exitproc+0x3a>
 80a29f4:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a29f8:	f7ff f9d6 	bl	80a1da8 <malloc>
 80a29fc:	2800      	cmp	r0, #0
 80a29fe:	d0f4      	beq.n	80a29ea <__register_exitproc+0x4e>
 80a2a00:	2300      	movs	r3, #0
 80a2a02:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a2a06:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a2a0a:	2201      	movs	r2, #1
 80a2a0c:	6863      	ldr	r3, [r4, #4]
 80a2a0e:	2e02      	cmp	r6, #2
 80a2a10:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a2a14:	fa02 f203 	lsl.w	r2, r2, r3
 80a2a18:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a2a1c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a2a20:	ea43 0302 	orr.w	r3, r3, r2
 80a2a24:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a2a28:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a2a2c:	bf02      	ittt	eq
 80a2a2e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a2a32:	431a      	orreq	r2, r3
 80a2a34:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a2a38:	6863      	ldr	r3, [r4, #4]
 80a2a3a:	f8d8 0000 	ldr.w	r0, [r8]
 80a2a3e:	1c5a      	adds	r2, r3, #1
 80a2a40:	3302      	adds	r3, #2
 80a2a42:	6062      	str	r2, [r4, #4]
 80a2a44:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a2a48:	f000 f80e 	bl	80a2a68 <__retarget_lock_release_recursive>
 80a2a4c:	2000      	movs	r0, #0
 80a2a4e:	e7c4      	b.n	80a29da <__register_exitproc+0x3e>
 80a2a50:	20000d28 	.word	0x20000d28
 80a2a54:	20000c9c 	.word	0x20000c9c
 80a2a58:	00000000 	.word	0x00000000
 80a2a5c:	080a1da9 	.word	0x080a1da9
 80a2a60:	200007b0 	.word	0x200007b0

080a2a64 <__retarget_lock_acquire_recursive>:
 80a2a64:	4770      	bx	lr

080a2a66 <__retarget_lock_release>:
 80a2a66:	4770      	bx	lr

080a2a68 <__retarget_lock_release_recursive>:
 80a2a68:	4770      	bx	lr

080a2a6a <link_code_end>:
	...

080a2a6c <dynalib_user>:
 80a2a6c:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a2a7c:	0000 0000 6f63 6e75 5574 0070 6f63 6e75     ....countUp.coun
 80a2a8c:	5574 3270 6c00 6769 7468 7449 6400 6172     tUp2.lightIt.dra
 80a2a9c:	4c77 6e69 4165 4950 7400 676f 6c67 4165     wLineAPI.toggleA
 80a2aac:	696e 616d 6974 6e6f 7000 616c 616e 4672     nimation.planarF
 80a2abc:	6f6c 3370 0044 7264 7761 6f43 756c 6e6d     lop3D.drawColumn
 80a2acc:	6e00 7865 4374 6c6f 726f 7543 6562 2500     .nextColorCube.%
 80a2adc:	2c64 2520 2c64 2520 2c64 2520 2c64 2520     d, %d, %d, %d, %
 80a2aec:	2c64 2520 2c64 2520 0064 6564 616c 5479     d, %d, %d.delayT
 80a2afc:	6d69 3d65 6425 0000                         ime=%d..

080a2b04 <_ZTV7TwoWire>:
	...
 80a2b0c:	1e4d 080a 1e97 080a 1e6f 080a 1e4f 080a     M.......o...O...
 80a2b1c:	1e77 080a 1e7f 080a 1e87 080a 1e8f 080a     w...............

080a2b2c <_ZTV9IPAddress>:
	...
 80a2b34:	1ed9 080a 1ec9 080a 1ecb 080a 7061 0070     ............app.

080a2b44 <_ZTVN5spark12NetworkClassE>:
	...
 80a2b4c:	1fa1 080a 1fab 080a 1fb5 080a 1fbf 080a     ................
 80a2b5c:	1fc9 080a 1fd5 080a 1fe1 080a 1fe9 080a     ................
 80a2b6c:	1ff1 080a 1ffd 080a 2005 080a 200f 080a     ......... ... ..
 80a2b7c:	2019 080a 5925 252d 2d6d 6425 2554 3a48     . ..%Y-%m-%dT%H:
 80a2b8c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

080a2b9c <_ZTV11USARTSerial>:
	...
 80a2ba4:	2285 080a 22ef 080a 22cb 080a 207d 080a     ."..."..."..} ..
 80a2bb4:	229b 080a 22b7 080a 22a9 080a 22c5 080a     ."..."..."..."..
 80a2bc4:	2287 080a 228d 080a                         ."..."..

080a2bcc <_ZTV9USBSerial>:
	...
 80a2bd4:	2377 080a 23dd 080a 23b5 080a 207d 080a     w#...#...#..} ..
 80a2be4:	23a7 080a 2379 080a 2389 080a 23d7 080a     .#..y#...#...#..
 80a2bf4:	2399 080a 2371 080a                         .#..q#..

080a2bfc <_ZTVN5spark9WiFiClassE>:
	...
 80a2c04:	259f 080a 2595 080a 258b 080a 24fd 080a     .%...%...%...$..
 80a2c14:	257f 080a 2573 080a 1fe1 080a 1fe9 080a     .%..s%..........
 80a2c24:	2567 080a 255f 080a 2555 080a 254b 080a     g%.._%..U%..K%..
 80a2c34:	2507 080a                                   .%..

080a2c38 <_ZSt7nothrow>:
	...

080a2c39 <link_const_variable_data_end>:
 80a2c39:	00          	.byte	0x00
	...

080a2c3c <link_constructors_location>:
 80a2c3c:	080a1f91 	.word	0x080a1f91
 80a2c40:	080a2069 	.word	0x080a2069
 80a2c44:	080a2135 	.word	0x080a2135
 80a2c48:	080a224d 	.word	0x080a224d
 80a2c4c:	080a2271 	.word	0x080a2271
 80a2c50:	080a25a9 	.word	0x080a25a9
 80a2c54:	080a2881 	.word	0x080a2881

080a2c58 <link_constructors_end>:
	...
