
/Users/drewowl/workspace/cube/target/2.3.1/photon/cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002354  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2370  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000a38  20000000  080a2374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000059c  20000a38  20000a38  00030a38  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a2dac  080a2dac  00022dac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2dd4  080a2dd4  00022dd4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e7b65  00000000  00000000  00022dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011a21  00000000  00000000  0010a93d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001ab26  00000000  00000000  0011c35e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001fd0  00000000  00000000  00136e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000051e8  00000000  00000000  00138e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024024  00000000  00000000  0013e03c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000284d6  00000000  00000000  00162060  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b2ffd  00000000  00000000  0018a536  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000051e8  00000000  00000000  0023d534  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 ffd7 	bl	80a1fe0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 ffdf 	bl	80a1ffc <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2374 	.word	0x080a2374
 80a004c:	20000a38 	.word	0x20000a38
 80a0050:	20000a38 	.word	0x20000a38
 80a0054:	20000fd1 	.word	0x20000fd1
 80a0058:	20000fd1 	.word	0x20000fd1

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 feb5 	bl	80a1dcc <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a2354 	.word	0x080a2354
 80a0080:	080a2370 	.word	0x080a2370

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b84e 	b.w	80a0124 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f001 f857 	bl	80a113c <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f001 be53 	b.w	80a1d3c <_post_loop>

080a0096 <_Znaj>:
 80a0096:	f001 ba13 	b.w	80a14c0 <malloc>

080a009a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009a:	f001 ba19 	b.w	80a14d0 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <_Z7lightIt6String>:
  return 1;
}

int lightIt(String cmd)
{
  haltAnimation = true;
 80a00b0:	2201      	movs	r2, #1
 80a00b2:	4b18      	ldr	r3, [pc, #96]	; (80a0114 <_Z7lightIt6String+0x64>)
{
 80a00b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  haltAnimation = true;
 80a00b6:	701a      	strb	r2, [r3, #0]
  int x = 0;
 80a00b8:	2300      	movs	r3, #0
{
 80a00ba:	b087      	sub	sp, #28
  int y = 0;
 80a00bc:	e9cd 3302 	strd	r3, r3, [sp, #8]
  int z = 0;
  int color = 0;
 80a00c0:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (sscanf(cmd, "%d, %d, %d, %d", &x, &y, &z, &color) == 4)
 80a00c4:	ab05      	add	r3, sp, #20
 80a00c6:	9301      	str	r3, [sp, #4]
 80a00c8:	ab04      	add	r3, sp, #16
 80a00ca:	9300      	str	r3, [sp, #0]
 80a00cc:	4912      	ldr	r1, [pc, #72]	; (80a0118 <_Z7lightIt6String+0x68>)
 80a00ce:	6800      	ldr	r0, [r0, #0]
 80a00d0:	ab03      	add	r3, sp, #12
 80a00d2:	aa02      	add	r2, sp, #8
 80a00d4:	f001 fa0c 	bl	80a14f0 <sscanf>
 80a00d8:	2804      	cmp	r0, #4
 80a00da:	d118      	bne.n	80a010e <_Z7lightIt6String+0x5e>
  {
    grid[x][y][z][0] = allColors[color][0];
 80a00dc:	2430      	movs	r4, #48	; 0x30
 80a00de:	9803      	ldr	r0, [sp, #12]
 80a00e0:	210c      	movs	r1, #12
 80a00e2:	4360      	muls	r0, r4
 80a00e4:	24c0      	movs	r4, #192	; 0xc0
 80a00e6:	9e02      	ldr	r6, [sp, #8]
 80a00e8:	9b04      	ldr	r3, [sp, #16]
 80a00ea:	4374      	muls	r4, r6
 80a00ec:	9e05      	ldr	r6, [sp, #20]
 80a00ee:	434b      	muls	r3, r1
 80a00f0:	4371      	muls	r1, r6
 80a00f2:	4f0a      	ldr	r7, [pc, #40]	; (80a011c <_Z7lightIt6String+0x6c>)
 80a00f4:	4a0a      	ldr	r2, [pc, #40]	; (80a0120 <_Z7lightIt6String+0x70>)
 80a00f6:	187e      	adds	r6, r7, r1
 80a00f8:	181d      	adds	r5, r3, r0
 80a00fa:	5879      	ldr	r1, [r7, r1]
    grid[x][y][z][1] = allColors[color][1];
 80a00fc:	4423      	add	r3, r4
    grid[x][y][z][0] = allColors[color][0];
 80a00fe:	4425      	add	r5, r4
    grid[x][y][z][1] = allColors[color][1];
 80a0100:	4403      	add	r3, r0
    grid[x][y][z][0] = allColors[color][0];
 80a0102:	5151      	str	r1, [r2, r5]
    grid[x][y][z][1] = allColors[color][1];
 80a0104:	4413      	add	r3, r2
 80a0106:	6872      	ldr	r2, [r6, #4]
 80a0108:	605a      	str	r2, [r3, #4]
    grid[x][y][z][2] = allColors[color][2];
 80a010a:	68b2      	ldr	r2, [r6, #8]
 80a010c:	609a      	str	r2, [r3, #8]
  }
  return 1;
}
 80a010e:	2001      	movs	r0, #1
 80a0110:	b007      	add	sp, #28
 80a0112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0114:	20000a40 	.word	0x20000a40
 80a0118:	080a21b0 	.word	0x080a21b0
 80a011c:	20000000 	.word	0x20000000
 80a0120:	20000480 	.word	0x20000480

080a0124 <setup>:
{
 80a0124:	b510      	push	{r4, lr}
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a0126:	4c06      	ldr	r4, [pc, #24]	; (80a0140 <setup+0x1c>)
 80a0128:	4a06      	ldr	r2, [pc, #24]	; (80a0144 <setup+0x20>)
 80a012a:	4620      	mov	r0, r4
 80a012c:	4906      	ldr	r1, [pc, #24]	; (80a0148 <setup+0x24>)
 80a012e:	f001 fa05 	bl	80a153c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0132:	4620      	mov	r0, r4
}
 80a0134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0138:	4a04      	ldr	r2, [pc, #16]	; (80a014c <setup+0x28>)
 80a013a:	4905      	ldr	r1, [pc, #20]	; (80a0150 <setup+0x2c>)
 80a013c:	f001 b9fe 	b.w	80a153c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0140:	080a1511 	.word	0x080a1511
 80a0144:	080a21bf 	.word	0x080a21bf
 80a0148:	080a00b1 	.word	0x080a00b1
 80a014c:	080a21c7 	.word	0x080a21c7
 80a0150:	080a0549 	.word	0x080a0549

080a0154 <_Z9drawWalls6String>:
  animationChange = 10000;
 80a0154:	f242 7210 	movw	r2, #10000	; 0x2710
{
 80a0158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  animationChange = 10000;
 80a015a:	4b18      	ldr	r3, [pc, #96]	; (80a01bc <_Z9drawWalls6String+0x68>)
  ypos = ypos == 0 ? 3 : ypos - 1;
 80a015c:	4c18      	ldr	r4, [pc, #96]	; (80a01c0 <_Z9drawWalls6String+0x6c>)
  animationChange = 10000;
 80a015e:	601a      	str	r2, [r3, #0]
  ypos = ypos == 0 ? 3 : ypos - 1;
 80a0160:	6823      	ldr	r3, [r4, #0]
 80a0162:	4d18      	ldr	r5, [pc, #96]	; (80a01c4 <_Z9drawWalls6String+0x70>)
 80a0164:	b933      	cbnz	r3, 80a0174 <_Z9drawWalls6String+0x20>
 80a0166:	2303      	movs	r3, #3
 80a0168:	6023      	str	r3, [r4, #0]
    color = nextColor(color);
 80a016a:	6828      	ldr	r0, [r5, #0]
 80a016c:	f000 fff4 	bl	80a1158 <_Z9nextColori>
 80a0170:	6028      	str	r0, [r5, #0]
 80a0172:	e003      	b.n	80a017c <_Z9drawWalls6String+0x28>
  ypos = ypos == 0 ? 3 : ypos - 1;
 80a0174:	3b01      	subs	r3, #1
  if (ypos == 3)
 80a0176:	2b03      	cmp	r3, #3
  ypos = ypos == 0 ? 3 : ypos - 1;
 80a0178:	6023      	str	r3, [r4, #0]
  if (ypos == 3)
 80a017a:	d0f6      	beq.n	80a016a <_Z9drawWalls6String+0x16>
      grid[x][ypos][z][0] = allColors[color][0];
 80a017c:	230c      	movs	r3, #12
 80a017e:	682a      	ldr	r2, [r5, #0]
 80a0180:	4911      	ldr	r1, [pc, #68]	; (80a01c8 <_Z9drawWalls6String+0x74>)
 80a0182:	4353      	muls	r3, r2
 80a0184:	18ca      	adds	r2, r1, r3
 80a0186:	58cd      	ldr	r5, [r1, r3]
 80a0188:	2130      	movs	r1, #48	; 0x30
      grid[x][ypos][z][2] = allColors[color][2];
 80a018a:	e9d2 6701 	ldrd	r6, r7, [r2, #4]
 80a018e:	6823      	ldr	r3, [r4, #0]
 80a0190:	4a0e      	ldr	r2, [pc, #56]	; (80a01cc <_Z9drawWalls6String+0x78>)
 80a0192:	fb01 2303 	mla	r3, r1, r3, r2
 80a0196:	2100      	movs	r1, #0
 80a0198:	461a      	mov	r2, r3
    for (int z = 0; z < 4; z++)
 80a019a:	2000      	movs	r0, #0
 80a019c:	3001      	adds	r0, #1
 80a019e:	2804      	cmp	r0, #4
      grid[x][ypos][z][1] = allColors[color][1];
 80a01a0:	e9c2 5600 	strd	r5, r6, [r2]
      grid[x][ypos][z][2] = allColors[color][2];
 80a01a4:	6097      	str	r7, [r2, #8]
    for (int z = 0; z < 4; z++)
 80a01a6:	f102 020c 	add.w	r2, r2, #12
 80a01aa:	d1f7      	bne.n	80a019c <_Z9drawWalls6String+0x48>
  for (int x = 0; x < 4; x++)
 80a01ac:	3101      	adds	r1, #1
 80a01ae:	2904      	cmp	r1, #4
 80a01b0:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
 80a01b4:	d1f0      	bne.n	80a0198 <_Z9drawWalls6String+0x44>
}
 80a01b6:	2001      	movs	r0, #1
 80a01b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a01ba:	bf00      	nop
 80a01bc:	20000078 	.word	0x20000078
 80a01c0:	20000a58 	.word	0x20000a58
 80a01c4:	20000a38 	.word	0x20000a38
 80a01c8:	20000000 	.word	0x20000000
 80a01cc:	20000480 	.word	0x20000480

080a01d0 <_Z8drawXRow6String>:
  animationChange = 10000;
 80a01d0:	f242 7210 	movw	r2, #10000	; 0x2710
{
 80a01d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  animationChange = 10000;
 80a01d6:	4b23      	ldr	r3, [pc, #140]	; (80a0264 <_Z8drawXRow6String+0x94>)
{
 80a01d8:	b085      	sub	sp, #20
 80a01da:	4605      	mov	r5, r0
  int y = random(0, 4);
 80a01dc:	2104      	movs	r1, #4
 80a01de:	2000      	movs	r0, #0
  animationChange = 10000;
 80a01e0:	601a      	str	r2, [r3, #0]
  int y = random(0, 4);
 80a01e2:	f001 fb26 	bl	80a1832 <_Z6randomii>
  int z = random(0, 4);
 80a01e6:	2104      	movs	r1, #4
  int y = random(0, 4);
 80a01e8:	9002      	str	r0, [sp, #8]
  int z = random(0, 4);
 80a01ea:	2000      	movs	r0, #0
 80a01ec:	f001 fb21 	bl	80a1832 <_Z6randomii>
  color = nextColor(color);
 80a01f0:	4c1d      	ldr	r4, [pc, #116]	; (80a0268 <_Z8drawXRow6String+0x98>)
  int z = random(0, 4);
 80a01f2:	9003      	str	r0, [sp, #12]
  color = nextColor(color);
 80a01f4:	6820      	ldr	r0, [r4, #0]
 80a01f6:	f000 ffaf 	bl	80a1158 <_Z9nextColori>
 80a01fa:	6020      	str	r0, [r4, #0]
  if (sscanf(cmd, "%d, %d, %d", &y, &z, &color) == 3)
 80a01fc:	9400      	str	r4, [sp, #0]
 80a01fe:	491b      	ldr	r1, [pc, #108]	; (80a026c <_Z8drawXRow6String+0x9c>)
 80a0200:	6828      	ldr	r0, [r5, #0]
 80a0202:	ab03      	add	r3, sp, #12
 80a0204:	aa02      	add	r2, sp, #8
 80a0206:	f001 f973 	bl	80a14f0 <sscanf>
 80a020a:	e9dd 6102 	ldrd	r6, r1, [sp, #8]
 80a020e:	2803      	cmp	r0, #3
 80a0210:	f04f 000c 	mov.w	r0, #12
      grid[x][y][z][0] = allColors[color][0];
 80a0214:	6824      	ldr	r4, [r4, #0]
 80a0216:	4d16      	ldr	r5, [pc, #88]	; (80a0270 <_Z8drawXRow6String+0xa0>)
 80a0218:	fb00 f404 	mul.w	r4, r0, r4
 80a021c:	eb05 0304 	add.w	r3, r5, r4
 80a0220:	592f      	ldr	r7, [r5, r4]
      grid[x][y][z][2] = allColors[color][2];
 80a0222:	e9d3 5401 	ldrd	r5, r4, [r3, #4]
 80a0226:	f04f 0330 	mov.w	r3, #48	; 0x30
 80a022a:	fb03 f306 	mul.w	r3, r3, r6
 80a022e:	fb00 3301 	mla	r3, r0, r1, r3
 80a0232:	4a10      	ldr	r2, [pc, #64]	; (80a0274 <_Z8drawXRow6String+0xa4>)
 80a0234:	4413      	add	r3, r2
    for (int x = 0; x < 4; x++)
 80a0236:	f04f 0200 	mov.w	r2, #0
  if (sscanf(cmd, "%d, %d, %d", &y, &z, &color) == 3)
 80a023a:	d10a      	bne.n	80a0252 <_Z8drawXRow6String+0x82>
    for (int x = 0; x < 4; x++)
 80a023c:	3201      	adds	r2, #1
 80a023e:	2a04      	cmp	r2, #4
      grid[x][y][z][1] = allColors[color][1];
 80a0240:	e9c3 7500 	strd	r7, r5, [r3]
      grid[x][y][z][2] = allColors[color][2];
 80a0244:	609c      	str	r4, [r3, #8]
    for (int x = 0; x < 4; x++)
 80a0246:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
 80a024a:	d1f7      	bne.n	80a023c <_Z8drawXRow6String+0x6c>
}
 80a024c:	2001      	movs	r0, #1
 80a024e:	b005      	add	sp, #20
 80a0250:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (int x = 0; x < 4; x++)
 80a0252:	3201      	adds	r2, #1
 80a0254:	2a04      	cmp	r2, #4
      grid[x][y][z][1] = allColors[color][1];
 80a0256:	e9c3 7500 	strd	r7, r5, [r3]
      grid[x][y][z][2] = allColors[color][2];
 80a025a:	609c      	str	r4, [r3, #8]
    for (int x = 0; x < 4; x++)
 80a025c:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
 80a0260:	d1f7      	bne.n	80a0252 <_Z8drawXRow6String+0x82>
 80a0262:	e7f3      	b.n	80a024c <_Z8drawXRow6String+0x7c>
 80a0264:	20000078 	.word	0x20000078
 80a0268:	20000a38 	.word	0x20000a38
 80a026c:	080a21b4 	.word	0x080a21b4
 80a0270:	20000000 	.word	0x20000000
 80a0274:	20000480 	.word	0x20000480

080a0278 <_Z8drawYRow6String>:
  animationChange = 10000;
 80a0278:	f242 7210 	movw	r2, #10000	; 0x2710
{
 80a027c:	b5f0      	push	{r4, r5, r6, r7, lr}
  animationChange = 10000;
 80a027e:	4b23      	ldr	r3, [pc, #140]	; (80a030c <_Z8drawYRow6String+0x94>)
{
 80a0280:	b085      	sub	sp, #20
 80a0282:	4605      	mov	r5, r0
  int x = random(0, 4);
 80a0284:	2104      	movs	r1, #4
 80a0286:	2000      	movs	r0, #0
  animationChange = 10000;
 80a0288:	601a      	str	r2, [r3, #0]
  int x = random(0, 4);
 80a028a:	f001 fad2 	bl	80a1832 <_Z6randomii>
  int z = random(0, 4);
 80a028e:	2104      	movs	r1, #4
  int x = random(0, 4);
 80a0290:	9002      	str	r0, [sp, #8]
  int z = random(0, 4);
 80a0292:	2000      	movs	r0, #0
 80a0294:	f001 facd 	bl	80a1832 <_Z6randomii>
  color = nextColor(color);
 80a0298:	4c1d      	ldr	r4, [pc, #116]	; (80a0310 <_Z8drawYRow6String+0x98>)
  int z = random(0, 4);
 80a029a:	9003      	str	r0, [sp, #12]
  color = nextColor(color);
 80a029c:	6820      	ldr	r0, [r4, #0]
 80a029e:	f000 ff5b 	bl	80a1158 <_Z9nextColori>
 80a02a2:	6020      	str	r0, [r4, #0]
  if (sscanf(cmd, "%d, %d, %d", &x, &z, &color) == 3)
 80a02a4:	9400      	str	r4, [sp, #0]
 80a02a6:	491b      	ldr	r1, [pc, #108]	; (80a0314 <_Z8drawYRow6String+0x9c>)
 80a02a8:	6828      	ldr	r0, [r5, #0]
 80a02aa:	ab03      	add	r3, sp, #12
 80a02ac:	aa02      	add	r2, sp, #8
 80a02ae:	f001 f91f 	bl	80a14f0 <sscanf>
 80a02b2:	e9dd 6102 	ldrd	r6, r1, [sp, #8]
 80a02b6:	2803      	cmp	r0, #3
 80a02b8:	f04f 000c 	mov.w	r0, #12
      grid[x][y][z][0] = allColors[color][0];
 80a02bc:	6824      	ldr	r4, [r4, #0]
 80a02be:	4d16      	ldr	r5, [pc, #88]	; (80a0318 <_Z8drawYRow6String+0xa0>)
 80a02c0:	fb00 f404 	mul.w	r4, r0, r4
 80a02c4:	eb05 0304 	add.w	r3, r5, r4
 80a02c8:	592f      	ldr	r7, [r5, r4]
      grid[x][y][z][2] = allColors[color][2];
 80a02ca:	e9d3 5401 	ldrd	r5, r4, [r3, #4]
 80a02ce:	f04f 03c0 	mov.w	r3, #192	; 0xc0
 80a02d2:	fb03 f306 	mul.w	r3, r3, r6
 80a02d6:	fb00 3301 	mla	r3, r0, r1, r3
 80a02da:	4a10      	ldr	r2, [pc, #64]	; (80a031c <_Z8drawYRow6String+0xa4>)
 80a02dc:	4413      	add	r3, r2
    for (int y = 0; y < 4; y++)
 80a02de:	f04f 0200 	mov.w	r2, #0
  if (sscanf(cmd, "%d, %d, %d", &x, &z, &color) == 3)
 80a02e2:	d10a      	bne.n	80a02fa <_Z8drawYRow6String+0x82>
    for (int y = 0; y < 4; y++)
 80a02e4:	3201      	adds	r2, #1
 80a02e6:	2a04      	cmp	r2, #4
      grid[x][y][z][1] = allColors[color][1];
 80a02e8:	e9c3 7500 	strd	r7, r5, [r3]
      grid[x][y][z][2] = allColors[color][2];
 80a02ec:	609c      	str	r4, [r3, #8]
    for (int y = 0; y < 4; y++)
 80a02ee:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80a02f2:	d1f7      	bne.n	80a02e4 <_Z8drawYRow6String+0x6c>
}
 80a02f4:	2001      	movs	r0, #1
 80a02f6:	b005      	add	sp, #20
 80a02f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (int y = 0; y < 4; y++)
 80a02fa:	3201      	adds	r2, #1
 80a02fc:	2a04      	cmp	r2, #4
      grid[x][y][z][1] = allColors[color][1];
 80a02fe:	e9c3 7500 	strd	r7, r5, [r3]
      grid[x][y][z][2] = allColors[color][2];
 80a0302:	609c      	str	r4, [r3, #8]
    for (int y = 0; y < 4; y++)
 80a0304:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80a0308:	d1f7      	bne.n	80a02fa <_Z8drawYRow6String+0x82>
 80a030a:	e7f3      	b.n	80a02f4 <_Z8drawYRow6String+0x7c>
 80a030c:	20000078 	.word	0x20000078
 80a0310:	20000a38 	.word	0x20000a38
 80a0314:	080a21b4 	.word	0x080a21b4
 80a0318:	20000000 	.word	0x20000000
 80a031c:	20000480 	.word	0x20000480

080a0320 <_Z8drawZRow6String>:
  animationChange = 10000;
 80a0320:	f242 7210 	movw	r2, #10000	; 0x2710
{
 80a0324:	b5f0      	push	{r4, r5, r6, r7, lr}
  animationChange = 10000;
 80a0326:	4b27      	ldr	r3, [pc, #156]	; (80a03c4 <_Z8drawZRow6String+0xa4>)
{
 80a0328:	b085      	sub	sp, #20
 80a032a:	4605      	mov	r5, r0
  int x = random(0, 4);
 80a032c:	2104      	movs	r1, #4
 80a032e:	2000      	movs	r0, #0
  animationChange = 10000;
 80a0330:	601a      	str	r2, [r3, #0]
  int x = random(0, 4);
 80a0332:	f001 fa7e 	bl	80a1832 <_Z6randomii>
  int y = random(0, 4);
 80a0336:	2104      	movs	r1, #4
  int x = random(0, 4);
 80a0338:	9002      	str	r0, [sp, #8]
  int y = random(0, 4);
 80a033a:	2000      	movs	r0, #0
 80a033c:	f001 fa79 	bl	80a1832 <_Z6randomii>
  color = nextColor(color);
 80a0340:	4c21      	ldr	r4, [pc, #132]	; (80a03c8 <_Z8drawZRow6String+0xa8>)
  int y = random(0, 4);
 80a0342:	9003      	str	r0, [sp, #12]
  color = nextColor(color);
 80a0344:	6820      	ldr	r0, [r4, #0]
 80a0346:	f000 ff07 	bl	80a1158 <_Z9nextColori>
 80a034a:	6020      	str	r0, [r4, #0]
  if (sscanf(cmd, "%d, %d, %d", &x, &y, &color) == 3)
 80a034c:	9400      	str	r4, [sp, #0]
 80a034e:	491f      	ldr	r1, [pc, #124]	; (80a03cc <_Z8drawZRow6String+0xac>)
 80a0350:	6828      	ldr	r0, [r5, #0]
 80a0352:	ab03      	add	r3, sp, #12
 80a0354:	aa02      	add	r2, sp, #8
 80a0356:	f001 f8cb 	bl	80a14f0 <sscanf>
 80a035a:	210c      	movs	r1, #12
      grid[x][y][z][0] = allColors[color][0];
 80a035c:	6823      	ldr	r3, [r4, #0]
 80a035e:	4d1c      	ldr	r5, [pc, #112]	; (80a03d0 <_Z8drawZRow6String+0xb0>)
 80a0360:	4359      	muls	r1, r3
  if (sscanf(cmd, "%d, %d, %d", &x, &y, &color) == 3)
 80a0362:	2803      	cmp	r0, #3
 80a0364:	4a1b      	ldr	r2, [pc, #108]	; (80a03d4 <_Z8drawZRow6String+0xb4>)
      grid[x][y][z][0] = allColors[color][0];
 80a0366:	eb05 0301 	add.w	r3, r5, r1
 80a036a:	e9dd 6002 	ldrd	r6, r0, [sp, #8]
  if (sscanf(cmd, "%d, %d, %d", &x, &y, &color) == 3)
 80a036e:	d115      	bne.n	80a039c <_Z8drawZRow6String+0x7c>
      grid[x][y][z][0] = allColors[color][0];
 80a0370:	586f      	ldr	r7, [r5, r1]
      grid[x][y][z][2] = allColors[color][2];
 80a0372:	e9d3 5401 	ldrd	r5, r4, [r3, #4]
 80a0376:	23c0      	movs	r3, #192	; 0xc0
 80a0378:	fb03 f106 	mul.w	r1, r3, r6
 80a037c:	2330      	movs	r3, #48	; 0x30
 80a037e:	fb03 1300 	mla	r3, r3, r0, r1
 80a0382:	4413      	add	r3, r2
    for (int z = 0; z < 4; z++)
 80a0384:	2200      	movs	r2, #0
 80a0386:	3201      	adds	r2, #1
 80a0388:	2a04      	cmp	r2, #4
      grid[x][y][z][1] = allColors[color][1];
 80a038a:	e9c3 7500 	strd	r7, r5, [r3]
      grid[x][y][z][2] = allColors[color][2];
 80a038e:	609c      	str	r4, [r3, #8]
    for (int z = 0; z < 4; z++)
 80a0390:	f103 030c 	add.w	r3, r3, #12
 80a0394:	d1f7      	bne.n	80a0386 <_Z8drawZRow6String+0x66>
}
 80a0396:	2001      	movs	r0, #1
 80a0398:	b005      	add	sp, #20
 80a039a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      grid[x][y][z][0] = allColors[color][0];
 80a039c:	586d      	ldr	r5, [r5, r1]
      grid[x][y][z][2] = allColors[color][2];
 80a039e:	e9d3 4101 	ldrd	r4, r1, [r3, #4]
 80a03a2:	23c0      	movs	r3, #192	; 0xc0
 80a03a4:	4373      	muls	r3, r6
 80a03a6:	2630      	movs	r6, #48	; 0x30
 80a03a8:	fb06 3300 	mla	r3, r6, r0, r3
 80a03ac:	4413      	add	r3, r2
    for (int z = 0; z < 4; z++)
 80a03ae:	2200      	movs	r2, #0
 80a03b0:	3201      	adds	r2, #1
 80a03b2:	2a04      	cmp	r2, #4
      grid[x][y][z][1] = allColors[color][1];
 80a03b4:	e9c3 5400 	strd	r5, r4, [r3]
      grid[x][y][z][2] = allColors[color][2];
 80a03b8:	6099      	str	r1, [r3, #8]
    for (int z = 0; z < 4; z++)
 80a03ba:	f103 030c 	add.w	r3, r3, #12
 80a03be:	d1f7      	bne.n	80a03b0 <_Z8drawZRow6String+0x90>
 80a03c0:	e7e9      	b.n	80a0396 <_Z8drawZRow6String+0x76>
 80a03c2:	bf00      	nop
 80a03c4:	20000078 	.word	0x20000078
 80a03c8:	20000a38 	.word	0x20000a38
 80a03cc:	080a21b4 	.word	0x080a21b4
 80a03d0:	20000000 	.word	0x20000000
 80a03d4:	20000480 	.word	0x20000480

080a03d8 <_Z13drawWholeCube6String>:
  resetGrid();
  return 1;
}

int drawWholeCube(String cmd)
{
 80a03d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // animationChange = 10000;
  color = nextPrimaryColor(color);
 80a03da:	4c13      	ldr	r4, [pc, #76]	; (80a0428 <_Z13drawWholeCube6String+0x50>)
 80a03dc:	6820      	ldr	r0, [r4, #0]
 80a03de:	f000 fec2 	bl	80a1166 <_Z16nextPrimaryColori>
  {
    for (int y = 0; y < 4; y++)
    {
      for (int z = 0; z < 4; z++)
      {
        grid[x][y][z][0] = primaryColors[color][0];
 80a03e2:	230c      	movs	r3, #12
  color = nextPrimaryColor(color);
 80a03e4:	6020      	str	r0, [r4, #0]
        grid[x][y][z][0] = primaryColors[color][0];
 80a03e6:	4358      	muls	r0, r3
 80a03e8:	4a10      	ldr	r2, [pc, #64]	; (80a042c <_Z13drawWholeCube6String+0x54>)
 80a03ea:	f8df c044 	ldr.w	ip, [pc, #68]	; 80a0430 <_Z13drawWholeCube6String+0x58>
 80a03ee:	1813      	adds	r3, r2, r0
 80a03f0:	5815      	ldr	r5, [r2, r0]
        grid[x][y][z][1] = primaryColors[color][1];
        grid[x][y][z][2] = primaryColors[color][2];
 80a03f2:	2200      	movs	r2, #0
 80a03f4:	e9d3 6701 	ldrd	r6, r7, [r3, #4]
    for (int y = 0; y < 4; y++)
 80a03f8:	2100      	movs	r1, #0
 80a03fa:	eb0c 0002 	add.w	r0, ip, r2
 80a03fe:	4603      	mov	r3, r0
      for (int z = 0; z < 4; z++)
 80a0400:	2400      	movs	r4, #0
 80a0402:	3401      	adds	r4, #1
 80a0404:	2c04      	cmp	r4, #4
        grid[x][y][z][1] = primaryColors[color][1];
 80a0406:	e9c3 5600 	strd	r5, r6, [r3]
        grid[x][y][z][2] = primaryColors[color][2];
 80a040a:	609f      	str	r7, [r3, #8]
      for (int z = 0; z < 4; z++)
 80a040c:	f103 030c 	add.w	r3, r3, #12
 80a0410:	d1f7      	bne.n	80a0402 <_Z13drawWholeCube6String+0x2a>
    for (int y = 0; y < 4; y++)
 80a0412:	3101      	adds	r1, #1
 80a0414:	2904      	cmp	r1, #4
 80a0416:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80a041a:	d1f0      	bne.n	80a03fe <_Z13drawWholeCube6String+0x26>
  for (int x = 0; x < 4; x++)
 80a041c:	32c0      	adds	r2, #192	; 0xc0
 80a041e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80a0422:	d1e9      	bne.n	80a03f8 <_Z13drawWholeCube6String+0x20>
      }
    }
  }
  return 1;
}
 80a0424:	2001      	movs	r0, #1
 80a0426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0428:	20000a38 	.word	0x20000a38
 80a042c:	20000788 	.word	0x20000788
 80a0430:	20000480 	.word	0x20000480

080a0434 <_Z17crazyFollowColors6String>:

int crazyFollowColors(String cmd)
{
  loopTime = 300;
 80a0434:	f44f 7296 	mov.w	r2, #300	; 0x12c
{
 80a0438:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  loopTime = 300;
 80a043c:	2500      	movs	r5, #0
 80a043e:	4b1a      	ldr	r3, [pc, #104]	; (80a04a8 <_Z17crazyFollowColors6String+0x74>)
  {
    for (int y = 0; y < 4; y++)
    {
      for (int z = 0; z < 4; z++)
      {
        grid[x][y][z][0] = allColors[color][0];
 80a0440:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80a04b0 <_Z17crazyFollowColors6String+0x7c>
  loopTime = 300;
 80a0444:	601a      	str	r2, [r3, #0]
        grid[x][y][z][0] = allColors[color][0];
 80a0446:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80a04b4 <_Z17crazyFollowColors6String+0x80>
 80a044a:	4b18      	ldr	r3, [pc, #96]	; (80a04ac <_Z17crazyFollowColors6String+0x78>)
    for (int y = 0; y < 4; y++)
 80a044c:	2600      	movs	r6, #0
        grid[x][y][z][0] = allColors[color][0];
 80a044e:	f04f 0b0c 	mov.w	fp, #12
 80a0452:	195f      	adds	r7, r3, r5
    for (int y = 0; y < 4; y++)
 80a0454:	463c      	mov	r4, r7
      for (int z = 0; z < 4; z++)
 80a0456:	f04f 0800 	mov.w	r8, #0
        grid[x][y][z][0] = allColors[color][0];
 80a045a:	f8d9 0000 	ldr.w	r0, [r9]
      for (int z = 0; z < 4; z++)
 80a045e:	f108 0801 	add.w	r8, r8, #1
        grid[x][y][z][0] = allColors[color][0];
 80a0462:	fb0b f200 	mul.w	r2, fp, r0
 80a0466:	eb0a 0102 	add.w	r1, sl, r2
 80a046a:	f85a 2002 	ldr.w	r2, [sl, r2]
 80a046e:	340c      	adds	r4, #12
 80a0470:	f844 2c0c 	str.w	r2, [r4, #-12]
        grid[x][y][z][1] = allColors[color][1];
 80a0474:	684a      	ldr	r2, [r1, #4]
 80a0476:	f844 2c08 	str.w	r2, [r4, #-8]
        grid[x][y][z][2] = allColors[color][2];
 80a047a:	688a      	ldr	r2, [r1, #8]
 80a047c:	f844 2c04 	str.w	r2, [r4, #-4]
        color = nextColor(color);
 80a0480:	f000 fe6a 	bl	80a1158 <_Z9nextColori>
      for (int z = 0; z < 4; z++)
 80a0484:	f1b8 0f04 	cmp.w	r8, #4
 80a0488:	4b08      	ldr	r3, [pc, #32]	; (80a04ac <_Z17crazyFollowColors6String+0x78>)
        color = nextColor(color);
 80a048a:	f8c9 0000 	str.w	r0, [r9]
      for (int z = 0; z < 4; z++)
 80a048e:	d1e4      	bne.n	80a045a <_Z17crazyFollowColors6String+0x26>
    for (int y = 0; y < 4; y++)
 80a0490:	3601      	adds	r6, #1
 80a0492:	2e04      	cmp	r6, #4
 80a0494:	f107 0730 	add.w	r7, r7, #48	; 0x30
 80a0498:	d1dc      	bne.n	80a0454 <_Z17crazyFollowColors6String+0x20>
  for (int x = 0; x < 4; x++)
 80a049a:	35c0      	adds	r5, #192	; 0xc0
 80a049c:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 80a04a0:	d1d4      	bne.n	80a044c <_Z17crazyFollowColors6String+0x18>
      }
    }
  }
  return 1;
}
 80a04a2:	2001      	movs	r0, #1
 80a04a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a04a8:	20000780 	.word	0x20000780
 80a04ac:	20000480 	.word	0x20000480
 80a04b0:	20000a38 	.word	0x20000a38
 80a04b4:	20000000 	.word	0x20000000

080a04b8 <_Z9resetGridv>:
    resetGrid();
  }
}

void resetGrid()
{
 80a04b8:	2200      	movs	r2, #0
  {
    for (int y = 0; y < 4; y++)
    {
      for (int z = 0; z < 4; z++)
      {
        grid[x][y][z][0] = 4;
 80a04ba:	2104      	movs	r1, #4
{
 80a04bc:	b570      	push	{r4, r5, r6, lr}
 80a04be:	4e0b      	ldr	r6, [pc, #44]	; (80a04ec <_Z9resetGridv+0x34>)
    for (int y = 0; y < 4; y++)
 80a04c0:	2000      	movs	r0, #0
 80a04c2:	18b4      	adds	r4, r6, r2
 80a04c4:	4623      	mov	r3, r4
      for (int z = 0; z < 4; z++)
 80a04c6:	2500      	movs	r5, #0
 80a04c8:	3501      	adds	r5, #1
 80a04ca:	2d04      	cmp	r5, #4
        grid[x][y][z][1] = 4;
 80a04cc:	e9c3 1100 	strd	r1, r1, [r3]
        grid[x][y][z][2] = 4;
 80a04d0:	6099      	str	r1, [r3, #8]
      for (int z = 0; z < 4; z++)
 80a04d2:	f103 030c 	add.w	r3, r3, #12
 80a04d6:	d1f7      	bne.n	80a04c8 <_Z9resetGridv+0x10>
    for (int y = 0; y < 4; y++)
 80a04d8:	3001      	adds	r0, #1
 80a04da:	2804      	cmp	r0, #4
 80a04dc:	f104 0430 	add.w	r4, r4, #48	; 0x30
 80a04e0:	d1f0      	bne.n	80a04c4 <_Z9resetGridv+0xc>
  for (int x = 0; x < 4; x++)
 80a04e2:	32c0      	adds	r2, #192	; 0xc0
 80a04e4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80a04e8:	d1ea      	bne.n	80a04c0 <_Z9resetGridv+0x8>
      }
    }
  }
}
 80a04ea:	bd70      	pop	{r4, r5, r6, pc}
 80a04ec:	20000480 	.word	0x20000480

080a04f0 <_Z20checkAnimationChangev>:
{
 80a04f0:	b570      	push	{r4, r5, r6, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a04f2:	f000 fe77 	bl	80a11e4 <HAL_Timer_Get_Milli_Seconds>
  if ((now - lastAnimationChange) >= animationChange)
 80a04f6:	4d0f      	ldr	r5, [pc, #60]	; (80a0534 <_Z20checkAnimationChangev+0x44>)
  now = millis();
 80a04f8:	4e0f      	ldr	r6, [pc, #60]	; (80a0538 <_Z20checkAnimationChangev+0x48>)
  if ((now - lastAnimationChange) >= animationChange)
 80a04fa:	682b      	ldr	r3, [r5, #0]
  now = millis();
 80a04fc:	6030      	str	r0, [r6, #0]
  if ((now - lastAnimationChange) >= animationChange)
 80a04fe:	1ac0      	subs	r0, r0, r3
 80a0500:	4b0e      	ldr	r3, [pc, #56]	; (80a053c <_Z20checkAnimationChangev+0x4c>)
 80a0502:	681b      	ldr	r3, [r3, #0]
 80a0504:	4298      	cmp	r0, r3
 80a0506:	d313      	bcc.n	80a0530 <_Z20checkAnimationChangev+0x40>
    haltAnimation = false;
 80a0508:	2400      	movs	r4, #0
 80a050a:	4b0d      	ldr	r3, [pc, #52]	; (80a0540 <_Z20checkAnimationChangev+0x50>)
 80a050c:	701c      	strb	r4, [r3, #0]
    resetGrid();
 80a050e:	f7ff ffd3 	bl	80a04b8 <_Z9resetGridv>
    if (currentAnimation == tunnelAnimation)
 80a0512:	4a0c      	ldr	r2, [pc, #48]	; (80a0544 <_Z20checkAnimationChangev+0x54>)
    lastAnimationChange = now;
 80a0514:	6833      	ldr	r3, [r6, #0]
 80a0516:	602b      	str	r3, [r5, #0]
    if (currentAnimation == tunnelAnimation)
 80a0518:	7813      	ldrb	r3, [r2, #0]
 80a051a:	2b0a      	cmp	r3, #10
      currentAnimation = static_cast<Animation>((currentAnimation + 1) % 11);
 80a051c:	bf1f      	itttt	ne
 80a051e:	200b      	movne	r0, #11
 80a0520:	3301      	addne	r3, #1
 80a0522:	fbb3 f1f0 	udivne	r1, r3, r0
 80a0526:	fb00 3311 	mlsne	r3, r0, r1, r3
      currentAnimation = chaseTheDotAnimation;
 80a052a:	bf0c      	ite	eq
 80a052c:	7014      	strbeq	r4, [r2, #0]
      currentAnimation = static_cast<Animation>((currentAnimation + 1) % 11);
 80a052e:	7013      	strbne	r3, [r2, #0]
}
 80a0530:	bd70      	pop	{r4, r5, r6, pc}
 80a0532:	bf00      	nop
 80a0534:	20000a44 	.word	0x20000a44
 80a0538:	20000a4c 	.word	0x20000a4c
 80a053c:	20000078 	.word	0x20000078
 80a0540:	20000a40 	.word	0x20000a40
 80a0544:	2000027c 	.word	0x2000027c

080a0548 <_Z7resetIt6String>:
{
 80a0548:	b508      	push	{r3, lr}
  resetGrid();
 80a054a:	f7ff ffb5 	bl	80a04b8 <_Z9resetGridv>
}
 80a054e:	2001      	movs	r0, #1
 80a0550:	bd08      	pop	{r3, pc}
	...

080a0554 <_Z14checkResetGridv>:
{
 80a0554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int off[3] = {4,
 80a0558:	2400      	movs	r4, #0
  bool reset = true;
 80a055a:	2601      	movs	r6, #1
  int off[3] = {4,
 80a055c:	4b12      	ldr	r3, [pc, #72]	; (80a05a8 <_Z14checkResetGridv+0x54>)
{
 80a055e:	b085      	sub	sp, #20
  int off[3] = {4,
 80a0560:	ad01      	add	r5, sp, #4
 80a0562:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80a0566:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  for (int x = 0; x < 4; x++)
 80a056a:	f8df 9040 	ldr.w	r9, [pc, #64]	; 80a05ac <_Z14checkResetGridv+0x58>
    for (int y = 0; y < 4; y++)
 80a056e:	2700      	movs	r7, #0
 80a0570:	eb09 0804 	add.w	r8, r9, r4
      template<typename _Tp>
	static bool
	equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
	{
	  if (const size_t __len = (__last1 - __first1))
	    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
 80a0574:	4640      	mov	r0, r8
 80a0576:	220c      	movs	r2, #12
 80a0578:	4629      	mov	r1, r5
 80a057a:	f001 fd23 	bl	80a1fc4 <memcmp>
 80a057e:	3701      	adds	r7, #1
          reset = false;
 80a0580:	2800      	cmp	r0, #0
 80a0582:	bf08      	it	eq
 80a0584:	2600      	moveq	r6, #0
    for (int y = 0; y < 4; y++)
 80a0586:	2f04      	cmp	r7, #4
 80a0588:	f108 0830 	add.w	r8, r8, #48	; 0x30
 80a058c:	d1f2      	bne.n	80a0574 <_Z14checkResetGridv+0x20>
  for (int x = 0; x < 4; x++)
 80a058e:	34c0      	adds	r4, #192	; 0xc0
 80a0590:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 80a0594:	d1eb      	bne.n	80a056e <_Z14checkResetGridv+0x1a>
  if (reset)
 80a0596:	b126      	cbz	r6, 80a05a2 <_Z14checkResetGridv+0x4e>
}
 80a0598:	b005      	add	sp, #20
 80a059a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    resetGrid();
 80a059e:	f7ff bf8b 	b.w	80a04b8 <_Z9resetGridv>
}
 80a05a2:	b005      	add	sp, #20
 80a05a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a05a8:	080a21d0 	.word	0x080a21d0
 80a05ac:	20000480 	.word	0x20000480

080a05b0 <_Z11chaseTheDotv>:
{
 80a05b0:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
  checkResetGrid();
 80a05b4:	f7ff ffce 	bl	80a0554 <_Z14checkResetGridv>
  switch (random(0, 6))
 80a05b8:	2106      	movs	r1, #6
 80a05ba:	2000      	movs	r0, #0
 80a05bc:	f001 f939 	bl	80a1832 <_Z6randomii>
 80a05c0:	4f30      	ldr	r7, [pc, #192]	; (80a0684 <_Z11chaseTheDotv+0xd4>)
 80a05c2:	4e31      	ldr	r6, [pc, #196]	; (80a0688 <_Z11chaseTheDotv+0xd8>)
 80a05c4:	4d31      	ldr	r5, [pc, #196]	; (80a068c <_Z11chaseTheDotv+0xdc>)
 80a05c6:	2805      	cmp	r0, #5
 80a05c8:	d80e      	bhi.n	80a05e8 <_Z11chaseTheDotv+0x38>
 80a05ca:	e8df f000 	tbb	[pc, r0]
 80a05ce:	0803      	.short	0x0803
 80a05d0:	55504a45 	.word	0x55504a45
    if (xpos > 0)
 80a05d4:	683b      	ldr	r3, [r7, #0]
 80a05d6:	2b00      	cmp	r3, #0
 80a05d8:	dd01      	ble.n	80a05de <_Z11chaseTheDotv+0x2e>
    xpos--;
 80a05da:	3b01      	subs	r3, #1
 80a05dc:	e003      	b.n	80a05e6 <_Z11chaseTheDotv+0x36>
    if (xpos < 3)
 80a05de:	683b      	ldr	r3, [r7, #0]
 80a05e0:	2b02      	cmp	r3, #2
 80a05e2:	dcfa      	bgt.n	80a05da <_Z11chaseTheDotv+0x2a>
      xpos++;
 80a05e4:	3301      	adds	r3, #1
 80a05e6:	603b      	str	r3, [r7, #0]
  if (std::equal(std::begin(grid[xpos][ypos][zpos]), std::end(grid[xpos][ypos][zpos]), std::begin(allColors[color])))
 80a05e8:	220c      	movs	r2, #12
 80a05ea:	2130      	movs	r1, #48	; 0x30
 80a05ec:	682b      	ldr	r3, [r5, #0]
 80a05ee:	6830      	ldr	r0, [r6, #0]
 80a05f0:	4353      	muls	r3, r2
 80a05f2:	fb01 3300 	mla	r3, r1, r0, r3
 80a05f6:	21c0      	movs	r1, #192	; 0xc0
 80a05f8:	6838      	ldr	r0, [r7, #0]
 80a05fa:	4c25      	ldr	r4, [pc, #148]	; (80a0690 <_Z11chaseTheDotv+0xe0>)
 80a05fc:	fb01 3000 	mla	r0, r1, r0, r3
 80a0600:	f8d4 a000 	ldr.w	sl, [r4]
 80a0604:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80a0694 <_Z11chaseTheDotv+0xe4>
 80a0608:	f8df b08c 	ldr.w	fp, [pc, #140]	; 80a0698 <_Z11chaseTheDotv+0xe8>
 80a060c:	fb02 810a 	mla	r1, r2, sl, r8
 80a0610:	4458      	add	r0, fp
 80a0612:	f001 fcd7 	bl	80a1fc4 <memcmp>
 80a0616:	b918      	cbnz	r0, 80a0620 <_Z11chaseTheDotv+0x70>
    color = nextColor(color);
 80a0618:	4650      	mov	r0, sl
 80a061a:	f000 fd9d 	bl	80a1158 <_Z9nextColori>
 80a061e:	6020      	str	r0, [r4, #0]
  grid[xpos][ypos][zpos][0] = allColors[color][0];
 80a0620:	2030      	movs	r0, #48	; 0x30
 80a0622:	6831      	ldr	r1, [r6, #0]
 80a0624:	220c      	movs	r2, #12
 80a0626:	4341      	muls	r1, r0
 80a0628:	20c0      	movs	r0, #192	; 0xc0
 80a062a:	682b      	ldr	r3, [r5, #0]
 80a062c:	6824      	ldr	r4, [r4, #0]
 80a062e:	683f      	ldr	r7, [r7, #0]
 80a0630:	4353      	muls	r3, r2
 80a0632:	4362      	muls	r2, r4
 80a0634:	4378      	muls	r0, r7
 80a0636:	eb08 0602 	add.w	r6, r8, r2
 80a063a:	185d      	adds	r5, r3, r1
 80a063c:	f858 2002 	ldr.w	r2, [r8, r2]
 80a0640:	4405      	add	r5, r0
  grid[xpos][ypos][zpos][1] = allColors[color][1];
 80a0642:	4403      	add	r3, r0
  grid[xpos][ypos][zpos][0] = allColors[color][0];
 80a0644:	f84b 2005 	str.w	r2, [fp, r5]
  grid[xpos][ypos][zpos][1] = allColors[color][1];
 80a0648:	440b      	add	r3, r1
 80a064a:	6872      	ldr	r2, [r6, #4]
 80a064c:	445b      	add	r3, fp
 80a064e:	605a      	str	r2, [r3, #4]
  grid[xpos][ypos][zpos][2] = allColors[color][2];
 80a0650:	68b2      	ldr	r2, [r6, #8]
 80a0652:	609a      	str	r2, [r3, #8]
}
 80a0654:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
    if (ypos > 0)
 80a0658:	6833      	ldr	r3, [r6, #0]
 80a065a:	2b00      	cmp	r3, #0
 80a065c:	dd01      	ble.n	80a0662 <_Z11chaseTheDotv+0xb2>
    ypos--;
 80a065e:	3b01      	subs	r3, #1
 80a0660:	e003      	b.n	80a066a <_Z11chaseTheDotv+0xba>
    if (ypos < 3)
 80a0662:	6833      	ldr	r3, [r6, #0]
 80a0664:	2b02      	cmp	r3, #2
 80a0666:	dcfa      	bgt.n	80a065e <_Z11chaseTheDotv+0xae>
      ypos++;
 80a0668:	3301      	adds	r3, #1
    ypos--;
 80a066a:	6033      	str	r3, [r6, #0]
    break;
 80a066c:	e7bc      	b.n	80a05e8 <_Z11chaseTheDotv+0x38>
    if (zpos > 0)
 80a066e:	682b      	ldr	r3, [r5, #0]
 80a0670:	2b00      	cmp	r3, #0
 80a0672:	dd01      	ble.n	80a0678 <_Z11chaseTheDotv+0xc8>
    zpos--;
 80a0674:	3b01      	subs	r3, #1
 80a0676:	e003      	b.n	80a0680 <_Z11chaseTheDotv+0xd0>
    if (zpos < 3)
 80a0678:	682b      	ldr	r3, [r5, #0]
 80a067a:	2b02      	cmp	r3, #2
 80a067c:	dcfa      	bgt.n	80a0674 <_Z11chaseTheDotv+0xc4>
      zpos++;
 80a067e:	3301      	adds	r3, #1
    zpos--;
 80a0680:	602b      	str	r3, [r5, #0]
    break;
 80a0682:	e7b1      	b.n	80a05e8 <_Z11chaseTheDotv+0x38>
 80a0684:	20000a54 	.word	0x20000a54
 80a0688:	20000a58 	.word	0x20000a58
 80a068c:	20000a5c 	.word	0x20000a5c
 80a0690:	20000a38 	.word	0x20000a38
 80a0694:	20000000 	.word	0x20000000
 80a0698:	20000480 	.word	0x20000480

080a069c <_Z8drawLineiiiiiii>:

void drawLine(int color, int startx, int starty, int startz, int endx, int endy, int endz)
{
 80a069c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a06a0:	b08d      	sub	sp, #52	; 0x34
 80a06a2:	9309      	str	r3, [sp, #36]	; 0x24
  bool reverseX = false;
  bool reverseY = false;
  bool reverseZ = false;
  if (startx > endx)
 80a06a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
{
 80a06a6:	e9cd 210a 	strd	r2, r1, [sp, #40]	; 0x28
  if (startx > endx)
 80a06aa:	4299      	cmp	r1, r3
{
 80a06ac:	9008      	str	r0, [sp, #32]
  if (startx > endx)
 80a06ae:	f340 808a 	ble.w	80a07c6 <_Z8drawLineiiiiiii+0x12a>
  {
    swapint(startx, endx);
 80a06b2:	a916      	add	r1, sp, #88	; 0x58
 80a06b4:	a80b      	add	r0, sp, #44	; 0x2c
 80a06b6:	f000 fd69 	bl	80a118c <_Z7swapintRiS_>
    reverseX = true;
 80a06ba:	2301      	movs	r3, #1
  }
  if (starty > endy)
 80a06bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  bool reverseX = false;
 80a06be:	9300      	str	r3, [sp, #0]
  if (starty > endy)
 80a06c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a06c2:	429a      	cmp	r2, r3
 80a06c4:	f340 8081 	ble.w	80a07ca <_Z8drawLineiiiiiii+0x12e>
  {
    swapint(starty, endy);
 80a06c8:	a917      	add	r1, sp, #92	; 0x5c
 80a06ca:	a80a      	add	r0, sp, #40	; 0x28
 80a06cc:	f000 fd5e 	bl	80a118c <_Z7swapintRiS_>
    reverseY = true;
 80a06d0:	2301      	movs	r3, #1
  }
  if (startz > endz)
 80a06d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  bool reverseY = false;
 80a06d4:	9301      	str	r3, [sp, #4]
  if (startz > endz)
 80a06d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80a06d8:	429a      	cmp	r2, r3
 80a06da:	dd78      	ble.n	80a07ce <_Z8drawLineiiiiiii+0x132>
  {
    swapint(startz, endz);
 80a06dc:	a918      	add	r1, sp, #96	; 0x60
 80a06de:	a809      	add	r0, sp, #36	; 0x24
 80a06e0:	f000 fd54 	bl	80a118c <_Z7swapintRiS_>
    reverseZ = true;
 80a06e4:	2301      	movs	r3, #1
  }

  int delx = endx - startx;
 80a06e6:	9c16      	ldr	r4, [sp, #88]	; 0x58
  bool reverseZ = false;
 80a06e8:	9302      	str	r3, [sp, #8]
  int delx = endx - startx;
 80a06ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  int dely = endy - starty;
 80a06ec:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  int delx = endx - startx;
 80a06ee:	1ae4      	subs	r4, r4, r3
  int dely = endy - starty;
 80a06f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  int delz = endz - startz;
 80a06f2:	9e18      	ldr	r6, [sp, #96]	; 0x60
  int dely = endy - starty;
 80a06f4:	1aed      	subs	r5, r5, r3
  int delz = endz - startz;
 80a06f6:	9b09      	ldr	r3, [sp, #36]	; 0x24

  int longest = (delx > dely   ? delx > delz ? delx : delz > dely ? delz
 80a06f8:	42ac      	cmp	r4, r5
  int delz = endz - startz;
 80a06fa:	eba6 0603 	sub.w	r6, r6, r3
  int longest = (delx > dely   ? delx > delz ? delx : delz > dely ? delz
 80a06fe:	dd68      	ble.n	80a07d2 <_Z8drawLineiiiiiii+0x136>
 80a0700:	42b4      	cmp	r4, r6
 80a0702:	46a2      	mov	sl, r4
 80a0704:	bfb8      	it	lt
 80a0706:	46b2      	movlt	sl, r6
                                                                  : dely
                 : dely > delz ? dely
                 : delz > delx ? delz
                               : delx);
  for (int i = 0; i < longest; i++)
 80a0708:	2700      	movs	r7, #0
 80a070a:	46bb      	mov	fp, r7
 80a070c:	fb06 f30a 	mul.w	r3, r6, sl
 80a0710:	9305      	str	r3, [sp, #20]
 80a0712:	fb05 f30a 	mul.w	r3, r5, sl
 80a0716:	9306      	str	r3, [sp, #24]
 80a0718:	fb04 f30a 	mul.w	r3, r4, sl
 80a071c:	e9cd 7703 	strd	r7, r7, [sp, #12]
 80a0720:	9307      	str	r3, [sp, #28]
 80a0722:	9b03      	ldr	r3, [sp, #12]
 80a0724:	4553      	cmp	r3, sl
    grid[xpos][ypos][zpos][0] = allColors[color][0];
    grid[xpos][ypos][zpos][1] = allColors[color][1];
    grid[xpos][ypos][zpos][2] = allColors[color][2];
  }

  if (reverseX)
 80a0726:	9b00      	ldr	r3, [sp, #0]
  for (int i = 0; i < longest; i++)
 80a0728:	da5d      	bge.n	80a07e6 <_Z8drawLineiiiiiii+0x14a>
      xpos = roundClosest(((longest - i) * delx), longest) + startx;
 80a072a:	4651      	mov	r1, sl
    if (reverseX)
 80a072c:	2b00      	cmp	r3, #0
 80a072e:	d054      	beq.n	80a07da <_Z8drawLineiiiiiii+0x13e>
      xpos = roundClosest(((longest - i) * delx), longest) + startx;
 80a0730:	9807      	ldr	r0, [sp, #28]
      xpos = roundClosest((i * delx), longest) + startx;
 80a0732:	f000 fd20 	bl	80a1176 <_Z12roundClosestii>
 80a0736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      ypos = roundClosest(((longest - i) * dely), longest) + starty;
 80a0738:	4651      	mov	r1, sl
      xpos = roundClosest((i * delx), longest) + startx;
 80a073a:	eb00 0803 	add.w	r8, r0, r3
    if (reverseY)
 80a073e:	9b01      	ldr	r3, [sp, #4]
 80a0740:	2b00      	cmp	r3, #0
 80a0742:	d04c      	beq.n	80a07de <_Z8drawLineiiiiiii+0x142>
      ypos = roundClosest(((longest - i) * dely), longest) + starty;
 80a0744:	9806      	ldr	r0, [sp, #24]
      ypos = roundClosest((i * dely), longest) + starty;
 80a0746:	f000 fd16 	bl	80a1176 <_Z12roundClosestii>
 80a074a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      zpos = roundClosest(((longest - i) * delz), longest) + startz;
 80a074c:	4651      	mov	r1, sl
      ypos = roundClosest((i * dely), longest) + starty;
 80a074e:	eb00 0903 	add.w	r9, r0, r3
    if (reverseZ)
 80a0752:	9b02      	ldr	r3, [sp, #8]
 80a0754:	2b00      	cmp	r3, #0
 80a0756:	d044      	beq.n	80a07e2 <_Z8drawLineiiiiiii+0x146>
      zpos = roundClosest(((longest - i) * delz), longest) + startz;
 80a0758:	9805      	ldr	r0, [sp, #20]
      zpos = roundClosest((i * delz), longest) + startz;
 80a075a:	f000 fd0c 	bl	80a1176 <_Z12roundClosestii>
    grid[xpos][ypos][zpos][0] = allColors[color][0];
 80a075e:	210c      	movs	r1, #12
      zpos = roundClosest((i * delz), longest) + startz;
 80a0760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a0762:	44ab      	add	fp, r5
 80a0764:	4418      	add	r0, r3
    grid[xpos][ypos][zpos][0] = allColors[color][0];
 80a0766:	fb01 f300 	mul.w	r3, r1, r0
 80a076a:	2030      	movs	r0, #48	; 0x30
 80a076c:	fb00 f909 	mul.w	r9, r0, r9
 80a0770:	20c0      	movs	r0, #192	; 0xc0
 80a0772:	fb00 f808 	mul.w	r8, r0, r8
 80a0776:	4608      	mov	r0, r1
 80a0778:	9908      	ldr	r1, [sp, #32]
 80a077a:	eb03 0209 	add.w	r2, r3, r9
 80a077e:	4348      	muls	r0, r1
 80a0780:	492f      	ldr	r1, [pc, #188]	; (80a0840 <_Z8drawLineiiiiiii+0x1a4>)
 80a0782:	4442      	add	r2, r8
 80a0784:	eb01 0c00 	add.w	ip, r1, r0
    grid[xpos][ypos][zpos][1] = allColors[color][1];
 80a0788:	4498      	add	r8, r3
    grid[xpos][ypos][zpos][0] = allColors[color][0];
 80a078a:	5808      	ldr	r0, [r1, r0]
 80a078c:	492d      	ldr	r1, [pc, #180]	; (80a0844 <_Z8drawLineiiiiiii+0x1a8>)
    grid[xpos][ypos][zpos][1] = allColors[color][1];
 80a078e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80a0792:	44c1      	add	r9, r8
 80a0794:	4489      	add	r9, r1
    grid[xpos][ypos][zpos][0] = allColors[color][0];
 80a0796:	5088      	str	r0, [r1, r2]
    grid[xpos][ypos][zpos][1] = allColors[color][1];
 80a0798:	f8c9 3004 	str.w	r3, [r9, #4]
    grid[xpos][ypos][zpos][2] = allColors[color][2];
 80a079c:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80a07a0:	4427      	add	r7, r4
 80a07a2:	f8c9 3008 	str.w	r3, [r9, #8]
  for (int i = 0; i < longest; i++)
 80a07a6:	9b03      	ldr	r3, [sp, #12]
 80a07a8:	3301      	adds	r3, #1
 80a07aa:	9303      	str	r3, [sp, #12]
 80a07ac:	9b05      	ldr	r3, [sp, #20]
 80a07ae:	1b9b      	subs	r3, r3, r6
 80a07b0:	9305      	str	r3, [sp, #20]
 80a07b2:	9b04      	ldr	r3, [sp, #16]
 80a07b4:	4433      	add	r3, r6
 80a07b6:	9304      	str	r3, [sp, #16]
 80a07b8:	9b06      	ldr	r3, [sp, #24]
 80a07ba:	1b5b      	subs	r3, r3, r5
 80a07bc:	9306      	str	r3, [sp, #24]
 80a07be:	9b07      	ldr	r3, [sp, #28]
 80a07c0:	1b1b      	subs	r3, r3, r4
 80a07c2:	9307      	str	r3, [sp, #28]
 80a07c4:	e7ad      	b.n	80a0722 <_Z8drawLineiiiiiii+0x86>
  bool reverseX = false;
 80a07c6:	2300      	movs	r3, #0
 80a07c8:	e778      	b.n	80a06bc <_Z8drawLineiiiiiii+0x20>
  bool reverseY = false;
 80a07ca:	2300      	movs	r3, #0
 80a07cc:	e781      	b.n	80a06d2 <_Z8drawLineiiiiiii+0x36>
  bool reverseZ = false;
 80a07ce:	2300      	movs	r3, #0
 80a07d0:	e789      	b.n	80a06e6 <_Z8drawLineiiiiiii+0x4a>
                 : dely > delz ? dely
 80a07d2:	42b5      	cmp	r5, r6
 80a07d4:	dd94      	ble.n	80a0700 <_Z8drawLineiiiiiii+0x64>
 80a07d6:	46aa      	mov	sl, r5
 80a07d8:	e796      	b.n	80a0708 <_Z8drawLineiiiiiii+0x6c>
      xpos = roundClosest((i * delx), longest) + startx;
 80a07da:	4638      	mov	r0, r7
 80a07dc:	e7a9      	b.n	80a0732 <_Z8drawLineiiiiiii+0x96>
      ypos = roundClosest((i * dely), longest) + starty;
 80a07de:	4658      	mov	r0, fp
 80a07e0:	e7b1      	b.n	80a0746 <_Z8drawLineiiiiiii+0xaa>
      zpos = roundClosest((i * delz), longest) + startz;
 80a07e2:	9804      	ldr	r0, [sp, #16]
 80a07e4:	e7b9      	b.n	80a075a <_Z8drawLineiiiiiii+0xbe>
  if (reverseX)
 80a07e6:	b11b      	cbz	r3, 80a07f0 <_Z8drawLineiiiiiii+0x154>
    swapint(startx, endx);
 80a07e8:	a916      	add	r1, sp, #88	; 0x58
 80a07ea:	a80b      	add	r0, sp, #44	; 0x2c
 80a07ec:	f000 fcce 	bl	80a118c <_Z7swapintRiS_>
  if (reverseY)
 80a07f0:	9b01      	ldr	r3, [sp, #4]
 80a07f2:	b11b      	cbz	r3, 80a07fc <_Z8drawLineiiiiiii+0x160>
    swapint(starty, endy);
 80a07f4:	a917      	add	r1, sp, #92	; 0x5c
 80a07f6:	a80a      	add	r0, sp, #40	; 0x28
 80a07f8:	f000 fcc8 	bl	80a118c <_Z7swapintRiS_>
  if (reverseZ)
 80a07fc:	9b02      	ldr	r3, [sp, #8]
 80a07fe:	b11b      	cbz	r3, 80a0808 <_Z8drawLineiiiiiii+0x16c>
    swapint(startz, endz);
 80a0800:	a918      	add	r1, sp, #96	; 0x60
 80a0802:	a809      	add	r0, sp, #36	; 0x24
 80a0804:	f000 fcc2 	bl	80a118c <_Z7swapintRiS_>
  grid[endx][endy][endz][0] = allColors[color][0];
 80a0808:	2430      	movs	r4, #48	; 0x30
 80a080a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80a080c:	200c      	movs	r0, #12
 80a080e:	4361      	muls	r1, r4
 80a0810:	24c0      	movs	r4, #192	; 0xc0
 80a0812:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80a0814:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80a0816:	4374      	muls	r4, r6
 80a0818:	9e08      	ldr	r6, [sp, #32]
 80a081a:	4343      	muls	r3, r0
 80a081c:	4370      	muls	r0, r6
 80a081e:	4f08      	ldr	r7, [pc, #32]	; (80a0840 <_Z8drawLineiiiiiii+0x1a4>)
 80a0820:	4a08      	ldr	r2, [pc, #32]	; (80a0844 <_Z8drawLineiiiiiii+0x1a8>)
 80a0822:	183e      	adds	r6, r7, r0
 80a0824:	185d      	adds	r5, r3, r1
 80a0826:	5838      	ldr	r0, [r7, r0]
  grid[endx][endy][endz][1] = allColors[color][1];
 80a0828:	4423      	add	r3, r4
  grid[endx][endy][endz][0] = allColors[color][0];
 80a082a:	4425      	add	r5, r4
  grid[endx][endy][endz][1] = allColors[color][1];
 80a082c:	440b      	add	r3, r1
  grid[endx][endy][endz][0] = allColors[color][0];
 80a082e:	5150      	str	r0, [r2, r5]
  grid[endx][endy][endz][1] = allColors[color][1];
 80a0830:	4413      	add	r3, r2
 80a0832:	6872      	ldr	r2, [r6, #4]
 80a0834:	605a      	str	r2, [r3, #4]
  grid[endx][endy][endz][2] = allColors[color][2];
 80a0836:	68b2      	ldr	r2, [r6, #8]
 80a0838:	609a      	str	r2, [r3, #8]
}
 80a083a:	b00d      	add	sp, #52	; 0x34
 80a083c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0840:	20000000 	.word	0x20000000
 80a0844:	20000480 	.word	0x20000480

080a0848 <_Z10planarSpinv>:
{
 80a0848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  resetGrid();
 80a084c:	f7ff fe34 	bl	80a04b8 <_Z9resetGridv>
  xpos = xpos > 2 ? 0 : xpos + 1;
 80a0850:	4b3d      	ldr	r3, [pc, #244]	; (80a0948 <_Z10planarSpinv+0x100>)
  ypos = ypos > 2 ? 0 : ypos + 1;
 80a0852:	4f3e      	ldr	r7, [pc, #248]	; (80a094c <_Z10planarSpinv+0x104>)
  xpos = xpos > 2 ? 0 : xpos + 1;
 80a0854:	6819      	ldr	r1, [r3, #0]
 80a0856:	4698      	mov	r8, r3
 80a0858:	2902      	cmp	r1, #2
 80a085a:	bfcc      	ite	gt
 80a085c:	2100      	movgt	r1, #0
 80a085e:	3101      	addle	r1, #1
 80a0860:	6019      	str	r1, [r3, #0]
  ypos = ypos > 2 ? 0 : ypos + 1;
 80a0862:	683b      	ldr	r3, [r7, #0]
  drawLine(color, xpos, 0, 0, 3 - xpos, 3, 0);
 80a0864:	2503      	movs	r5, #3
  ypos = ypos > 2 ? 0 : ypos + 1;
 80a0866:	2b02      	cmp	r3, #2
 80a0868:	bfc8      	it	gt
 80a086a:	2300      	movgt	r3, #0
  drawLine(color, xpos, 0, 0, 3 - xpos, 3, 0);
 80a086c:	f04f 0400 	mov.w	r4, #0
  drawLine(color, xpos, 0, 1, 3 - xpos, 3, 1);
 80a0870:	f04f 0a01 	mov.w	sl, #1
  drawLine(color, xpos, 0, 2, 3 - xpos, 3, 2);
 80a0874:	f04f 0902 	mov.w	r9, #2
  ypos = ypos > 2 ? 0 : ypos + 1;
 80a0878:	bfd8      	it	le
 80a087a:	3301      	addle	r3, #1
  drawLine(color, xpos, 0, 0, 3 - xpos, 3, 0);
 80a087c:	4e34      	ldr	r6, [pc, #208]	; (80a0950 <_Z10planarSpinv+0x108>)
  ypos = ypos > 2 ? 0 : ypos + 1;
 80a087e:	603b      	str	r3, [r7, #0]
  drawLine(color, xpos, 0, 0, 3 - xpos, 3, 0);
 80a0880:	1a6b      	subs	r3, r5, r1
 80a0882:	4622      	mov	r2, r4
 80a0884:	6830      	ldr	r0, [r6, #0]
 80a0886:	9300      	str	r3, [sp, #0]
 80a0888:	e9cd 5401 	strd	r5, r4, [sp, #4]
 80a088c:	4623      	mov	r3, r4
 80a088e:	f7ff ff05 	bl	80a069c <_Z8drawLineiiiiiii>
  drawLine(color, xpos, 0, 1, 3 - xpos, 3, 1);
 80a0892:	f8d8 1000 	ldr.w	r1, [r8]
 80a0896:	4622      	mov	r2, r4
 80a0898:	1a6b      	subs	r3, r5, r1
 80a089a:	6830      	ldr	r0, [r6, #0]
 80a089c:	9300      	str	r3, [sp, #0]
 80a089e:	e9cd 5a01 	strd	r5, sl, [sp, #4]
 80a08a2:	4653      	mov	r3, sl
 80a08a4:	f7ff fefa 	bl	80a069c <_Z8drawLineiiiiiii>
  drawLine(color, xpos, 0, 2, 3 - xpos, 3, 2);
 80a08a8:	f8d8 1000 	ldr.w	r1, [r8]
 80a08ac:	4622      	mov	r2, r4
 80a08ae:	1a6b      	subs	r3, r5, r1
 80a08b0:	6830      	ldr	r0, [r6, #0]
 80a08b2:	9300      	str	r3, [sp, #0]
 80a08b4:	e9cd 5901 	strd	r5, r9, [sp, #4]
 80a08b8:	464b      	mov	r3, r9
 80a08ba:	f7ff feef 	bl	80a069c <_Z8drawLineiiiiiii>
  drawLine(color, xpos, 0, 3, 3 - xpos, 3, 3);
 80a08be:	f8d8 1000 	ldr.w	r1, [r8]
 80a08c2:	4622      	mov	r2, r4
 80a08c4:	1a6b      	subs	r3, r5, r1
 80a08c6:	6830      	ldr	r0, [r6, #0]
 80a08c8:	9300      	str	r3, [sp, #0]
 80a08ca:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80a08ce:	462b      	mov	r3, r5
 80a08d0:	f7ff fee4 	bl	80a069c <_Z8drawLineiiiiiii>
  drawLine(color, 3, ypos, 0, 0, 3 - ypos, 0);
 80a08d4:	683a      	ldr	r2, [r7, #0]
 80a08d6:	4629      	mov	r1, r5
 80a08d8:	1aab      	subs	r3, r5, r2
 80a08da:	e9cd 4300 	strd	r4, r3, [sp]
 80a08de:	6830      	ldr	r0, [r6, #0]
 80a08e0:	4623      	mov	r3, r4
 80a08e2:	9402      	str	r4, [sp, #8]
 80a08e4:	f7ff feda 	bl	80a069c <_Z8drawLineiiiiiii>
  drawLine(color, 3, ypos, 1, 0, 3 - ypos, 1);
 80a08e8:	683a      	ldr	r2, [r7, #0]
 80a08ea:	4629      	mov	r1, r5
 80a08ec:	1aab      	subs	r3, r5, r2
 80a08ee:	e9cd 4300 	strd	r4, r3, [sp]
 80a08f2:	6830      	ldr	r0, [r6, #0]
 80a08f4:	4653      	mov	r3, sl
 80a08f6:	f8cd a008 	str.w	sl, [sp, #8]
 80a08fa:	f7ff fecf 	bl	80a069c <_Z8drawLineiiiiiii>
  drawLine(color, 3, ypos, 2, 0, 3 - ypos, 2);
 80a08fe:	683a      	ldr	r2, [r7, #0]
 80a0900:	4629      	mov	r1, r5
 80a0902:	1aab      	subs	r3, r5, r2
 80a0904:	e9cd 4300 	strd	r4, r3, [sp]
 80a0908:	6830      	ldr	r0, [r6, #0]
 80a090a:	464b      	mov	r3, r9
 80a090c:	f8cd 9008 	str.w	r9, [sp, #8]
 80a0910:	f7ff fec4 	bl	80a069c <_Z8drawLineiiiiiii>
  drawLine(color, 3, ypos, 3, 0, 3 - ypos, 3);
 80a0914:	683a      	ldr	r2, [r7, #0]
 80a0916:	4629      	mov	r1, r5
 80a0918:	1aab      	subs	r3, r5, r2
 80a091a:	e9cd 4300 	strd	r4, r3, [sp]
 80a091e:	6830      	ldr	r0, [r6, #0]
 80a0920:	462b      	mov	r3, r5
 80a0922:	9502      	str	r5, [sp, #8]
 80a0924:	f7ff feba 	bl	80a069c <_Z8drawLineiiiiiii>
  if (planarSpinLoops > 12)
 80a0928:	4a0a      	ldr	r2, [pc, #40]	; (80a0954 <_Z10planarSpinv+0x10c>)
 80a092a:	6813      	ldr	r3, [r2, #0]
 80a092c:	2b0c      	cmp	r3, #12
 80a092e:	dd07      	ble.n	80a0940 <_Z10planarSpinv+0xf8>
    color = nextColor(color);
 80a0930:	6830      	ldr	r0, [r6, #0]
    planarSpinLoops = 0;
 80a0932:	6014      	str	r4, [r2, #0]
    color = nextColor(color);
 80a0934:	f000 fc10 	bl	80a1158 <_Z9nextColori>
 80a0938:	6030      	str	r0, [r6, #0]
}
 80a093a:	b004      	add	sp, #16
 80a093c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    planarSpinLoops++;
 80a0940:	3301      	adds	r3, #1
 80a0942:	6013      	str	r3, [r2, #0]
}
 80a0944:	e7f9      	b.n	80a093a <_Z10planarSpinv+0xf2>
 80a0946:	bf00      	nop
 80a0948:	20000a54 	.word	0x20000a54
 80a094c:	20000a58 	.word	0x20000a58
 80a0950:	20000a38 	.word	0x20000a38
 80a0954:	20000a50 	.word	0x20000a50

080a0958 <_Z12drawBoxWallsiiiiiii>:

void drawBoxWalls(int startx, int starty, int startz, int endx, int endy, int endz, int color)
{
 80a0958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (startx > endx)
 80a095c:	4298      	cmp	r0, r3
{
 80a095e:	b087      	sub	sp, #28
 80a0960:	e9cd 1004 	strd	r1, r0, [sp, #16]
 80a0964:	e9cd 3202 	strd	r3, r2, [sp, #8]
  if (startx > endx)
 80a0968:	dd03      	ble.n	80a0972 <_Z12drawBoxWallsiiiiiii+0x1a>
    swapint(startx, endx);
 80a096a:	a902      	add	r1, sp, #8
 80a096c:	a805      	add	r0, sp, #20
 80a096e:	f000 fc0d 	bl	80a118c <_Z7swapintRiS_>
  if (starty > endy)
 80a0972:	9a04      	ldr	r2, [sp, #16]
 80a0974:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a0976:	429a      	cmp	r2, r3
 80a0978:	dd03      	ble.n	80a0982 <_Z12drawBoxWallsiiiiiii+0x2a>
    swapint(starty, endy);
 80a097a:	a910      	add	r1, sp, #64	; 0x40
 80a097c:	a804      	add	r0, sp, #16
 80a097e:	f000 fc05 	bl	80a118c <_Z7swapintRiS_>
  if (startz > endz)
 80a0982:	9a03      	ldr	r2, [sp, #12]
 80a0984:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80a0986:	429a      	cmp	r2, r3
 80a0988:	dd03      	ble.n	80a0992 <_Z12drawBoxWallsiiiiiii+0x3a>
    swapint(startz, endz);
 80a098a:	a911      	add	r1, sp, #68	; 0x44
 80a098c:	a803      	add	r0, sp, #12
 80a098e:	f000 fbfd 	bl	80a118c <_Z7swapintRiS_>

  for (int i = startz; i <= endz; i++)
 80a0992:	2030      	movs	r0, #48	; 0x30
 80a0994:	230c      	movs	r3, #12
 80a0996:	26c0      	movs	r6, #192	; 0xc0
 80a0998:	f06f 052f 	mvn.w	r5, #47	; 0x2f
  {
    // draw y walls
    for (int j = starty; j <= endy; j++)
 80a099c:	f8dd c010 	ldr.w	ip, [sp, #16]
  for (int i = startz; i <= endz; i++)
 80a09a0:	9c03      	ldr	r4, [sp, #12]
 80a09a2:	fb00 f20c 	mul.w	r2, r0, ip
 80a09a6:	fb03 2204 	mla	r2, r3, r4, r2
    {
      grid[startx][j][i][0] = allColors[color][0];
 80a09aa:	9f05      	ldr	r7, [sp, #20]
 80a09ac:	492d      	ldr	r1, [pc, #180]	; (80a0a64 <_Z12drawBoxWallsiiiiiii+0x10c>)
 80a09ae:	fb06 2207 	mla	r2, r6, r7, r2
      grid[startx][j][i][1] = allColors[color][1];
      grid[startx][j][i][2] = allColors[color][2];

      grid[endx][j][i][0] = allColors[color][0];
 80a09b2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80a09b6:	440a      	add	r2, r1
 80a09b8:	eba8 0107 	sub.w	r1, r8, r7
 80a09bc:	434e      	muls	r6, r1
 80a09be:	fb05 f10c 	mul.w	r1, r5, ip
    for (int j = starty; j <= endy; j++)
 80a09c2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
  for (int i = startz; i <= endz; i++)
 80a09c6:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 80a09ca:	fb00 110e 	mla	r1, r0, lr, r1
      grid[startx][j][i][0] = allColors[color][0];
 80a09ce:	4826      	ldr	r0, [pc, #152]	; (80a0a68 <_Z12drawBoxWallsiiiiiii+0x110>)
 80a09d0:	9101      	str	r1, [sp, #4]
 80a09d2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80a09d4:	fb03 0301 	mla	r3, r3, r1, r0
  for (int i = startz; i <= endz; i++)
 80a09d8:	45a2      	cmp	sl, r4
 80a09da:	db3f      	blt.n	80a0a5c <_Z12drawBoxWallsiiiiiii+0x104>
 80a09dc:	4610      	mov	r0, r2
    for (int j = starty; j <= endy; j++)
 80a09de:	46e1      	mov	r9, ip
 80a09e0:	1991      	adds	r1, r2, r6
 80a09e2:	45ce      	cmp	lr, r9
 80a09e4:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80a09e8:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80a09ec:	da1e      	bge.n	80a0a2c <_Z12drawBoxWallsiiiiiii+0xd4>
 80a09ee:	4610      	mov	r0, r2
      grid[endx][j][i][1] = allColors[color][1];
      grid[endx][j][i][2] = allColors[color][2];
    }
    // draw x walls
    for (int j = startx; j <= endx; j++)
 80a09f0:	46b9      	mov	r9, r7
 80a09f2:	9901      	ldr	r1, [sp, #4]
 80a09f4:	1851      	adds	r1, r2, r1
 80a09f6:	45c8      	cmp	r8, r9
 80a09f8:	f100 00c0 	add.w	r0, r0, #192	; 0xc0
 80a09fc:	f101 01c0 	add.w	r1, r1, #192	; 0xc0
 80a0a00:	db29      	blt.n	80a0a56 <_Z12drawBoxWallsiiiiiii+0xfe>
    {
      grid[j][starty][i][0] = allColors[color][0];
      grid[j][starty][i][1] = allColors[color][1];
 80a0a02:	685d      	ldr	r5, [r3, #4]
      grid[j][starty][i][0] = allColors[color][0];
 80a0a04:	f8d3 b000 	ldr.w	fp, [r3]
      grid[j][starty][i][1] = allColors[color][1];
 80a0a08:	f840 5cbc 	str.w	r5, [r0, #-188]
      grid[j][starty][i][2] = allColors[color][2];
 80a0a0c:	689d      	ldr	r5, [r3, #8]
      grid[j][starty][i][0] = allColors[color][0];
 80a0a0e:	f840 bcc0 	str.w	fp, [r0, #-192]
      grid[j][starty][i][2] = allColors[color][2];
 80a0a12:	f840 5cb8 	str.w	r5, [r0, #-184]

      grid[j][endy][i][0] = allColors[color][0];
      grid[j][endy][i][1] = allColors[color][1];
 80a0a16:	685d      	ldr	r5, [r3, #4]
      grid[j][endy][i][0] = allColors[color][0];
 80a0a18:	f841 bcc0 	str.w	fp, [r1, #-192]
      grid[j][endy][i][1] = allColors[color][1];
 80a0a1c:	f841 5cbc 	str.w	r5, [r1, #-188]
      grid[j][endy][i][2] = allColors[color][2];
 80a0a20:	689d      	ldr	r5, [r3, #8]
    for (int j = startx; j <= endx; j++)
 80a0a22:	f109 0901 	add.w	r9, r9, #1
      grid[j][endy][i][2] = allColors[color][2];
 80a0a26:	f841 5cb8 	str.w	r5, [r1, #-184]
    for (int j = startx; j <= endx; j++)
 80a0a2a:	e7e4      	b.n	80a09f6 <_Z12drawBoxWallsiiiiiii+0x9e>
      grid[startx][j][i][1] = allColors[color][1];
 80a0a2c:	685d      	ldr	r5, [r3, #4]
      grid[startx][j][i][0] = allColors[color][0];
 80a0a2e:	f8d3 b000 	ldr.w	fp, [r3]
      grid[startx][j][i][1] = allColors[color][1];
 80a0a32:	f840 5c2c 	str.w	r5, [r0, #-44]
      grid[startx][j][i][2] = allColors[color][2];
 80a0a36:	689d      	ldr	r5, [r3, #8]
      grid[startx][j][i][0] = allColors[color][0];
 80a0a38:	f840 bc30 	str.w	fp, [r0, #-48]
      grid[startx][j][i][2] = allColors[color][2];
 80a0a3c:	f840 5c28 	str.w	r5, [r0, #-40]
      grid[endx][j][i][1] = allColors[color][1];
 80a0a40:	685d      	ldr	r5, [r3, #4]
      grid[endx][j][i][0] = allColors[color][0];
 80a0a42:	f841 bc30 	str.w	fp, [r1, #-48]
      grid[endx][j][i][1] = allColors[color][1];
 80a0a46:	f841 5c2c 	str.w	r5, [r1, #-44]
      grid[endx][j][i][2] = allColors[color][2];
 80a0a4a:	689d      	ldr	r5, [r3, #8]
    for (int j = starty; j <= endy; j++)
 80a0a4c:	f109 0901 	add.w	r9, r9, #1
      grid[endx][j][i][2] = allColors[color][2];
 80a0a50:	f841 5c28 	str.w	r5, [r1, #-40]
    for (int j = starty; j <= endy; j++)
 80a0a54:	e7c5      	b.n	80a09e2 <_Z12drawBoxWallsiiiiiii+0x8a>
  for (int i = startz; i <= endz; i++)
 80a0a56:	3401      	adds	r4, #1
 80a0a58:	320c      	adds	r2, #12
 80a0a5a:	e7bd      	b.n	80a09d8 <_Z12drawBoxWallsiiiiiii+0x80>
    }
  }
}
 80a0a5c:	b007      	add	sp, #28
 80a0a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0a62:	bf00      	nop
 80a0a64:	20000480 	.word	0x20000480
 80a0a68:	20000000 	.word	0x20000000

080a0a6c <_Z8fountainv>:
  loopTime = 50;
 80a0a6c:	2232      	movs	r2, #50	; 0x32
{
 80a0a6e:	b5f0      	push	{r4, r5, r6, r7, lr}
  loopTime = 50;
 80a0a70:	4b19      	ldr	r3, [pc, #100]	; (80a0ad8 <_Z8fountainv+0x6c>)
 80a0a72:	4c1a      	ldr	r4, [pc, #104]	; (80a0adc <_Z8fountainv+0x70>)
 80a0a74:	4f1a      	ldr	r7, [pc, #104]	; (80a0ae0 <_Z8fountainv+0x74>)
  if (fountainUp)
 80a0a76:	4d1b      	ldr	r5, [pc, #108]	; (80a0ae4 <_Z8fountainv+0x78>)
  loopTime = 50;
 80a0a78:	601a      	str	r2, [r3, #0]
  if (fountainUp)
 80a0a7a:	782e      	ldrb	r6, [r5, #0]
 80a0a7c:	6822      	ldr	r2, [r4, #0]
 80a0a7e:	683b      	ldr	r3, [r7, #0]
{
 80a0a80:	b085      	sub	sp, #20
    drawBoxWalls(1, 1, fountainZ, 2, 2, fountainZ, color);
 80a0a82:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (fountainUp)
 80a0a86:	b19e      	cbz	r6, 80a0ab0 <_Z8fountainv+0x44>
    drawBoxWalls(1, 1, fountainZ, 2, 2, fountainZ, color);
 80a0a88:	2302      	movs	r3, #2
 80a0a8a:	2101      	movs	r1, #1
 80a0a8c:	9300      	str	r3, [sp, #0]
 80a0a8e:	4608      	mov	r0, r1
 80a0a90:	f7ff ff62 	bl	80a0958 <_Z12drawBoxWallsiiiiiii>
    fountainZ++;
 80a0a94:	6823      	ldr	r3, [r4, #0]
 80a0a96:	3301      	adds	r3, #1
    if (fountainZ > 3)
 80a0a98:	2b03      	cmp	r3, #3
 80a0a9a:	dc01      	bgt.n	80a0aa0 <_Z8fountainv+0x34>
    fountainZ--;
 80a0a9c:	6023      	str	r3, [r4, #0]
 80a0a9e:	e005      	b.n	80a0aac <_Z8fountainv+0x40>
      fountainZ = 3;
 80a0aa0:	2303      	movs	r3, #3
 80a0aa2:	6023      	str	r3, [r4, #0]
      fountainUp = !fountainUp;
 80a0aa4:	782b      	ldrb	r3, [r5, #0]
 80a0aa6:	f083 0301 	eor.w	r3, r3, #1
 80a0aaa:	702b      	strb	r3, [r5, #0]
}
 80a0aac:	b005      	add	sp, #20
 80a0aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    drawBoxWalls(0, 0, fountainZ, 3, 3, fountainZ, color);
 80a0ab0:	2303      	movs	r3, #3
 80a0ab2:	4631      	mov	r1, r6
 80a0ab4:	9300      	str	r3, [sp, #0]
 80a0ab6:	4630      	mov	r0, r6
 80a0ab8:	f7ff ff4e 	bl	80a0958 <_Z12drawBoxWallsiiiiiii>
    fountainZ--;
 80a0abc:	6823      	ldr	r3, [r4, #0]
    if (fountainZ < 0)
 80a0abe:	3b01      	subs	r3, #1
 80a0ac0:	d5ec      	bpl.n	80a0a9c <_Z8fountainv+0x30>
      fountainUp = !fountainUp;
 80a0ac2:	782b      	ldrb	r3, [r5, #0]
      color = nextColor(color);
 80a0ac4:	6838      	ldr	r0, [r7, #0]
      fountainUp = !fountainUp;
 80a0ac6:	f083 0301 	eor.w	r3, r3, #1
      fountainZ = 0;
 80a0aca:	6026      	str	r6, [r4, #0]
      fountainUp = !fountainUp;
 80a0acc:	702b      	strb	r3, [r5, #0]
      color = nextColor(color);
 80a0ace:	f000 fb43 	bl	80a1158 <_Z9nextColori>
 80a0ad2:	6038      	str	r0, [r7, #0]
}
 80a0ad4:	e7ea      	b.n	80a0aac <_Z8fountainv+0x40>
 80a0ad6:	bf00      	nop
 80a0ad8:	20000780 	.word	0x20000780
 80a0adc:	20000a3c 	.word	0x20000a3c
 80a0ae0:	20000a38 	.word	0x20000a38
 80a0ae4:	2000027d 	.word	0x2000027d

080a0ae8 <_Z6tunnelv>:
  loopTime = 50;
 80a0ae8:	2232      	movs	r2, #50	; 0x32
{
 80a0aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  loopTime = 50;
 80a0aee:	4b94      	ldr	r3, [pc, #592]	; (80a0d40 <_Z6tunnelv+0x258>)
{
 80a0af0:	b094      	sub	sp, #80	; 0x50
  int color1[] = {0, 0, 0, 0, 2, 2, 2, 2};
 80a0af2:	4c94      	ldr	r4, [pc, #592]	; (80a0d44 <_Z6tunnelv+0x25c>)
 80a0af4:	ad04      	add	r5, sp, #16
  loopTime = 50;
 80a0af6:	601a      	str	r2, [r3, #0]
  int color1[] = {0, 0, 0, 0, 2, 2, 2, 2};
 80a0af8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a0afa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a0afc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  int color2[] = {2, 2, 2, 2, 0, 0, 0, 0};
 80a0b00:	3410      	adds	r4, #16
  int color1[] = {0, 0, 0, 0, 2, 2, 2, 2};
 80a0b02:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  int color2[] = {2, 2, 2, 2, 0, 0, 0, 0};
 80a0b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a0b08:	ad0c      	add	r5, sp, #48	; 0x30
 80a0b0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a0b0c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  drawBoxWalls(1, 1, 0, 2, 2, 0, color1[tunnelIndex[0]]);
 80a0b10:	2402      	movs	r4, #2
  int color2[] = {2, 2, 2, 2, 0, 0, 0, 0};
 80a0b12:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  drawBoxWalls(1, 1, 0, 2, 2, 0, color1[tunnelIndex[0]]);
 80a0b16:	2500      	movs	r5, #0
 80a0b18:	2101      	movs	r1, #1
 80a0b1a:	4f8b      	ldr	r7, [pc, #556]	; (80a0d48 <_Z6tunnelv+0x260>)
 80a0b1c:	aa14      	add	r2, sp, #80	; 0x50
 80a0b1e:	683b      	ldr	r3, [r7, #0]
 80a0b20:	4608      	mov	r0, r1
 80a0b22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a0b26:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80a0b2a:	462a      	mov	r2, r5
 80a0b2c:	9302      	str	r3, [sp, #8]
 80a0b2e:	e9cd 4500 	strd	r4, r5, [sp]
 80a0b32:	4623      	mov	r3, r4
 80a0b34:	f7ff ff10 	bl	80a0958 <_Z12drawBoxWallsiiiiiii>
  drawBoxWalls(1, 1, 0, 2, 2, 0, color1[tunnelIndex[0]]);
 80a0b38:	2101      	movs	r1, #1
 80a0b3a:	683b      	ldr	r3, [r7, #0]
 80a0b3c:	aa14      	add	r2, sp, #80	; 0x50
 80a0b3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a0b42:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80a0b46:	4608      	mov	r0, r1
 80a0b48:	462a      	mov	r2, r5
 80a0b4a:	e9cd 5301 	strd	r5, r3, [sp, #4]
 80a0b4e:	9400      	str	r4, [sp, #0]
 80a0b50:	4623      	mov	r3, r4
 80a0b52:	f7ff ff01 	bl	80a0958 <_Z12drawBoxWallsiiiiiii>
  drawBoxWalls(1, 1, 0, 2, 2, 0, color2[tunnelIndex[0]]);
 80a0b56:	2101      	movs	r1, #1
  drawBoxWalls(1, 1, 1, 2, 2, 1, color1[tunnelIndex[1]]);
 80a0b58:	f04f 0801 	mov.w	r8, #1
  drawBoxWalls(1, 1, 0, 2, 2, 0, color2[tunnelIndex[0]]);
 80a0b5c:	683b      	ldr	r3, [r7, #0]
 80a0b5e:	aa14      	add	r2, sp, #80	; 0x50
 80a0b60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  drawBoxWalls(1, 1, 3, 2, 2, 3, color1[tunnelIndex[3]]);
 80a0b64:	2603      	movs	r6, #3
  drawBoxWalls(1, 1, 0, 2, 2, 0, color2[tunnelIndex[0]]);
 80a0b66:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80a0b6a:	4608      	mov	r0, r1
 80a0b6c:	462a      	mov	r2, r5
 80a0b6e:	e9cd 5301 	strd	r5, r3, [sp, #4]
 80a0b72:	9400      	str	r4, [sp, #0]
 80a0b74:	4623      	mov	r3, r4
 80a0b76:	f7ff feef 	bl	80a0958 <_Z12drawBoxWallsiiiiiii>
  drawBoxWalls(1, 1, 1, 2, 2, 1, color1[tunnelIndex[1]]);
 80a0b7a:	687b      	ldr	r3, [r7, #4]
 80a0b7c:	aa14      	add	r2, sp, #80	; 0x50
 80a0b7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a0b82:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80a0b86:	4642      	mov	r2, r8
 80a0b88:	4641      	mov	r1, r8
 80a0b8a:	4640      	mov	r0, r8
 80a0b8c:	9302      	str	r3, [sp, #8]
 80a0b8e:	e9cd 4800 	strd	r4, r8, [sp]
 80a0b92:	4623      	mov	r3, r4
 80a0b94:	f7ff fee0 	bl	80a0958 <_Z12drawBoxWallsiiiiiii>
  drawBoxWalls(1, 1, 1, 2, 2, 1, color2[tunnelIndex[1]]);
 80a0b98:	687b      	ldr	r3, [r7, #4]
 80a0b9a:	aa14      	add	r2, sp, #80	; 0x50
 80a0b9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a0ba0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80a0ba4:	4642      	mov	r2, r8
 80a0ba6:	4641      	mov	r1, r8
 80a0ba8:	4640      	mov	r0, r8
 80a0baa:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0bae:	9400      	str	r4, [sp, #0]
 80a0bb0:	4623      	mov	r3, r4
 80a0bb2:	f7ff fed1 	bl	80a0958 <_Z12drawBoxWallsiiiiiii>
  drawBoxWalls(1, 1, 2, 2, 2, 2, color1[tunnelIndex[2]]);
 80a0bb6:	68bb      	ldr	r3, [r7, #8]
 80a0bb8:	aa14      	add	r2, sp, #80	; 0x50
 80a0bba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a0bbe:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80a0bc2:	4622      	mov	r2, r4
 80a0bc4:	4641      	mov	r1, r8
 80a0bc6:	4640      	mov	r0, r8
 80a0bc8:	e9cd 4301 	strd	r4, r3, [sp, #4]
 80a0bcc:	9400      	str	r4, [sp, #0]
 80a0bce:	4623      	mov	r3, r4
 80a0bd0:	f7ff fec2 	bl	80a0958 <_Z12drawBoxWallsiiiiiii>
  drawBoxWalls(1, 1, 2, 2, 2, 2, color2[tunnelIndex[2]]);
 80a0bd4:	68bb      	ldr	r3, [r7, #8]
 80a0bd6:	aa14      	add	r2, sp, #80	; 0x50
 80a0bd8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a0bdc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80a0be0:	4622      	mov	r2, r4
 80a0be2:	4641      	mov	r1, r8
 80a0be4:	4640      	mov	r0, r8
 80a0be6:	e9cd 4301 	strd	r4, r3, [sp, #4]
 80a0bea:	9400      	str	r4, [sp, #0]
 80a0bec:	4623      	mov	r3, r4
 80a0bee:	f7ff feb3 	bl	80a0958 <_Z12drawBoxWallsiiiiiii>
  drawBoxWalls(1, 1, 3, 2, 2, 3, color1[tunnelIndex[3]]);
 80a0bf2:	68fb      	ldr	r3, [r7, #12]
 80a0bf4:	aa14      	add	r2, sp, #80	; 0x50
 80a0bf6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a0bfa:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80a0bfe:	4632      	mov	r2, r6
 80a0c00:	4641      	mov	r1, r8
 80a0c02:	4640      	mov	r0, r8
 80a0c04:	9302      	str	r3, [sp, #8]
 80a0c06:	e9cd 4600 	strd	r4, r6, [sp]
 80a0c0a:	4623      	mov	r3, r4
 80a0c0c:	f7ff fea4 	bl	80a0958 <_Z12drawBoxWallsiiiiiii>
  drawBoxWalls(1, 1, 3, 2, 2, 3, color2[tunnelIndex[3]]);
 80a0c10:	68fb      	ldr	r3, [r7, #12]
 80a0c12:	aa14      	add	r2, sp, #80	; 0x50
 80a0c14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a0c18:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80a0c1c:	4632      	mov	r2, r6
 80a0c1e:	4641      	mov	r1, r8
 80a0c20:	4640      	mov	r0, r8
 80a0c22:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80a0c26:	9400      	str	r4, [sp, #0]
 80a0c28:	4623      	mov	r3, r4
 80a0c2a:	f7ff fe95 	bl	80a0958 <_Z12drawBoxWallsiiiiiii>
  drawBoxWalls(0, 0, 3, 3, 3, 3, color1[tunnelIndex[4]]);
 80a0c2e:	693b      	ldr	r3, [r7, #16]
 80a0c30:	aa14      	add	r2, sp, #80	; 0x50
 80a0c32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a0c36:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80a0c3a:	4632      	mov	r2, r6
 80a0c3c:	4629      	mov	r1, r5
 80a0c3e:	4628      	mov	r0, r5
 80a0c40:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80a0c44:	9600      	str	r6, [sp, #0]
 80a0c46:	4633      	mov	r3, r6
 80a0c48:	f7ff fe86 	bl	80a0958 <_Z12drawBoxWallsiiiiiii>
  drawBoxWalls(0, 0, 3, 3, 3, 3, color2[tunnelIndex[4]]);
 80a0c4c:	693b      	ldr	r3, [r7, #16]
 80a0c4e:	aa14      	add	r2, sp, #80	; 0x50
 80a0c50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a0c54:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80a0c58:	4632      	mov	r2, r6
 80a0c5a:	4629      	mov	r1, r5
 80a0c5c:	4628      	mov	r0, r5
 80a0c5e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80a0c62:	9600      	str	r6, [sp, #0]
 80a0c64:	4633      	mov	r3, r6
 80a0c66:	f7ff fe77 	bl	80a0958 <_Z12drawBoxWallsiiiiiii>
  drawBoxWalls(0, 0, 2, 3, 3, 2, color1[tunnelIndex[5]]);
 80a0c6a:	697b      	ldr	r3, [r7, #20]
 80a0c6c:	aa14      	add	r2, sp, #80	; 0x50
 80a0c6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a0c72:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80a0c76:	4622      	mov	r2, r4
 80a0c78:	4629      	mov	r1, r5
 80a0c7a:	4628      	mov	r0, r5
 80a0c7c:	e9cd 4301 	strd	r4, r3, [sp, #4]
 80a0c80:	9600      	str	r6, [sp, #0]
 80a0c82:	4633      	mov	r3, r6
 80a0c84:	f7ff fe68 	bl	80a0958 <_Z12drawBoxWallsiiiiiii>
  drawBoxWalls(0, 0, 2, 3, 3, 2, color2[tunnelIndex[5]]);
 80a0c88:	697b      	ldr	r3, [r7, #20]
 80a0c8a:	aa14      	add	r2, sp, #80	; 0x50
 80a0c8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a0c90:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80a0c94:	4622      	mov	r2, r4
 80a0c96:	4629      	mov	r1, r5
 80a0c98:	4628      	mov	r0, r5
 80a0c9a:	e9cd 4301 	strd	r4, r3, [sp, #4]
 80a0c9e:	9600      	str	r6, [sp, #0]
 80a0ca0:	4633      	mov	r3, r6
 80a0ca2:	f7ff fe59 	bl	80a0958 <_Z12drawBoxWallsiiiiiii>
  drawBoxWalls(0, 0, 1, 3, 3, 1, color1[tunnelIndex[6]]);
 80a0ca6:	69bb      	ldr	r3, [r7, #24]
 80a0ca8:	aa14      	add	r2, sp, #80	; 0x50
 80a0caa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a0cae:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80a0cb2:	4642      	mov	r2, r8
 80a0cb4:	4629      	mov	r1, r5
 80a0cb6:	4628      	mov	r0, r5
 80a0cb8:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0cbc:	9600      	str	r6, [sp, #0]
 80a0cbe:	4633      	mov	r3, r6
 80a0cc0:	f7ff fe4a 	bl	80a0958 <_Z12drawBoxWallsiiiiiii>
  drawBoxWalls(0, 0, 1, 3, 3, 1, color2[tunnelIndex[6]]);
 80a0cc4:	69bb      	ldr	r3, [r7, #24]
 80a0cc6:	aa14      	add	r2, sp, #80	; 0x50
 80a0cc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a0ccc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80a0cd0:	4642      	mov	r2, r8
 80a0cd2:	4629      	mov	r1, r5
 80a0cd4:	4628      	mov	r0, r5
 80a0cd6:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a0cda:	9600      	str	r6, [sp, #0]
 80a0cdc:	4633      	mov	r3, r6
 80a0cde:	f7ff fe3b 	bl	80a0958 <_Z12drawBoxWallsiiiiiii>
  drawBoxWalls(0, 0, 0, 3, 3, 0, color1[tunnelIndex[7]]);
 80a0ce2:	69fb      	ldr	r3, [r7, #28]
 80a0ce4:	aa14      	add	r2, sp, #80	; 0x50
 80a0ce6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a0cea:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80a0cee:	462a      	mov	r2, r5
 80a0cf0:	4629      	mov	r1, r5
 80a0cf2:	4628      	mov	r0, r5
 80a0cf4:	e9cd 5301 	strd	r5, r3, [sp, #4]
 80a0cf8:	9600      	str	r6, [sp, #0]
 80a0cfa:	4633      	mov	r3, r6
 80a0cfc:	f7ff fe2c 	bl	80a0958 <_Z12drawBoxWallsiiiiiii>
  drawBoxWalls(0, 0, 0, 3, 3, 0, color2[tunnelIndex[7]]);
 80a0d00:	69fb      	ldr	r3, [r7, #28]
 80a0d02:	aa14      	add	r2, sp, #80	; 0x50
 80a0d04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a0d08:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80a0d0c:	462a      	mov	r2, r5
 80a0d0e:	e9cd 5301 	strd	r5, r3, [sp, #4]
 80a0d12:	4629      	mov	r1, r5
 80a0d14:	4633      	mov	r3, r6
 80a0d16:	4628      	mov	r0, r5
 80a0d18:	9600      	str	r6, [sp, #0]
 80a0d1a:	f7ff fe1d 	bl	80a0958 <_Z12drawBoxWallsiiiiiii>
 80a0d1e:	2208      	movs	r2, #8
    tunnelIndex[i] = (tunnelIndex[i] + 1) % 8;
 80a0d20:	683b      	ldr	r3, [r7, #0]
 80a0d22:	3301      	adds	r3, #1
 80a0d24:	4259      	negs	r1, r3
 80a0d26:	f001 0107 	and.w	r1, r1, #7
 80a0d2a:	f003 0307 	and.w	r3, r3, #7
 80a0d2e:	bf58      	it	pl
 80a0d30:	424b      	negpl	r3, r1
  for (int i = 0; i < 8; i++)
 80a0d32:	3a01      	subs	r2, #1
    tunnelIndex[i] = (tunnelIndex[i] + 1) % 8;
 80a0d34:	f847 3b04 	str.w	r3, [r7], #4
  for (int i = 0; i < 8; i++)
 80a0d38:	d1f2      	bne.n	80a0d20 <_Z6tunnelv+0x238>
}
 80a0d3a:	b014      	add	sp, #80	; 0x50
 80a0d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0d40:	20000780 	.word	0x20000780
 80a0d44:	080a21dc 	.word	0x080a21dc
 80a0d48:	200009ac 	.word	0x200009ac

080a0d4c <_Z7countUp6String>:

int countUp(String cmd)
{
 80a0d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0d50:	f8df 8144 	ldr.w	r8, [pc, #324]	; 80a0e98 <_Z7countUp6String+0x14c>
  if (color < 3)
 80a0d54:	4f4d      	ldr	r7, [pc, #308]	; (80a0e8c <_Z7countUp6String+0x140>)
 80a0d56:	f8df c13c 	ldr.w	ip, [pc, #316]	; 80a0e94 <_Z7countUp6String+0x148>
 80a0d5a:	f8df e140 	ldr.w	lr, [pc, #320]	; 80a0e9c <_Z7countUp6String+0x150>
 80a0d5e:	f8d8 1000 	ldr.w	r1, [r8]
 80a0d62:	683d      	ldr	r5, [r7, #0]
 80a0d64:	f8dc 2000 	ldr.w	r2, [ip]
{
 80a0d68:	b085      	sub	sp, #20
 80a0d6a:	f1c1 0303 	rsb	r3, r1, #3
 80a0d6e:	f8de 4000 	ldr.w	r4, [lr]
 80a0d72:	9301      	str	r3, [sp, #4]
  if (color < 3)
 80a0d74:	2d02      	cmp	r5, #2
 80a0d76:	f1c2 0303 	rsb	r3, r2, #3
 80a0d7a:	9302      	str	r3, [sp, #8]
 80a0d7c:	4844      	ldr	r0, [pc, #272]	; (80a0e90 <_Z7countUp6String+0x144>)
 80a0d7e:	f04f 030c 	mov.w	r3, #12
 80a0d82:	f1c4 0a03 	rsb	sl, r4, #3
 80a0d86:	dc32      	bgt.n	80a0dee <_Z7countUp6String+0xa2>
  {
    grid[xpos][ypos][zpos][0] = primaryColors[color][0];
 80a0d88:	fb03 f605 	mul.w	r6, r3, r5
 80a0d8c:	f8df c110 	ldr.w	ip, [pc, #272]	; 80a0ea0 <_Z7countUp6String+0x154>
 80a0d90:	435a      	muls	r2, r3
 80a0d92:	f85c e006 	ldr.w	lr, [ip, r6]
 80a0d96:	eb0c 0806 	add.w	r8, ip, r6
 80a0d9a:	2630      	movs	r6, #48	; 0x30
 80a0d9c:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
 80a0da0:	4371      	muls	r1, r6
 80a0da2:	fb0c f404 	mul.w	r4, ip, r4
 80a0da6:	eb02 0901 	add.w	r9, r2, r1
    grid[xpos][ypos][zpos][1] = primaryColors[color][1];
 80a0daa:	4422      	add	r2, r4
 80a0dac:	4411      	add	r1, r2
    grid[xpos][ypos][zpos][2] = primaryColors[color][2];
    grid[3 - xpos][3 - ypos][3 - zpos][0] = primaryColors[color][0];
 80a0dae:	9a02      	ldr	r2, [sp, #8]
 80a0db0:	fb0c fc0a 	mul.w	ip, ip, sl
 80a0db4:	4353      	muls	r3, r2
 80a0db6:	9a01      	ldr	r2, [sp, #4]
    grid[xpos][ypos][zpos][0] = primaryColors[color][0];
 80a0db8:	44a1      	add	r9, r4
    grid[3 - xpos][3 - ypos][3 - zpos][0] = primaryColors[color][0];
 80a0dba:	4356      	muls	r6, r2
    grid[xpos][ypos][zpos][0] = primaryColors[color][0];
 80a0dbc:	f840 e009 	str.w	lr, [r0, r9]
    grid[xpos][ypos][zpos][2] = primaryColors[color][2];
 80a0dc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
    grid[xpos][ypos][zpos][1] = primaryColors[color][1];
 80a0dc4:	f8d8 9004 	ldr.w	r9, [r8, #4]
    grid[3 - xpos][3 - ypos][3 - zpos][0] = primaryColors[color][0];
 80a0dc8:	199a      	adds	r2, r3, r6
    grid[3 - xpos][3 - ypos][3 - zpos][1] = primaryColors[color][1];
 80a0dca:	4463      	add	r3, ip
    grid[xpos][ypos][zpos][1] = primaryColors[color][1];
 80a0dcc:	4401      	add	r1, r0
    grid[3 - xpos][3 - ypos][3 - zpos][0] = primaryColors[color][0];
 80a0dce:	4462      	add	r2, ip
    grid[3 - xpos][3 - ypos][3 - zpos][1] = primaryColors[color][1];
 80a0dd0:	4433      	add	r3, r6
    grid[xpos][ypos][zpos][1] = primaryColors[color][1];
 80a0dd2:	f8c1 9004 	str.w	r9, [r1, #4]
    grid[xpos][ypos][zpos][2] = primaryColors[color][2];
 80a0dd6:	608c      	str	r4, [r1, #8]
    grid[3 - xpos][3 - ypos][3 - zpos][0] = primaryColors[color][0];
 80a0dd8:	f840 e002 	str.w	lr, [r0, r2]
    grid[3 - xpos][3 - ypos][3 - zpos][1] = primaryColors[color][1];
 80a0ddc:	4418      	add	r0, r3
    grid[3 - xpos][3 - ypos][3 - zpos][2] = primaryColors[color][2];
 80a0dde:	e9c0 9401 	strd	r9, r4, [r0, #4]
    color++;
 80a0de2:	3501      	adds	r5, #1
 80a0de4:	603d      	str	r5, [r7, #0]
      zpos = 0;
      ypos++;
    }
  }
  return 1;
}
 80a0de6:	2001      	movs	r0, #1
 80a0de8:	b005      	add	sp, #20
 80a0dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    color = 0;
 80a0dee:	2600      	movs	r6, #0
 80a0df0:	603e      	str	r6, [r7, #0]
    grid[xpos][ypos][zpos][0] = 4;
 80a0df2:	2730      	movs	r7, #48	; 0x30
 80a0df4:	f04f 0bc0 	mov.w	fp, #192	; 0xc0
 80a0df8:	fb03 f502 	mul.w	r5, r3, r2
 80a0dfc:	434f      	muls	r7, r1
 80a0dfe:	eb05 0907 	add.w	r9, r5, r7
 80a0e02:	9703      	str	r7, [sp, #12]
 80a0e04:	2704      	movs	r7, #4
 80a0e06:	fb0b fb04 	mul.w	fp, fp, r4
 80a0e0a:	44d9      	add	r9, fp
 80a0e0c:	f840 7009 	str.w	r7, [r0, r9]
    grid[xpos][ypos][zpos][1] = 4;
 80a0e10:	eb05 090b 	add.w	r9, r5, fp
 80a0e14:	9d03      	ldr	r5, [sp, #12]
    grid[3 - xpos][3 - ypos][3 - zpos][0] = 4;
 80a0e16:	f04f 0bc0 	mov.w	fp, #192	; 0xc0
    grid[xpos][ypos][zpos][1] = 4;
 80a0e1a:	444d      	add	r5, r9
 80a0e1c:	4405      	add	r5, r0
    grid[xpos][ypos][zpos][2] = 4;
 80a0e1e:	e9c5 7701 	strd	r7, r7, [r5, #4]
    grid[3 - xpos][3 - ypos][3 - zpos][0] = 4;
 80a0e22:	9d02      	ldr	r5, [sp, #8]
 80a0e24:	fb0b fa0a 	mul.w	sl, fp, sl
 80a0e28:	436b      	muls	r3, r5
 80a0e2a:	9302      	str	r3, [sp, #8]
 80a0e2c:	2330      	movs	r3, #48	; 0x30
 80a0e2e:	9d01      	ldr	r5, [sp, #4]
    zpos++;
 80a0e30:	3201      	adds	r2, #1
    grid[3 - xpos][3 - ypos][3 - zpos][0] = 4;
 80a0e32:	435d      	muls	r5, r3
 80a0e34:	9b02      	ldr	r3, [sp, #8]
    if (zpos > 3 && ypos >= 3 && xpos >= 3)
 80a0e36:	2a03      	cmp	r2, #3
    grid[3 - xpos][3 - ypos][3 - zpos][0] = 4;
 80a0e38:	eb03 0905 	add.w	r9, r3, r5
    grid[3 - xpos][3 - ypos][3 - zpos][1] = 4;
 80a0e3c:	4453      	add	r3, sl
    grid[3 - xpos][3 - ypos][3 - zpos][0] = 4;
 80a0e3e:	44d1      	add	r9, sl
    grid[3 - xpos][3 - ypos][3 - zpos][1] = 4;
 80a0e40:	442b      	add	r3, r5
    grid[3 - xpos][3 - ypos][3 - zpos][0] = 4;
 80a0e42:	f840 7009 	str.w	r7, [r0, r9]
    grid[3 - xpos][3 - ypos][3 - zpos][1] = 4;
 80a0e46:	4418      	add	r0, r3
    grid[3 - xpos][3 - ypos][3 - zpos][2] = 4;
 80a0e48:	e9c0 7701 	strd	r7, r7, [r0, #4]
    zpos++;
 80a0e4c:	f8cc 2000 	str.w	r2, [ip]
    if (zpos > 3 && ypos >= 3 && xpos >= 3)
 80a0e50:	ddc9      	ble.n	80a0de6 <_Z7countUp6String+0x9a>
 80a0e52:	2902      	cmp	r1, #2
 80a0e54:	dd12      	ble.n	80a0e7c <_Z7countUp6String+0x130>
 80a0e56:	2c02      	cmp	r4, #2
 80a0e58:	dd06      	ble.n	80a0e68 <_Z7countUp6String+0x11c>
      xpos = 0;
 80a0e5a:	f8ce 6000 	str.w	r6, [lr]
      ypos = 0;
 80a0e5e:	f8c8 6000 	str.w	r6, [r8]
      zpos = 0;
 80a0e62:	f8cc 6000 	str.w	r6, [ip]
 80a0e66:	e7be      	b.n	80a0de6 <_Z7countUp6String+0x9a>
    else if (zpos > 3 && ypos > 3)
 80a0e68:	2903      	cmp	r1, #3
 80a0e6a:	dd07      	ble.n	80a0e7c <_Z7countUp6String+0x130>
      xpos++;
 80a0e6c:	3401      	adds	r4, #1
      ypos = 0;
 80a0e6e:	f8c8 6000 	str.w	r6, [r8]
      zpos = 0;
 80a0e72:	f8cc 6000 	str.w	r6, [ip]
      xpos++;
 80a0e76:	f8ce 4000 	str.w	r4, [lr]
 80a0e7a:	e7b4      	b.n	80a0de6 <_Z7countUp6String+0x9a>
      zpos = 0;
 80a0e7c:	2200      	movs	r2, #0
 80a0e7e:	4b05      	ldr	r3, [pc, #20]	; (80a0e94 <_Z7countUp6String+0x148>)
      ypos++;
 80a0e80:	3101      	adds	r1, #1
      zpos = 0;
 80a0e82:	601a      	str	r2, [r3, #0]
      ypos++;
 80a0e84:	4b04      	ldr	r3, [pc, #16]	; (80a0e98 <_Z7countUp6String+0x14c>)
 80a0e86:	6019      	str	r1, [r3, #0]
 80a0e88:	e7ad      	b.n	80a0de6 <_Z7countUp6String+0x9a>
 80a0e8a:	bf00      	nop
 80a0e8c:	20000a38 	.word	0x20000a38
 80a0e90:	20000480 	.word	0x20000480
 80a0e94:	20000a5c 	.word	0x20000a5c
 80a0e98:	20000a58 	.word	0x20000a58
 80a0e9c:	20000a54 	.word	0x20000a54
 80a0ea0:	20000788 	.word	0x20000788

080a0ea4 <_Z19setCurrentAnimationv>:
{
 80a0ea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  loopTime = 200;
 80a0ea6:	22c8      	movs	r2, #200	; 0xc8
 80a0ea8:	4b2e      	ldr	r3, [pc, #184]	; (80a0f64 <_Z19setCurrentAnimationv+0xc0>)
 80a0eaa:	601a      	str	r2, [r3, #0]
  microDelay = 50;
 80a0eac:	2232      	movs	r2, #50	; 0x32
 80a0eae:	4b2e      	ldr	r3, [pc, #184]	; (80a0f68 <_Z19setCurrentAnimationv+0xc4>)
 80a0eb0:	601a      	str	r2, [r3, #0]
  animationChange = 60000;
 80a0eb2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80a0eb6:	4b2d      	ldr	r3, [pc, #180]	; (80a0f6c <_Z19setCurrentAnimationv+0xc8>)
 80a0eb8:	601a      	str	r2, [r3, #0]
  switch (currentAnimation)
 80a0eba:	4b2d      	ldr	r3, [pc, #180]	; (80a0f70 <_Z19setCurrentAnimationv+0xcc>)
 80a0ebc:	781b      	ldrb	r3, [r3, #0]
 80a0ebe:	2b0a      	cmp	r3, #10
 80a0ec0:	d814      	bhi.n	80a0eec <_Z19setCurrentAnimationv+0x48>
 80a0ec2:	e8df f003 	tbb	[pc, r3]
 80a0ec6:	061e      	.short	0x061e
 80a0ec8:	29163941 	.word	0x29163941
 80a0ecc:	11492131 	.word	0x11492131
 80a0ed0:	4c          	.byte	0x4c
 80a0ed1:	00          	.byte	0x00
    countUp("");
 80a0ed2:	4668      	mov	r0, sp
 80a0ed4:	4927      	ldr	r1, [pc, #156]	; (80a0f74 <_Z19setCurrentAnimationv+0xd0>)
 80a0ed6:	f000 fd16 	bl	80a1906 <_ZN6StringC1EPKc>
 80a0eda:	4668      	mov	r0, sp
 80a0edc:	f7ff ff36 	bl	80a0d4c <_Z7countUp6String>
    crazyFollowColors("");
 80a0ee0:	4668      	mov	r0, sp
 80a0ee2:	f000 fcc6 	bl	80a1872 <_ZN6StringD1Ev>
    break;
 80a0ee6:	e001      	b.n	80a0eec <_Z19setCurrentAnimationv+0x48>
    planarSpin();
 80a0ee8:	f7ff fcae 	bl	80a0848 <_Z10planarSpinv>
}
 80a0eec:	b005      	add	sp, #20
 80a0eee:	f85d fb04 	ldr.w	pc, [sp], #4
    drawWholeCube("");
 80a0ef2:	4668      	mov	r0, sp
 80a0ef4:	491f      	ldr	r1, [pc, #124]	; (80a0f74 <_Z19setCurrentAnimationv+0xd0>)
 80a0ef6:	f000 fd06 	bl	80a1906 <_ZN6StringC1EPKc>
 80a0efa:	4668      	mov	r0, sp
 80a0efc:	f7ff fa6c 	bl	80a03d8 <_Z13drawWholeCube6String>
 80a0f00:	e7ee      	b.n	80a0ee0 <_Z19setCurrentAnimationv+0x3c>
    chaseTheDot();
 80a0f02:	f7ff fb55 	bl	80a05b0 <_Z11chaseTheDotv>
    break;
 80a0f06:	e7f1      	b.n	80a0eec <_Z19setCurrentAnimationv+0x48>
    drawZRow("");
 80a0f08:	4668      	mov	r0, sp
 80a0f0a:	491a      	ldr	r1, [pc, #104]	; (80a0f74 <_Z19setCurrentAnimationv+0xd0>)
 80a0f0c:	f000 fcfb 	bl	80a1906 <_ZN6StringC1EPKc>
 80a0f10:	4668      	mov	r0, sp
 80a0f12:	f7ff fa05 	bl	80a0320 <_Z8drawZRow6String>
 80a0f16:	e7e3      	b.n	80a0ee0 <_Z19setCurrentAnimationv+0x3c>
    drawXRow("");
 80a0f18:	4668      	mov	r0, sp
 80a0f1a:	4916      	ldr	r1, [pc, #88]	; (80a0f74 <_Z19setCurrentAnimationv+0xd0>)
 80a0f1c:	f000 fcf3 	bl	80a1906 <_ZN6StringC1EPKc>
 80a0f20:	4668      	mov	r0, sp
 80a0f22:	f7ff f955 	bl	80a01d0 <_Z8drawXRow6String>
 80a0f26:	e7db      	b.n	80a0ee0 <_Z19setCurrentAnimationv+0x3c>
    drawYRow("");
 80a0f28:	4668      	mov	r0, sp
 80a0f2a:	4912      	ldr	r1, [pc, #72]	; (80a0f74 <_Z19setCurrentAnimationv+0xd0>)
 80a0f2c:	f000 fceb 	bl	80a1906 <_ZN6StringC1EPKc>
 80a0f30:	4668      	mov	r0, sp
 80a0f32:	f7ff f9a1 	bl	80a0278 <_Z8drawYRow6String>
 80a0f36:	e7d3      	b.n	80a0ee0 <_Z19setCurrentAnimationv+0x3c>
    drawWalls("");
 80a0f38:	4668      	mov	r0, sp
 80a0f3a:	490e      	ldr	r1, [pc, #56]	; (80a0f74 <_Z19setCurrentAnimationv+0xd0>)
 80a0f3c:	f000 fce3 	bl	80a1906 <_ZN6StringC1EPKc>
 80a0f40:	4668      	mov	r0, sp
 80a0f42:	f7ff f907 	bl	80a0154 <_Z9drawWalls6String>
 80a0f46:	e7cb      	b.n	80a0ee0 <_Z19setCurrentAnimationv+0x3c>
    crazyFollowColors("");
 80a0f48:	4668      	mov	r0, sp
 80a0f4a:	490a      	ldr	r1, [pc, #40]	; (80a0f74 <_Z19setCurrentAnimationv+0xd0>)
 80a0f4c:	f000 fcdb 	bl	80a1906 <_ZN6StringC1EPKc>
 80a0f50:	4668      	mov	r0, sp
 80a0f52:	f7ff fa6f 	bl	80a0434 <_Z17crazyFollowColors6String>
 80a0f56:	e7c3      	b.n	80a0ee0 <_Z19setCurrentAnimationv+0x3c>
    fountain();
 80a0f58:	f7ff fd88 	bl	80a0a6c <_Z8fountainv>
    break;
 80a0f5c:	e7c6      	b.n	80a0eec <_Z19setCurrentAnimationv+0x48>
    tunnel();
 80a0f5e:	f7ff fdc3 	bl	80a0ae8 <_Z6tunnelv>
}
 80a0f62:	e7c3      	b.n	80a0eec <_Z19setCurrentAnimationv+0x48>
 80a0f64:	20000780 	.word	0x20000780
 80a0f68:	20000784 	.word	0x20000784
 80a0f6c:	20000078 	.word	0x20000078
 80a0f70:	2000027c 	.word	0x2000027c
 80a0f74:	080a21be 	.word	0x080a21be

080a0f78 <_Z10reset_pinsii>:
  digitalWrite(high_pin, HIGH);
  digitalWrite(low_pin, LOW);
}

void reset_pins(int low_pin, int high_pin)
{
 80a0f78:	b538      	push	{r3, r4, r5, lr}
 80a0f7a:	460c      	mov	r4, r1
  pinMode(low_pin, INPUT);
 80a0f7c:	b285      	uxth	r5, r0
 80a0f7e:	4628      	mov	r0, r5
  pinMode(high_pin, INPUT);
 80a0f80:	b2a4      	uxth	r4, r4
  pinMode(low_pin, INPUT);
 80a0f82:	2100      	movs	r1, #0
 80a0f84:	f000 ff9e 	bl	80a1ec4 <pinMode>
  pinMode(high_pin, INPUT);
 80a0f88:	4620      	mov	r0, r4
 80a0f8a:	2100      	movs	r1, #0
 80a0f8c:	f000 ff9a 	bl	80a1ec4 <pinMode>

  digitalWrite(low_pin, LOW);
 80a0f90:	4628      	mov	r0, r5
 80a0f92:	2100      	movs	r1, #0
 80a0f94:	f000 ffa7 	bl	80a1ee6 <digitalWrite>
  digitalWrite(high_pin, LOW);
 80a0f98:	4620      	mov	r0, r4
}
 80a0f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  digitalWrite(high_pin, LOW);
 80a0f9e:	2100      	movs	r1, #0
 80a0fa0:	f000 bfa1 	b.w	80a1ee6 <digitalWrite>

080a0fa4 <_Z8resetLediiii>:
  switch (color)
 80a0fa4:	0080      	lsls	r0, r0, #2
 80a0fa6:	b11b      	cbz	r3, 80a0fb0 <_Z8resetLediiii+0xc>
 80a0fa8:	2b01      	cmp	r3, #1
 80a0faa:	d00c      	beq.n	80a0fc6 <_Z8resetLediiii+0x22>
    pin2 = blue[x][y][z][1];
 80a0fac:	4b07      	ldr	r3, [pc, #28]	; (80a0fcc <_Z8resetLediiii+0x28>)
 80a0fae:	e000      	b.n	80a0fb2 <_Z8resetLediiii+0xe>
    pin2 = red[x][y][z][1];
 80a0fb0:	4b07      	ldr	r3, [pc, #28]	; (80a0fd0 <_Z8resetLediiii+0x2c>)
    pin2 = blue[x][y][z][1];
 80a0fb2:	4408      	add	r0, r1
 80a0fb4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80a0fb8:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    reset_pins(pin1, pin2);
 80a0fbc:	6849      	ldr	r1, [r1, #4]
 80a0fbe:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80a0fc2:	f7ff bfd9 	b.w	80a0f78 <_Z10reset_pinsii>
    pin2 = green[x][y][z][1];
 80a0fc6:	4b03      	ldr	r3, [pc, #12]	; (80a0fd4 <_Z8resetLediiii+0x30>)
 80a0fc8:	e7f3      	b.n	80a0fb2 <_Z8resetLediiii+0xe>
 80a0fca:	bf00      	nop
 80a0fcc:	2000007c 	.word	0x2000007c
 80a0fd0:	200007ac 	.word	0x200007ac
 80a0fd4:	20000280 	.word	0x20000280

080a0fd8 <_Z8set_pinsii>:
{
 80a0fd8:	b538      	push	{r3, r4, r5, lr}
 80a0fda:	460d      	mov	r5, r1
 80a0fdc:	4604      	mov	r4, r0
  pinMode(high_pin, OUTPUT);
 80a0fde:	b2ad      	uxth	r5, r5
  reset_pins(low_pin, high_pin);
 80a0fe0:	f7ff ffca 	bl	80a0f78 <_Z10reset_pinsii>
  pinMode(low_pin, OUTPUT);
 80a0fe4:	b2a4      	uxth	r4, r4
  pinMode(high_pin, OUTPUT);
 80a0fe6:	4628      	mov	r0, r5
 80a0fe8:	2101      	movs	r1, #1
 80a0fea:	f000 ff6b 	bl	80a1ec4 <pinMode>
  pinMode(low_pin, OUTPUT);
 80a0fee:	4620      	mov	r0, r4
 80a0ff0:	2101      	movs	r1, #1
 80a0ff2:	f000 ff67 	bl	80a1ec4 <pinMode>
  digitalWrite(high_pin, HIGH);
 80a0ff6:	4628      	mov	r0, r5
 80a0ff8:	2101      	movs	r1, #1
 80a0ffa:	f000 ff74 	bl	80a1ee6 <digitalWrite>
  digitalWrite(low_pin, LOW);
 80a0ffe:	4620      	mov	r0, r4
}
 80a1000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  digitalWrite(low_pin, LOW);
 80a1004:	2100      	movs	r1, #0
 80a1006:	f000 bf6e 	b.w	80a1ee6 <digitalWrite>
	...

080a100c <_Z7drawLediiii>:
  switch (color)
 80a100c:	2b01      	cmp	r3, #1
{
 80a100e:	b570      	push	{r4, r5, r6, lr}
 80a1010:	ea4f 0080 	mov.w	r0, r0, lsl #2
  switch (color)
 80a1014:	d00f      	beq.n	80a1036 <_Z7drawLediiii+0x2a>
 80a1016:	2b02      	cmp	r3, #2
 80a1018:	d017      	beq.n	80a104a <_Z7drawLediiii+0x3e>
 80a101a:	4e1a      	ldr	r6, [pc, #104]	; (80a1084 <_Z7drawLediiii+0x78>)
    pin2 = red[x][y][z][1];
 80a101c:	4408      	add	r0, r1
  switch (color)
 80a101e:	b9b3      	cbnz	r3, 80a104e <_Z7drawLediiii+0x42>
    pin2 = red[x][y][z][1];
 80a1020:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80a1024:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
    set_pins(pin1, pin2);
 80a1028:	6859      	ldr	r1, [r3, #4]
 80a102a:	f856 0032 	ldr.w	r0, [r6, r2, lsl #3]
}
 80a102e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    set_pins(pin1, pin2);
 80a1032:	f7ff bfd1 	b.w	80a0fd8 <_Z8set_pinsii>
    pin2 = green[x][y][z][1];
 80a1036:	4b14      	ldr	r3, [pc, #80]	; (80a1088 <_Z7drawLediiii+0x7c>)
 80a1038:	4408      	add	r0, r1
 80a103a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80a103e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    set_pins(pin1, pin2);
 80a1042:	6849      	ldr	r1, [r1, #4]
 80a1044:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80a1048:	e7f1      	b.n	80a102e <_Z7drawLediiii+0x22>
    pin2 = blue[x][y][z][1];
 80a104a:	4b10      	ldr	r3, [pc, #64]	; (80a108c <_Z7drawLediiii+0x80>)
 80a104c:	e7f4      	b.n	80a1038 <_Z7drawLediiii+0x2c>
    pin2 = red[x][y][z][1];
 80a104e:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 80a1052:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
    reset_pins(pin1, pin2);
 80a1056:	6859      	ldr	r1, [r3, #4]
 80a1058:	f856 0034 	ldr.w	r0, [r6, r4, lsl #3]
 80a105c:	f7ff ff8c 	bl	80a0f78 <_Z10reset_pinsii>
    pin2 = green[x][y][z][1];
 80a1060:	4b09      	ldr	r3, [pc, #36]	; (80a1088 <_Z7drawLediiii+0x7c>)
    pin2 = red[x][y][z][1];
 80a1062:	00e5      	lsls	r5, r4, #3
    pin2 = green[x][y][z][1];
 80a1064:	195a      	adds	r2, r3, r5
    reset_pins(pin1, pin2);
 80a1066:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 80a106a:	6851      	ldr	r1, [r2, #4]
 80a106c:	f7ff ff84 	bl	80a0f78 <_Z10reset_pinsii>
    pin2 = blue[x][y][z][1];
 80a1070:	4b06      	ldr	r3, [pc, #24]	; (80a108c <_Z7drawLediiii+0x80>)
 80a1072:	441d      	add	r5, r3
    reset_pins(pin1, pin2);
 80a1074:	6869      	ldr	r1, [r5, #4]
 80a1076:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
}
 80a107a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    reset_pins(pin1, pin2);
 80a107e:	f7ff bf7b 	b.w	80a0f78 <_Z10reset_pinsii>
 80a1082:	bf00      	nop
 80a1084:	200007ac 	.word	0x200007ac
 80a1088:	20000280 	.word	0x20000280
 80a108c:	2000007c 	.word	0x2000007c

080a1090 <_Z11rgbMainLoopv>:
{
 80a1090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (int x = 0; x < 4; x++)
 80a1094:	2400      	movs	r4, #0
 80a1096:	4f19      	ldr	r7, [pc, #100]	; (80a10fc <_Z11rgbMainLoopv+0x6c>)
 80a1098:	2600      	movs	r6, #0
    for (int y = 0; y < 4; y++)
 80a109a:	4635      	mov	r5, r6
      for (int z = 0; z < 4; z++)
 80a109c:	f04f 0b00 	mov.w	fp, #0
 80a10a0:	eb06 0807 	add.w	r8, r6, r7
 80a10a4:	46c2      	mov	sl, r8
 80a10a6:	f04f 0903 	mov.w	r9, #3
          drawLed(x, y, z, grid[x][y][z][currentColor]);
 80a10aa:	465a      	mov	r2, fp
 80a10ac:	4629      	mov	r1, r5
 80a10ae:	f8da 3000 	ldr.w	r3, [sl]
 80a10b2:	4620      	mov	r0, r4
 80a10b4:	f7ff ffaa 	bl	80a100c <_Z7drawLediiii>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a10b8:	4b11      	ldr	r3, [pc, #68]	; (80a1100 <_Z11rgbMainLoopv+0x70>)
 80a10ba:	6818      	ldr	r0, [r3, #0]
 80a10bc:	f000 f88a 	bl	80a11d4 <HAL_Delay_Microseconds>
          resetLed(x, y, z, grid[x][y][z][currentColor]);
 80a10c0:	465a      	mov	r2, fp
 80a10c2:	4629      	mov	r1, r5
 80a10c4:	4620      	mov	r0, r4
 80a10c6:	f85a 3b04 	ldr.w	r3, [sl], #4
 80a10ca:	f7ff ff6b 	bl	80a0fa4 <_Z8resetLediiii>
        for (int currentColor = 0; currentColor < 3; currentColor++)
 80a10ce:	f1b9 0901 	subs.w	r9, r9, #1
 80a10d2:	d1ea      	bne.n	80a10aa <_Z11rgbMainLoopv+0x1a>
      for (int z = 0; z < 4; z++)
 80a10d4:	f10b 0b01 	add.w	fp, fp, #1
 80a10d8:	f1bb 0f04 	cmp.w	fp, #4
 80a10dc:	f108 080c 	add.w	r8, r8, #12
 80a10e0:	d1e0      	bne.n	80a10a4 <_Z11rgbMainLoopv+0x14>
    for (int y = 0; y < 4; y++)
 80a10e2:	3501      	adds	r5, #1
 80a10e4:	2d04      	cmp	r5, #4
 80a10e6:	f106 0630 	add.w	r6, r6, #48	; 0x30
 80a10ea:	d1d7      	bne.n	80a109c <_Z11rgbMainLoopv+0xc>
  for (int x = 0; x < 4; x++)
 80a10ec:	3401      	adds	r4, #1
 80a10ee:	2c04      	cmp	r4, #4
 80a10f0:	f107 07c0 	add.w	r7, r7, #192	; 0xc0
 80a10f4:	d1d0      	bne.n	80a1098 <_Z11rgbMainLoopv+0x8>
}
 80a10f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a10fa:	bf00      	nop
 80a10fc:	20000480 	.word	0x20000480
 80a1100:	20000784 	.word	0x20000784

080a1104 <_Z20setupAndRunTimedLoopv>:
{
 80a1104:	b570      	push	{r4, r5, r6, lr}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a1106:	f000 f86d 	bl	80a11e4 <HAL_Timer_Get_Milli_Seconds>
  now = millis();
 80a110a:	4c09      	ldr	r4, [pc, #36]	; (80a1130 <_Z20setupAndRunTimedLoopv+0x2c>)
  while ((now - lastLoopTime) <= loopTime)
 80a110c:	4d09      	ldr	r5, [pc, #36]	; (80a1134 <_Z20setupAndRunTimedLoopv+0x30>)
 80a110e:	4e0a      	ldr	r6, [pc, #40]	; (80a1138 <_Z20setupAndRunTimedLoopv+0x34>)
  now = millis();
 80a1110:	6020      	str	r0, [r4, #0]
  while ((now - lastLoopTime) <= loopTime)
 80a1112:	6822      	ldr	r2, [r4, #0]
 80a1114:	682b      	ldr	r3, [r5, #0]
 80a1116:	6831      	ldr	r1, [r6, #0]
 80a1118:	1ad3      	subs	r3, r2, r3
 80a111a:	428b      	cmp	r3, r1
 80a111c:	d805      	bhi.n	80a112a <_Z20setupAndRunTimedLoopv+0x26>
    rgbMainLoop();
 80a111e:	f7ff ffb7 	bl	80a1090 <_Z11rgbMainLoopv>
 80a1122:	f000 f85f 	bl	80a11e4 <HAL_Timer_Get_Milli_Seconds>
    now = millis();
 80a1126:	6020      	str	r0, [r4, #0]
  while ((now - lastLoopTime) <= loopTime)
 80a1128:	e7f3      	b.n	80a1112 <_Z20setupAndRunTimedLoopv+0xe>
  lastLoopTime = now;
 80a112a:	602a      	str	r2, [r5, #0]
}
 80a112c:	bd70      	pop	{r4, r5, r6, pc}
 80a112e:	bf00      	nop
 80a1130:	20000a4c 	.word	0x20000a4c
 80a1134:	20000a48 	.word	0x20000a48
 80a1138:	20000780 	.word	0x20000780

080a113c <loop>:
{
 80a113c:	b508      	push	{r3, lr}
  if (!haltAnimation)
 80a113e:	4b05      	ldr	r3, [pc, #20]	; (80a1154 <loop+0x18>)
 80a1140:	781b      	ldrb	r3, [r3, #0]
 80a1142:	b90b      	cbnz	r3, 80a1148 <loop+0xc>
    setCurrentAnimation();
 80a1144:	f7ff feae 	bl	80a0ea4 <_Z19setCurrentAnimationv>
  checkAnimationChange();
 80a1148:	f7ff f9d2 	bl	80a04f0 <_Z20checkAnimationChangev>
}
 80a114c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  setupAndRunTimedLoop();
 80a1150:	f7ff bfd8 	b.w	80a1104 <_Z20setupAndRunTimedLoopv>
 80a1154:	20000a40 	.word	0x20000a40

080a1158 <_Z9nextColori>:
int nextColor(int color) { return (color + 1) % 10; }
 80a1158:	220a      	movs	r2, #10
 80a115a:	1c43      	adds	r3, r0, #1
 80a115c:	fb93 f0f2 	sdiv	r0, r3, r2
 80a1160:	fb02 3010 	mls	r0, r2, r0, r3
 80a1164:	4770      	bx	lr

080a1166 <_Z16nextPrimaryColori>:
int nextPrimaryColor(int color) { return (color + 1) % 3; }
 80a1166:	2303      	movs	r3, #3
 80a1168:	3001      	adds	r0, #1
 80a116a:	fb90 f3f3 	sdiv	r3, r0, r3
 80a116e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a1172:	1ac0      	subs	r0, r0, r3
 80a1174:	4770      	bx	lr

080a1176 <_Z12roundClosestii>:

int roundClosest(int numerator, int denominator)
{
    numerator = (numerator << 1) / denominator;
 80a1176:	0040      	lsls	r0, r0, #1
 80a1178:	fb90 f1f1 	sdiv	r1, r0, r1
    int output = (numerator >> 1) + (numerator % 2);
 80a117c:	f001 0001 	and.w	r0, r1, #1
 80a1180:	2900      	cmp	r1, #0
 80a1182:	bfb8      	it	lt
 80a1184:	4240      	neglt	r0, r0
    return output;
}
 80a1186:	eb00 0061 	add.w	r0, r0, r1, asr #1
 80a118a:	4770      	bx	lr

080a118c <_Z7swapintRiS_>:

void swapint(int &one, int &two)
{
    one = one ^ two;
 80a118c:	680a      	ldr	r2, [r1, #0]
 80a118e:	6803      	ldr	r3, [r0, #0]
 80a1190:	4053      	eors	r3, r2
 80a1192:	6003      	str	r3, [r0, #0]
    two = one ^ two;
 80a1194:	680a      	ldr	r2, [r1, #0]
 80a1196:	4053      	eors	r3, r2
 80a1198:	600b      	str	r3, [r1, #0]
    one = one ^ two;
 80a119a:	6802      	ldr	r2, [r0, #0]
 80a119c:	4053      	eors	r3, r2
 80a119e:	6003      	str	r3, [r0, #0]
 80a11a0:	4770      	bx	lr
	...

080a11a4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a11a4:	b508      	push	{r3, lr}
 80a11a6:	4b02      	ldr	r3, [pc, #8]	; (80a11b0 <os_mutex_recursive_create+0xc>)
 80a11a8:	681b      	ldr	r3, [r3, #0]
 80a11aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a11ac:	9301      	str	r3, [sp, #4]
 80a11ae:	bd08      	pop	{r3, pc}
 80a11b0:	080601d0 	.word	0x080601d0

080a11b4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a11b4:	b508      	push	{r3, lr}
 80a11b6:	4b02      	ldr	r3, [pc, #8]	; (80a11c0 <os_mutex_recursive_destroy+0xc>)
 80a11b8:	681b      	ldr	r3, [r3, #0]
 80a11ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a11bc:	9301      	str	r3, [sp, #4]
 80a11be:	bd08      	pop	{r3, pc}
 80a11c0:	080601d0 	.word	0x080601d0

080a11c4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a11c4:	b508      	push	{r3, lr}
 80a11c6:	4b02      	ldr	r3, [pc, #8]	; (80a11d0 <HAL_RNG_GetRandomNumber+0xc>)
 80a11c8:	681b      	ldr	r3, [r3, #0]
 80a11ca:	685b      	ldr	r3, [r3, #4]
 80a11cc:	9301      	str	r3, [sp, #4]
 80a11ce:	bd08      	pop	{r3, pc}
 80a11d0:	0806019c 	.word	0x0806019c

080a11d4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a11d4:	b508      	push	{r3, lr}
 80a11d6:	4b02      	ldr	r3, [pc, #8]	; (80a11e0 <HAL_Delay_Microseconds+0xc>)
 80a11d8:	681b      	ldr	r3, [r3, #0]
 80a11da:	68db      	ldr	r3, [r3, #12]
 80a11dc:	9301      	str	r3, [sp, #4]
 80a11de:	bd08      	pop	{r3, pc}
 80a11e0:	0806019c 	.word	0x0806019c

080a11e4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a11e4:	b508      	push	{r3, lr}
 80a11e6:	4b02      	ldr	r3, [pc, #8]	; (80a11f0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a11e8:	681b      	ldr	r3, [r3, #0]
 80a11ea:	695b      	ldr	r3, [r3, #20]
 80a11ec:	9301      	str	r3, [sp, #4]
 80a11ee:	bd08      	pop	{r3, pc}
 80a11f0:	0806019c 	.word	0x0806019c

080a11f4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a11f4:	b508      	push	{r3, lr}
 80a11f6:	4b02      	ldr	r3, [pc, #8]	; (80a1200 <HAL_Pin_Mode+0xc>)
 80a11f8:	681b      	ldr	r3, [r3, #0]
 80a11fa:	689b      	ldr	r3, [r3, #8]
 80a11fc:	9301      	str	r3, [sp, #4]
 80a11fe:	bd08      	pop	{r3, pc}
 80a1200:	080601b0 	.word	0x080601b0

080a1204 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1204:	b508      	push	{r3, lr}
 80a1206:	4b02      	ldr	r3, [pc, #8]	; (80a1210 <HAL_Get_Pin_Mode+0xc>)
 80a1208:	681b      	ldr	r3, [r3, #0]
 80a120a:	68db      	ldr	r3, [r3, #12]
 80a120c:	9301      	str	r3, [sp, #4]
 80a120e:	bd08      	pop	{r3, pc}
 80a1210:	080601b0 	.word	0x080601b0

080a1214 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1214:	b508      	push	{r3, lr}
 80a1216:	4b02      	ldr	r3, [pc, #8]	; (80a1220 <HAL_GPIO_Write+0xc>)
 80a1218:	681b      	ldr	r3, [r3, #0]
 80a121a:	691b      	ldr	r3, [r3, #16]
 80a121c:	9301      	str	r3, [sp, #4]
 80a121e:	bd08      	pop	{r3, pc}
 80a1220:	080601b0 	.word	0x080601b0

080a1224 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a1224:	b508      	push	{r3, lr}
 80a1226:	4b02      	ldr	r3, [pc, #8]	; (80a1230 <hal_i2c_write+0xc>)
 80a1228:	681b      	ldr	r3, [r3, #0]
 80a122a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a122c:	9301      	str	r3, [sp, #4]
 80a122e:	bd08      	pop	{r3, pc}
 80a1230:	080601ac 	.word	0x080601ac

080a1234 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a1234:	b508      	push	{r3, lr}
 80a1236:	4b02      	ldr	r3, [pc, #8]	; (80a1240 <hal_i2c_available+0xc>)
 80a1238:	681b      	ldr	r3, [r3, #0]
 80a123a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a123c:	9301      	str	r3, [sp, #4]
 80a123e:	bd08      	pop	{r3, pc}
 80a1240:	080601ac 	.word	0x080601ac

080a1244 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a1244:	b508      	push	{r3, lr}
 80a1246:	4b02      	ldr	r3, [pc, #8]	; (80a1250 <hal_i2c_read+0xc>)
 80a1248:	681b      	ldr	r3, [r3, #0]
 80a124a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a124c:	9301      	str	r3, [sp, #4]
 80a124e:	bd08      	pop	{r3, pc}
 80a1250:	080601ac 	.word	0x080601ac

080a1254 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a1254:	b508      	push	{r3, lr}
 80a1256:	4b02      	ldr	r3, [pc, #8]	; (80a1260 <hal_i2c_peek+0xc>)
 80a1258:	681b      	ldr	r3, [r3, #0]
 80a125a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a125c:	9301      	str	r3, [sp, #4]
 80a125e:	bd08      	pop	{r3, pc}
 80a1260:	080601ac 	.word	0x080601ac

080a1264 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a1264:	b508      	push	{r3, lr}
 80a1266:	4b02      	ldr	r3, [pc, #8]	; (80a1270 <hal_i2c_flush+0xc>)
 80a1268:	681b      	ldr	r3, [r3, #0]
 80a126a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a126c:	9301      	str	r3, [sp, #4]
 80a126e:	bd08      	pop	{r3, pc}
 80a1270:	080601ac 	.word	0x080601ac

080a1274 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a1274:	b508      	push	{r3, lr}
 80a1276:	4b02      	ldr	r3, [pc, #8]	; (80a1280 <hal_i2c_is_enabled+0xc>)
 80a1278:	681b      	ldr	r3, [r3, #0]
 80a127a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a127c:	9301      	str	r3, [sp, #4]
 80a127e:	bd08      	pop	{r3, pc}
 80a1280:	080601ac 	.word	0x080601ac

080a1284 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a1284:	b508      	push	{r3, lr}
 80a1286:	4b03      	ldr	r3, [pc, #12]	; (80a1294 <hal_i2c_init+0x10>)
 80a1288:	681b      	ldr	r3, [r3, #0]
 80a128a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a128e:	9301      	str	r3, [sp, #4]
 80a1290:	bd08      	pop	{r3, pc}
 80a1292:	0000      	.short	0x0000
 80a1294:	080601ac 	.word	0x080601ac

080a1298 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a1298:	b508      	push	{r3, lr}
 80a129a:	4b02      	ldr	r3, [pc, #8]	; (80a12a4 <hal_spi_init+0xc>)
 80a129c:	681b      	ldr	r3, [r3, #0]
 80a129e:	69db      	ldr	r3, [r3, #28]
 80a12a0:	9301      	str	r3, [sp, #4]
 80a12a2:	bd08      	pop	{r3, pc}
 80a12a4:	080601b4 	.word	0x080601b4

080a12a8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a12a8:	b508      	push	{r3, lr}
 80a12aa:	4b02      	ldr	r3, [pc, #8]	; (80a12b4 <hal_spi_is_enabled+0xc>)
 80a12ac:	681b      	ldr	r3, [r3, #0]
 80a12ae:	6a1b      	ldr	r3, [r3, #32]
 80a12b0:	9301      	str	r3, [sp, #4]
 80a12b2:	bd08      	pop	{r3, pc}
 80a12b4:	080601b4 	.word	0x080601b4

080a12b8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a12b8:	b508      	push	{r3, lr}
 80a12ba:	4b02      	ldr	r3, [pc, #8]	; (80a12c4 <hal_usart_init+0xc>)
 80a12bc:	681b      	ldr	r3, [r3, #0]
 80a12be:	699b      	ldr	r3, [r3, #24]
 80a12c0:	9301      	str	r3, [sp, #4]
 80a12c2:	bd08      	pop	{r3, pc}
 80a12c4:	080601c4 	.word	0x080601c4

080a12c8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a12c8:	b508      	push	{r3, lr}
 80a12ca:	4b02      	ldr	r3, [pc, #8]	; (80a12d4 <hal_usart_write+0xc>)
 80a12cc:	681b      	ldr	r3, [r3, #0]
 80a12ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a12d0:	9301      	str	r3, [sp, #4]
 80a12d2:	bd08      	pop	{r3, pc}
 80a12d4:	080601c4 	.word	0x080601c4

080a12d8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a12d8:	b508      	push	{r3, lr}
 80a12da:	4b02      	ldr	r3, [pc, #8]	; (80a12e4 <hal_usart_available+0xc>)
 80a12dc:	681b      	ldr	r3, [r3, #0]
 80a12de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a12e0:	9301      	str	r3, [sp, #4]
 80a12e2:	bd08      	pop	{r3, pc}
 80a12e4:	080601c4 	.word	0x080601c4

080a12e8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a12e8:	b508      	push	{r3, lr}
 80a12ea:	4b02      	ldr	r3, [pc, #8]	; (80a12f4 <hal_usart_read+0xc>)
 80a12ec:	681b      	ldr	r3, [r3, #0]
 80a12ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a12f0:	9301      	str	r3, [sp, #4]
 80a12f2:	bd08      	pop	{r3, pc}
 80a12f4:	080601c4 	.word	0x080601c4

080a12f8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a12f8:	b508      	push	{r3, lr}
 80a12fa:	4b02      	ldr	r3, [pc, #8]	; (80a1304 <hal_usart_peek+0xc>)
 80a12fc:	681b      	ldr	r3, [r3, #0]
 80a12fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1300:	9301      	str	r3, [sp, #4]
 80a1302:	bd08      	pop	{r3, pc}
 80a1304:	080601c4 	.word	0x080601c4

080a1308 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a1308:	b508      	push	{r3, lr}
 80a130a:	4b02      	ldr	r3, [pc, #8]	; (80a1314 <hal_usart_flush+0xc>)
 80a130c:	681b      	ldr	r3, [r3, #0]
 80a130e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1310:	9301      	str	r3, [sp, #4]
 80a1312:	bd08      	pop	{r3, pc}
 80a1314:	080601c4 	.word	0x080601c4

080a1318 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a1318:	b508      	push	{r3, lr}
 80a131a:	4b02      	ldr	r3, [pc, #8]	; (80a1324 <hal_usart_is_enabled+0xc>)
 80a131c:	681b      	ldr	r3, [r3, #0]
 80a131e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1320:	9301      	str	r3, [sp, #4]
 80a1322:	bd08      	pop	{r3, pc}
 80a1324:	080601c4 	.word	0x080601c4

080a1328 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a1328:	b508      	push	{r3, lr}
 80a132a:	4b02      	ldr	r3, [pc, #8]	; (80a1334 <hal_usart_available_data_for_write+0xc>)
 80a132c:	681b      	ldr	r3, [r3, #0]
 80a132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1330:	9301      	str	r3, [sp, #4]
 80a1332:	bd08      	pop	{r3, pc}
 80a1334:	080601c4 	.word	0x080601c4

080a1338 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1338:	b508      	push	{r3, lr}
 80a133a:	4b02      	ldr	r3, [pc, #8]	; (80a1344 <HAL_USB_USART_Init+0xc>)
 80a133c:	681b      	ldr	r3, [r3, #0]
 80a133e:	681b      	ldr	r3, [r3, #0]
 80a1340:	9301      	str	r3, [sp, #4]
 80a1342:	bd08      	pop	{r3, pc}
 80a1344:	080601d8 	.word	0x080601d8

080a1348 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1348:	b508      	push	{r3, lr}
 80a134a:	4b02      	ldr	r3, [pc, #8]	; (80a1354 <HAL_USB_USART_Available_Data+0xc>)
 80a134c:	681b      	ldr	r3, [r3, #0]
 80a134e:	691b      	ldr	r3, [r3, #16]
 80a1350:	9301      	str	r3, [sp, #4]
 80a1352:	bd08      	pop	{r3, pc}
 80a1354:	080601d8 	.word	0x080601d8

080a1358 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1358:	b508      	push	{r3, lr}
 80a135a:	4b02      	ldr	r3, [pc, #8]	; (80a1364 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a135c:	681b      	ldr	r3, [r3, #0]
 80a135e:	695b      	ldr	r3, [r3, #20]
 80a1360:	9301      	str	r3, [sp, #4]
 80a1362:	bd08      	pop	{r3, pc}
 80a1364:	080601d8 	.word	0x080601d8

080a1368 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1368:	b508      	push	{r3, lr}
 80a136a:	4b02      	ldr	r3, [pc, #8]	; (80a1374 <HAL_USB_USART_Receive_Data+0xc>)
 80a136c:	681b      	ldr	r3, [r3, #0]
 80a136e:	699b      	ldr	r3, [r3, #24]
 80a1370:	9301      	str	r3, [sp, #4]
 80a1372:	bd08      	pop	{r3, pc}
 80a1374:	080601d8 	.word	0x080601d8

080a1378 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1378:	b508      	push	{r3, lr}
 80a137a:	4b02      	ldr	r3, [pc, #8]	; (80a1384 <HAL_USB_USART_Send_Data+0xc>)
 80a137c:	681b      	ldr	r3, [r3, #0]
 80a137e:	69db      	ldr	r3, [r3, #28]
 80a1380:	9301      	str	r3, [sp, #4]
 80a1382:	bd08      	pop	{r3, pc}
 80a1384:	080601d8 	.word	0x080601d8

080a1388 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1388:	b508      	push	{r3, lr}
 80a138a:	4b02      	ldr	r3, [pc, #8]	; (80a1394 <HAL_USB_USART_Flush_Data+0xc>)
 80a138c:	681b      	ldr	r3, [r3, #0]
 80a138e:	6a1b      	ldr	r3, [r3, #32]
 80a1390:	9301      	str	r3, [sp, #4]
 80a1392:	bd08      	pop	{r3, pc}
 80a1394:	080601d8 	.word	0x080601d8

080a1398 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1398:	b508      	push	{r3, lr}
 80a139a:	4b02      	ldr	r3, [pc, #8]	; (80a13a4 <inet_gethostbyname+0xc>)
 80a139c:	681b      	ldr	r3, [r3, #0]
 80a139e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a13a0:	9301      	str	r3, [sp, #4]
 80a13a2:	bd08      	pop	{r3, pc}
 80a13a4:	080601c0 	.word	0x080601c0

080a13a8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a13a8:	b508      	push	{r3, lr}
 80a13aa:	4b02      	ldr	r3, [pc, #8]	; (80a13b4 <set_system_mode+0xc>)
 80a13ac:	681b      	ldr	r3, [r3, #0]
 80a13ae:	685b      	ldr	r3, [r3, #4]
 80a13b0:	9301      	str	r3, [sp, #4]
 80a13b2:	bd08      	pop	{r3, pc}
 80a13b4:	080601a4 	.word	0x080601a4

080a13b8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a13b8:	b508      	push	{r3, lr}
 80a13ba:	4b03      	ldr	r3, [pc, #12]	; (80a13c8 <system_ctrl_set_app_request_handler+0x10>)
 80a13bc:	681b      	ldr	r3, [r3, #0]
 80a13be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a13c2:	9301      	str	r3, [sp, #4]
 80a13c4:	bd08      	pop	{r3, pc}
 80a13c6:	0000      	.short	0x0000
 80a13c8:	080601a4 	.word	0x080601a4

080a13cc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a13cc:	b508      	push	{r3, lr}
 80a13ce:	4b03      	ldr	r3, [pc, #12]	; (80a13dc <system_ctrl_set_result+0x10>)
 80a13d0:	681b      	ldr	r3, [r3, #0]
 80a13d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a13d6:	9301      	str	r3, [sp, #4]
 80a13d8:	bd08      	pop	{r3, pc}
 80a13da:	0000      	.short	0x0000
 80a13dc:	080601a4 	.word	0x080601a4

080a13e0 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a13e0:	b508      	push	{r3, lr}
 80a13e2:	4b02      	ldr	r3, [pc, #8]	; (80a13ec <spark_function+0xc>)
 80a13e4:	681b      	ldr	r3, [r3, #0]
 80a13e6:	685b      	ldr	r3, [r3, #4]
 80a13e8:	9301      	str	r3, [sp, #4]
 80a13ea:	bd08      	pop	{r3, pc}
 80a13ec:	080601cc 	.word	0x080601cc

080a13f0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a13f0:	b508      	push	{r3, lr}
 80a13f2:	4b02      	ldr	r3, [pc, #8]	; (80a13fc <spark_set_random_seed_from_cloud_handler+0xc>)
 80a13f4:	681b      	ldr	r3, [r3, #0]
 80a13f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a13f8:	9301      	str	r3, [sp, #4]
 80a13fa:	bd08      	pop	{r3, pc}
 80a13fc:	080601cc 	.word	0x080601cc

080a1400 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1400:	b508      	push	{r3, lr}
 80a1402:	4b02      	ldr	r3, [pc, #8]	; (80a140c <network_connect+0xc>)
 80a1404:	681b      	ldr	r3, [r3, #0]
 80a1406:	685b      	ldr	r3, [r3, #4]
 80a1408:	9301      	str	r3, [sp, #4]
 80a140a:	bd08      	pop	{r3, pc}
 80a140c:	080601c8 	.word	0x080601c8

080a1410 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1410:	b508      	push	{r3, lr}
 80a1412:	4b02      	ldr	r3, [pc, #8]	; (80a141c <network_connecting+0xc>)
 80a1414:	681b      	ldr	r3, [r3, #0]
 80a1416:	689b      	ldr	r3, [r3, #8]
 80a1418:	9301      	str	r3, [sp, #4]
 80a141a:	bd08      	pop	{r3, pc}
 80a141c:	080601c8 	.word	0x080601c8

080a1420 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1420:	b508      	push	{r3, lr}
 80a1422:	4b02      	ldr	r3, [pc, #8]	; (80a142c <network_disconnect+0xc>)
 80a1424:	681b      	ldr	r3, [r3, #0]
 80a1426:	68db      	ldr	r3, [r3, #12]
 80a1428:	9301      	str	r3, [sp, #4]
 80a142a:	bd08      	pop	{r3, pc}
 80a142c:	080601c8 	.word	0x080601c8

080a1430 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1430:	b508      	push	{r3, lr}
 80a1432:	4b02      	ldr	r3, [pc, #8]	; (80a143c <network_ready+0xc>)
 80a1434:	681b      	ldr	r3, [r3, #0]
 80a1436:	691b      	ldr	r3, [r3, #16]
 80a1438:	9301      	str	r3, [sp, #4]
 80a143a:	bd08      	pop	{r3, pc}
 80a143c:	080601c8 	.word	0x080601c8

080a1440 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1440:	b508      	push	{r3, lr}
 80a1442:	4b02      	ldr	r3, [pc, #8]	; (80a144c <network_on+0xc>)
 80a1444:	681b      	ldr	r3, [r3, #0]
 80a1446:	695b      	ldr	r3, [r3, #20]
 80a1448:	9301      	str	r3, [sp, #4]
 80a144a:	bd08      	pop	{r3, pc}
 80a144c:	080601c8 	.word	0x080601c8

080a1450 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1450:	b508      	push	{r3, lr}
 80a1452:	4b02      	ldr	r3, [pc, #8]	; (80a145c <network_off+0xc>)
 80a1454:	681b      	ldr	r3, [r3, #0]
 80a1456:	699b      	ldr	r3, [r3, #24]
 80a1458:	9301      	str	r3, [sp, #4]
 80a145a:	bd08      	pop	{r3, pc}
 80a145c:	080601c8 	.word	0x080601c8

080a1460 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1460:	b508      	push	{r3, lr}
 80a1462:	4b02      	ldr	r3, [pc, #8]	; (80a146c <network_listen+0xc>)
 80a1464:	681b      	ldr	r3, [r3, #0]
 80a1466:	69db      	ldr	r3, [r3, #28]
 80a1468:	9301      	str	r3, [sp, #4]
 80a146a:	bd08      	pop	{r3, pc}
 80a146c:	080601c8 	.word	0x080601c8

080a1470 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1470:	b508      	push	{r3, lr}
 80a1472:	4b02      	ldr	r3, [pc, #8]	; (80a147c <network_listening+0xc>)
 80a1474:	681b      	ldr	r3, [r3, #0]
 80a1476:	6a1b      	ldr	r3, [r3, #32]
 80a1478:	9301      	str	r3, [sp, #4]
 80a147a:	bd08      	pop	{r3, pc}
 80a147c:	080601c8 	.word	0x080601c8

080a1480 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1480:	b508      	push	{r3, lr}
 80a1482:	4b02      	ldr	r3, [pc, #8]	; (80a148c <network_set_listen_timeout+0xc>)
 80a1484:	681b      	ldr	r3, [r3, #0]
 80a1486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1488:	9301      	str	r3, [sp, #4]
 80a148a:	bd08      	pop	{r3, pc}
 80a148c:	080601c8 	.word	0x080601c8

080a1490 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1490:	b508      	push	{r3, lr}
 80a1492:	4b02      	ldr	r3, [pc, #8]	; (80a149c <network_get_listen_timeout+0xc>)
 80a1494:	681b      	ldr	r3, [r3, #0]
 80a1496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1498:	9301      	str	r3, [sp, #4]
 80a149a:	bd08      	pop	{r3, pc}
 80a149c:	080601c8 	.word	0x080601c8

080a14a0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a14a0:	b508      	push	{r3, lr}
 80a14a2:	4b02      	ldr	r3, [pc, #8]	; (80a14ac <network_is_on+0xc>)
 80a14a4:	681b      	ldr	r3, [r3, #0]
 80a14a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a14a8:	9301      	str	r3, [sp, #4]
 80a14aa:	bd08      	pop	{r3, pc}
 80a14ac:	080601c8 	.word	0x080601c8

080a14b0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a14b0:	b508      	push	{r3, lr}
 80a14b2:	4b02      	ldr	r3, [pc, #8]	; (80a14bc <network_is_off+0xc>)
 80a14b4:	681b      	ldr	r3, [r3, #0]
 80a14b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a14b8:	9301      	str	r3, [sp, #4]
 80a14ba:	bd08      	pop	{r3, pc}
 80a14bc:	080601c8 	.word	0x080601c8

080a14c0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a14c0:	b508      	push	{r3, lr}
 80a14c2:	4b02      	ldr	r3, [pc, #8]	; (80a14cc <malloc+0xc>)
 80a14c4:	681b      	ldr	r3, [r3, #0]
 80a14c6:	681b      	ldr	r3, [r3, #0]
 80a14c8:	9301      	str	r3, [sp, #4]
 80a14ca:	bd08      	pop	{r3, pc}
 80a14cc:	080601a0 	.word	0x080601a0

080a14d0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a14d0:	b508      	push	{r3, lr}
 80a14d2:	4b02      	ldr	r3, [pc, #8]	; (80a14dc <free+0xc>)
 80a14d4:	681b      	ldr	r3, [r3, #0]
 80a14d6:	685b      	ldr	r3, [r3, #4]
 80a14d8:	9301      	str	r3, [sp, #4]
 80a14da:	bd08      	pop	{r3, pc}
 80a14dc:	080601a0 	.word	0x080601a0

080a14e0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a14e0:	b508      	push	{r3, lr}
 80a14e2:	4b02      	ldr	r3, [pc, #8]	; (80a14ec <realloc+0xc>)
 80a14e4:	681b      	ldr	r3, [r3, #0]
 80a14e6:	689b      	ldr	r3, [r3, #8]
 80a14e8:	9301      	str	r3, [sp, #4]
 80a14ea:	bd08      	pop	{r3, pc}
 80a14ec:	080601a0 	.word	0x080601a0

080a14f0 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
 80a14f0:	b508      	push	{r3, lr}
 80a14f2:	4b02      	ldr	r3, [pc, #8]	; (80a14fc <sscanf+0xc>)
 80a14f4:	681b      	ldr	r3, [r3, #0]
 80a14f6:	695b      	ldr	r3, [r3, #20]
 80a14f8:	9301      	str	r3, [sp, #4]
 80a14fa:	bd08      	pop	{r3, pc}
 80a14fc:	080601a0 	.word	0x080601a0

080a1500 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a1500:	b508      	push	{r3, lr}
 80a1502:	4b02      	ldr	r3, [pc, #8]	; (80a150c <newlib_impure_ptr_callback+0xc>)
 80a1504:	681b      	ldr	r3, [r3, #0]
 80a1506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1508:	9301      	str	r3, [sp, #4]
 80a150a:	bd08      	pop	{r3, pc}
 80a150c:	080601a0 	.word	0x080601a0

080a1510 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a1510:	b510      	push	{r4, lr}
 80a1512:	b088      	sub	sp, #32
 80a1514:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a1516:	4668      	mov	r0, sp
 80a1518:	f000 f9f5 	bl	80a1906 <_ZN6StringC1EPKc>
    return (*fn)(p);
 80a151c:	4669      	mov	r1, sp
 80a151e:	a804      	add	r0, sp, #16
 80a1520:	f000 fa13 	bl	80a194a <_ZN6StringC1ERKS_>
 80a1524:	a804      	add	r0, sp, #16
 80a1526:	47a0      	blx	r4
 80a1528:	4604      	mov	r4, r0
 80a152a:	a804      	add	r0, sp, #16
 80a152c:	f000 f9a1 	bl	80a1872 <_ZN6StringD1Ev>
    String p(param);
 80a1530:	4668      	mov	r0, sp
 80a1532:	f000 f99e 	bl	80a1872 <_ZN6StringD1Ev>
}
 80a1536:	4620      	mov	r0, r4
 80a1538:	b008      	add	sp, #32
 80a153a:	bd10      	pop	{r4, pc}

080a153c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a153c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a153e:	2300      	movs	r3, #0
         size = sizeof(*this);
 80a1540:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 80a1542:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 80a1546:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a1548:	4669      	mov	r1, sp
 80a154a:	461a      	mov	r2, r3
 80a154c:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 80a154e:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 80a1552:	f8ad 4000 	strh.w	r4, [sp]
 80a1556:	f7ff ff43 	bl	80a13e0 <spark_function>
}
 80a155a:	b004      	add	sp, #16
 80a155c:	bd10      	pop	{r4, pc}

080a155e <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a155e:	4770      	bx	lr

080a1560 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1562:	4606      	mov	r6, r0
 80a1564:	4615      	mov	r5, r2
 80a1566:	460c      	mov	r4, r1
 80a1568:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a156a:	42bc      	cmp	r4, r7
 80a156c:	d006      	beq.n	80a157c <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a156e:	6833      	ldr	r3, [r6, #0]
 80a1570:	4630      	mov	r0, r6
 80a1572:	689b      	ldr	r3, [r3, #8]
 80a1574:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1578:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a157a:	e7f6      	b.n	80a156a <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a157c:	4628      	mov	r0, r5
 80a157e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1580 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a1580:	2200      	movs	r2, #0
 80a1582:	7c00      	ldrb	r0, [r0, #16]
 80a1584:	f7ff be4e 	b.w	80a1224 <hal_i2c_write>

080a1588 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a1588:	2100      	movs	r1, #0
 80a158a:	7c00      	ldrb	r0, [r0, #16]
 80a158c:	f7ff be52 	b.w	80a1234 <hal_i2c_available>

080a1590 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a1590:	2100      	movs	r1, #0
 80a1592:	7c00      	ldrb	r0, [r0, #16]
 80a1594:	f7ff be56 	b.w	80a1244 <hal_i2c_read>

080a1598 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a1598:	2100      	movs	r1, #0
 80a159a:	7c00      	ldrb	r0, [r0, #16]
 80a159c:	f7ff be5a 	b.w	80a1254 <hal_i2c_peek>

080a15a0 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a15a0:	2100      	movs	r1, #0
 80a15a2:	7c00      	ldrb	r0, [r0, #16]
 80a15a4:	f7ff be5e 	b.w	80a1264 <hal_i2c_flush>

080a15a8 <_ZN7TwoWireD0Ev>:
 80a15a8:	b510      	push	{r4, lr}
 80a15aa:	4604      	mov	r4, r0
 80a15ac:	2114      	movs	r1, #20
 80a15ae:	f000 fcff 	bl	80a1fb0 <_ZdlPvj>
 80a15b2:	4620      	mov	r0, r4
 80a15b4:	bd10      	pop	{r4, pc}
	...

080a15b8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a15b8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a15ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a15be:	4604      	mov	r4, r0
 80a15c0:	4608      	mov	r0, r1
 80a15c2:	2100      	movs	r1, #0
 80a15c4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a15c8:	4b03      	ldr	r3, [pc, #12]	; (80a15d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a15ca:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a15cc:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a15ce:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a15d0:	f7ff fe58 	bl	80a1284 <hal_i2c_init>
}
 80a15d4:	4620      	mov	r0, r4
 80a15d6:	bd10      	pop	{r4, pc}
 80a15d8:	080a2224 	.word	0x080a2224

080a15dc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a15dc:	4770      	bx	lr

080a15de <_ZN9IPAddressD0Ev>:
 80a15de:	b510      	push	{r4, lr}
 80a15e0:	4604      	mov	r4, r0
 80a15e2:	2118      	movs	r1, #24
 80a15e4:	f000 fce4 	bl	80a1fb0 <_ZdlPvj>
 80a15e8:	4620      	mov	r0, r4
 80a15ea:	bd10      	pop	{r4, pc}

080a15ec <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a15ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a15ee:	460e      	mov	r6, r1
 80a15f0:	2400      	movs	r4, #0
 80a15f2:	f100 0708 	add.w	r7, r0, #8
 80a15f6:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a15f8:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a15fc:	220a      	movs	r2, #10
 80a15fe:	4630      	mov	r0, r6
 80a1600:	f000 f8ef 	bl	80a17e2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1604:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1606:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a1608:	d101      	bne.n	80a160e <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a160a:	4620      	mov	r0, r4
 80a160c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a160e:	2c00      	cmp	r4, #0
 80a1610:	d0f2      	beq.n	80a15f8 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1612:	212e      	movs	r1, #46	; 0x2e
 80a1614:	4630      	mov	r0, r6
 80a1616:	f000 f8e1 	bl	80a17dc <_ZN5Print5printEc>
 80a161a:	4404      	add	r4, r0
 80a161c:	e7ec      	b.n	80a15f8 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a1620 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a1620:	b510      	push	{r4, lr}
 80a1622:	4604      	mov	r4, r0
 80a1624:	4b04      	ldr	r3, [pc, #16]	; (80a1638 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1626:	2211      	movs	r2, #17
 80a1628:	2100      	movs	r1, #0
 80a162a:	f840 3b04 	str.w	r3, [r0], #4
 80a162e:	f000 fce5 	bl	80a1ffc <memset>
}
 80a1632:	4620      	mov	r0, r4
 80a1634:	bd10      	pop	{r4, pc}
 80a1636:	bf00      	nop
 80a1638:	080a224c 	.word	0x080a224c

080a163c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a163c:	4603      	mov	r3, r0
 80a163e:	4a07      	ldr	r2, [pc, #28]	; (80a165c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1640:	b510      	push	{r4, lr}
 80a1642:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a1646:	f101 0210 	add.w	r2, r1, #16
 80a164a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a164e:	4291      	cmp	r1, r2
 80a1650:	f843 4b04 	str.w	r4, [r3], #4
 80a1654:	d1f9      	bne.n	80a164a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1656:	780a      	ldrb	r2, [r1, #0]
 80a1658:	701a      	strb	r2, [r3, #0]
}
 80a165a:	bd10      	pop	{r4, pc}
 80a165c:	080a224c 	.word	0x080a224c

080a1660 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a1660:	4a02      	ldr	r2, [pc, #8]	; (80a166c <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a1662:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a1666:	2204      	movs	r2, #4
 80a1668:	7502      	strb	r2, [r0, #20]
}
 80a166a:	4770      	bx	lr
 80a166c:	080a224c 	.word	0x080a224c

080a1670 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a1670:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1672:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1676:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a167a:	2304      	movs	r3, #4
 80a167c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a1680:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1684:	6044      	str	r4, [r0, #4]
 80a1686:	7503      	strb	r3, [r0, #20]
}
 80a1688:	bd10      	pop	{r4, pc}
	...

080a168c <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a168c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a168e:	4d04      	ldr	r5, [pc, #16]	; (80a16a0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1690:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1692:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1696:	9500      	str	r5, [sp, #0]
 80a1698:	f7ff ffea 	bl	80a1670 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a169c:	b003      	add	sp, #12
 80a169e:	bd30      	pop	{r4, r5, pc}
 80a16a0:	080a224c 	.word	0x080a224c

080a16a4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a16a4:	4b01      	ldr	r3, [pc, #4]	; (80a16ac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a16a6:	4a02      	ldr	r2, [pc, #8]	; (80a16b0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a16a8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a16aa:	4770      	bx	lr
 80a16ac:	20000a60 	.word	0x20000a60
 80a16b0:	080a2258 	.word	0x080a2258

080a16b4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a16b4:	2300      	movs	r3, #0
 80a16b6:	6840      	ldr	r0, [r0, #4]
 80a16b8:	461a      	mov	r2, r3
 80a16ba:	f7ff bea1 	b.w	80a1400 <network_connect>

080a16be <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a16be:	2200      	movs	r2, #0
 80a16c0:	2102      	movs	r1, #2
 80a16c2:	6840      	ldr	r0, [r0, #4]
 80a16c4:	f7ff beac 	b.w	80a1420 <network_disconnect>

080a16c8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a16c8:	2200      	movs	r2, #0
 80a16ca:	6840      	ldr	r0, [r0, #4]
 80a16cc:	4611      	mov	r1, r2
 80a16ce:	f7ff be9f 	b.w	80a1410 <network_connecting>

080a16d2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a16d2:	2200      	movs	r2, #0
 80a16d4:	6840      	ldr	r0, [r0, #4]
 80a16d6:	4611      	mov	r1, r2
 80a16d8:	f7ff beaa 	b.w	80a1430 <network_ready>

080a16dc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a16dc:	2300      	movs	r3, #0
 80a16de:	6840      	ldr	r0, [r0, #4]
 80a16e0:	461a      	mov	r2, r3
 80a16e2:	4619      	mov	r1, r3
 80a16e4:	f7ff beac 	b.w	80a1440 <network_on>

080a16e8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a16e8:	2300      	movs	r3, #0
 80a16ea:	6840      	ldr	r0, [r0, #4]
 80a16ec:	461a      	mov	r2, r3
 80a16ee:	4619      	mov	r1, r3
 80a16f0:	f7ff beae 	b.w	80a1450 <network_off>

080a16f4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a16f4:	2100      	movs	r1, #0
 80a16f6:	6840      	ldr	r0, [r0, #4]
 80a16f8:	f7ff bed2 	b.w	80a14a0 <network_is_on>

080a16fc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a16fc:	2100      	movs	r1, #0
 80a16fe:	6840      	ldr	r0, [r0, #4]
 80a1700:	f7ff bed6 	b.w	80a14b0 <network_is_off>

080a1704 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1704:	2200      	movs	r2, #0
 80a1706:	6840      	ldr	r0, [r0, #4]
 80a1708:	f081 0101 	eor.w	r1, r1, #1
 80a170c:	f7ff bea8 	b.w	80a1460 <network_listen>

080a1710 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1710:	2200      	movs	r2, #0
 80a1712:	6840      	ldr	r0, [r0, #4]
 80a1714:	f7ff beb4 	b.w	80a1480 <network_set_listen_timeout>

080a1718 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1718:	2200      	movs	r2, #0
 80a171a:	6840      	ldr	r0, [r0, #4]
 80a171c:	4611      	mov	r1, r2
 80a171e:	f7ff beb7 	b.w	80a1490 <network_get_listen_timeout>

080a1722 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1722:	2200      	movs	r2, #0
 80a1724:	6840      	ldr	r0, [r0, #4]
 80a1726:	4611      	mov	r1, r2
 80a1728:	f7ff bea2 	b.w	80a1470 <network_listening>

080a172c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a172c:	b570      	push	{r4, r5, r6, lr}
 80a172e:	4615      	mov	r5, r2
 80a1730:	b08e      	sub	sp, #56	; 0x38
 80a1732:	4604      	mov	r4, r0
    IPAddress addr;
 80a1734:	a808      	add	r0, sp, #32
 80a1736:	f7ff ff73 	bl	80a1620 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a173a:	2211      	movs	r2, #17
 80a173c:	2100      	movs	r1, #0
 80a173e:	a803      	add	r0, sp, #12
 80a1740:	f000 fc5c 	bl	80a1ffc <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1744:	2600      	movs	r6, #0
 80a1746:	4628      	mov	r0, r5
 80a1748:	f000 fcb8 	bl	80a20bc <strlen>
 80a174c:	4b0a      	ldr	r3, [pc, #40]	; (80a1778 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a174e:	9600      	str	r6, [sp, #0]
 80a1750:	b281      	uxth	r1, r0
 80a1752:	685b      	ldr	r3, [r3, #4]
 80a1754:	4628      	mov	r0, r5
 80a1756:	aa03      	add	r2, sp, #12
 80a1758:	f7ff fe1e 	bl	80a1398 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a175c:	b130      	cbz	r0, 80a176c <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a175e:	4631      	mov	r1, r6
 80a1760:	4620      	mov	r0, r4
 80a1762:	f7ff ff7d 	bl	80a1660 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1766:	4620      	mov	r0, r4
 80a1768:	b00e      	add	sp, #56	; 0x38
 80a176a:	bd70      	pop	{r4, r5, r6, pc}
 80a176c:	4620      	mov	r0, r4
 80a176e:	a903      	add	r1, sp, #12
 80a1770:	f7ff ff64 	bl	80a163c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a1774:	e7f7      	b.n	80a1766 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a1776:	bf00      	nop
 80a1778:	20000ee4 	.word	0x20000ee4

080a177c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a177c:	4b02      	ldr	r3, [pc, #8]	; (80a1788 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a177e:	4a03      	ldr	r2, [pc, #12]	; (80a178c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1780:	601a      	str	r2, [r3, #0]
 80a1782:	2200      	movs	r2, #0
 80a1784:	605a      	str	r2, [r3, #4]

} // spark
 80a1786:	4770      	bx	lr
 80a1788:	20000a64 	.word	0x20000a64
 80a178c:	080a2264 	.word	0x080a2264

080a1790 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1792:	4606      	mov	r6, r0
 80a1794:	460d      	mov	r5, r1
  size_t n = 0;
 80a1796:	2400      	movs	r4, #0
 80a1798:	188f      	adds	r7, r1, r2
  while (size--) {
 80a179a:	42bd      	cmp	r5, r7
 80a179c:	d00c      	beq.n	80a17b8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a179e:	6833      	ldr	r3, [r6, #0]
 80a17a0:	4630      	mov	r0, r6
 80a17a2:	689b      	ldr	r3, [r3, #8]
 80a17a4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a17a8:	4798      	blx	r3
     if (chunk>=0)
 80a17aa:	1e03      	subs	r3, r0, #0
 80a17ac:	db01      	blt.n	80a17b2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a17ae:	441c      	add	r4, r3
  while (size--) {
 80a17b0:	e7f3      	b.n	80a179a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a17b2:	2c00      	cmp	r4, #0
 80a17b4:	bf08      	it	eq
 80a17b6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a17b8:	4620      	mov	r0, r4
 80a17ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a17bc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a17bc:	b570      	push	{r4, r5, r6, lr}
 80a17be:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a17c0:	460c      	mov	r4, r1
    }
 80a17c2:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a17c4:	b149      	cbz	r1, 80a17da <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a17c6:	f000 fc79 	bl	80a20bc <strlen>
 80a17ca:	682b      	ldr	r3, [r5, #0]
 80a17cc:	4602      	mov	r2, r0
 80a17ce:	4621      	mov	r1, r4
 80a17d0:	4628      	mov	r0, r5
    }
 80a17d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a17d6:	68db      	ldr	r3, [r3, #12]
 80a17d8:	4718      	bx	r3
    }
 80a17da:	bd70      	pop	{r4, r5, r6, pc}

080a17dc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a17dc:	6803      	ldr	r3, [r0, #0]
 80a17de:	689b      	ldr	r3, [r3, #8]
 80a17e0:	4718      	bx	r3

080a17e2 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a17e2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a17e4:	2a01      	cmp	r2, #1
 80a17e6:	bf98      	it	ls
 80a17e8:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a17ea:	b530      	push	{r4, r5, lr}
 80a17ec:	b08b      	sub	sp, #44	; 0x2c
 80a17ee:	460c      	mov	r4, r1
  *str = '\0';
 80a17f0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a17f4:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a17f6:	4625      	mov	r5, r4
 80a17f8:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a17fc:	fb04 5312 	mls	r3, r4, r2, r5
 80a1800:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1802:	2b09      	cmp	r3, #9
 80a1804:	bf94      	ite	ls
 80a1806:	3330      	addls	r3, #48	; 0x30
 80a1808:	3337      	addhi	r3, #55	; 0x37
 80a180a:	b2db      	uxtb	r3, r3
  } while(n);
 80a180c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a180e:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a1812:	d9f0      	bls.n	80a17f6 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a1814:	f7ff ffd2 	bl	80a17bc <_ZN5Print5writeEPKc>
}
 80a1818:	b00b      	add	sp, #44	; 0x2c
 80a181a:	bd30      	pop	{r4, r5, pc}

080a181c <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
 80a181c:	b510      	push	{r4, lr}
  if (0 == max) {
 80a181e:	4604      	mov	r4, r0
 80a1820:	b128      	cbz	r0, 80a182e <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
 80a1822:	f000 fc17 	bl	80a2054 <rand>
 80a1826:	fb90 f3f4 	sdiv	r3, r0, r4
 80a182a:	fb03 0414 	mls	r4, r3, r4, r0
}
 80a182e:	4620      	mov	r0, r4
 80a1830:	bd10      	pop	{r4, pc}

080a1832 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
 80a1832:	4288      	cmp	r0, r1
{
 80a1834:	b510      	push	{r4, lr}
 80a1836:	4604      	mov	r4, r0
  if (min >= max) {
 80a1838:	da03      	bge.n	80a1842 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
 80a183a:	1a08      	subs	r0, r1, r0
 80a183c:	f7ff ffee 	bl	80a181c <_Z6randomi>
 80a1840:	4404      	add	r4, r0
}
 80a1842:	4620      	mov	r0, r4
 80a1844:	bd10      	pop	{r4, pc}
	...

080a1848 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1848:	2200      	movs	r2, #0
 80a184a:	4b01      	ldr	r3, [pc, #4]	; (80a1850 <_GLOBAL__sub_I_RGB+0x8>)
 80a184c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a184e:	4770      	bx	lr
 80a1850:	20000a6c 	.word	0x20000a6c

080a1854 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a1854:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1856:	2600      	movs	r6, #0
 80a1858:	4604      	mov	r4, r0
 80a185a:	460d      	mov	r5, r1
 80a185c:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a1860:	f7ff fca0 	bl	80a11a4 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a1864:	4628      	mov	r0, r5
    _spi = spi;
 80a1866:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a1868:	f7ff fd16 	bl	80a1298 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a186c:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a186e:	6066      	str	r6, [r4, #4]
}
 80a1870:	bd70      	pop	{r4, r5, r6, pc}

080a1872 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1872:	b510      	push	{r4, lr}
 80a1874:	4604      	mov	r4, r0
{
	free(buffer);
 80a1876:	6800      	ldr	r0, [r0, #0]
 80a1878:	f7ff fe2a 	bl	80a14d0 <free>
}
 80a187c:	4620      	mov	r0, r4
 80a187e:	bd10      	pop	{r4, pc}

080a1880 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1880:	b510      	push	{r4, lr}
 80a1882:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1884:	6800      	ldr	r0, [r0, #0]
 80a1886:	b108      	cbz	r0, 80a188c <_ZN6String10invalidateEv+0xc>
 80a1888:	f7ff fe22 	bl	80a14d0 <free>
	buffer = NULL;
 80a188c:	2300      	movs	r3, #0
	capacity = len = 0;
 80a188e:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a1892:	6023      	str	r3, [r4, #0]
}
 80a1894:	bd10      	pop	{r4, pc}

080a1896 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1896:	b538      	push	{r3, r4, r5, lr}
 80a1898:	4604      	mov	r4, r0
 80a189a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a189c:	6800      	ldr	r0, [r0, #0]
 80a189e:	3101      	adds	r1, #1
 80a18a0:	f7ff fe1e 	bl	80a14e0 <realloc>
	if (newbuffer) {
 80a18a4:	b110      	cbz	r0, 80a18ac <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a18a6:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a18aa:	2001      	movs	r0, #1
	}
	return 0;
}
 80a18ac:	bd38      	pop	{r3, r4, r5, pc}

080a18ae <_ZN6String7reserveEj>:
{
 80a18ae:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a18b0:	6803      	ldr	r3, [r0, #0]
{
 80a18b2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a18b4:	b123      	cbz	r3, 80a18c0 <_ZN6String7reserveEj+0x12>
 80a18b6:	6843      	ldr	r3, [r0, #4]
 80a18b8:	428b      	cmp	r3, r1
 80a18ba:	d301      	bcc.n	80a18c0 <_ZN6String7reserveEj+0x12>
 80a18bc:	2001      	movs	r0, #1
}
 80a18be:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a18c0:	4620      	mov	r0, r4
 80a18c2:	f7ff ffe8 	bl	80a1896 <_ZN6String12changeBufferEj>
 80a18c6:	2800      	cmp	r0, #0
 80a18c8:	d0f9      	beq.n	80a18be <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a18ca:	68a3      	ldr	r3, [r4, #8]
 80a18cc:	2b00      	cmp	r3, #0
 80a18ce:	d1f5      	bne.n	80a18bc <_ZN6String7reserveEj+0xe>
 80a18d0:	6822      	ldr	r2, [r4, #0]
 80a18d2:	7013      	strb	r3, [r2, #0]
 80a18d4:	e7f2      	b.n	80a18bc <_ZN6String7reserveEj+0xe>

080a18d6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a18d6:	b570      	push	{r4, r5, r6, lr}
 80a18d8:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a18da:	4611      	mov	r1, r2
{
 80a18dc:	4604      	mov	r4, r0
 80a18de:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a18e0:	f7ff ffe5 	bl	80a18ae <_ZN6String7reserveEj>
 80a18e4:	b920      	cbnz	r0, 80a18f0 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a18e6:	4620      	mov	r0, r4
 80a18e8:	f7ff ffca 	bl	80a1880 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a18ec:	4620      	mov	r0, r4
 80a18ee:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a18f0:	462a      	mov	r2, r5
 80a18f2:	4631      	mov	r1, r6
 80a18f4:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a18f6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a18f8:	f000 fb72 	bl	80a1fe0 <memcpy>
	buffer[len] = 0;
 80a18fc:	2100      	movs	r1, #0
 80a18fe:	6822      	ldr	r2, [r4, #0]
 80a1900:	68a3      	ldr	r3, [r4, #8]
 80a1902:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a1904:	e7f2      	b.n	80a18ec <_ZN6String4copyEPKcj+0x16>

080a1906 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a1906:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a1908:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a190a:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a190c:	460d      	mov	r5, r1
	capacity = 0;
 80a190e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a1912:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1914:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a1916:	b139      	cbz	r1, 80a1928 <_ZN6StringC1EPKc+0x22>
 80a1918:	4608      	mov	r0, r1
 80a191a:	f000 fbcf 	bl	80a20bc <strlen>
 80a191e:	4629      	mov	r1, r5
 80a1920:	4602      	mov	r2, r0
 80a1922:	4620      	mov	r0, r4
 80a1924:	f7ff ffd7 	bl	80a18d6 <_ZN6String4copyEPKcj>
}
 80a1928:	4620      	mov	r0, r4
 80a192a:	bd38      	pop	{r3, r4, r5, pc}

080a192c <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a192c:	4288      	cmp	r0, r1
{
 80a192e:	b510      	push	{r4, lr}
 80a1930:	460b      	mov	r3, r1
 80a1932:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a1934:	d004      	beq.n	80a1940 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a1936:	6809      	ldr	r1, [r1, #0]
 80a1938:	b121      	cbz	r1, 80a1944 <_ZN6StringaSERKS_+0x18>
 80a193a:	689a      	ldr	r2, [r3, #8]
 80a193c:	f7ff ffcb 	bl	80a18d6 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a1940:	4620      	mov	r0, r4
 80a1942:	bd10      	pop	{r4, pc}
	else invalidate();
 80a1944:	f7ff ff9c 	bl	80a1880 <_ZN6String10invalidateEv>
 80a1948:	e7fa      	b.n	80a1940 <_ZN6StringaSERKS_+0x14>

080a194a <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a194a:	2300      	movs	r3, #0
String::String(const String &value)
 80a194c:	b510      	push	{r4, lr}
 80a194e:	4604      	mov	r4, r0
	capacity = 0;
 80a1950:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a1954:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1956:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a1958:	f7ff ffe8 	bl	80a192c <_ZN6StringaSERKS_>
}
 80a195c:	4620      	mov	r0, r4
 80a195e:	bd10      	pop	{r4, pc}

080a1960 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a1960:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a1962:	2000      	movs	r0, #0
 80a1964:	4b04      	ldr	r3, [pc, #16]	; (80a1978 <_GLOBAL__sub_I_System+0x18>)
 80a1966:	601a      	str	r2, [r3, #0]
 80a1968:	4b04      	ldr	r3, [pc, #16]	; (80a197c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a196a:	4a05      	ldr	r2, [pc, #20]	; (80a1980 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a196c:	6018      	str	r0, [r3, #0]
 80a196e:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a1970:	7198      	strb	r0, [r3, #6]
 80a1972:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1974:	f7ff bd18 	b.w	80a13a8 <set_system_mode>
 80a1978:	20000a88 	.word	0x20000a88
 80a197c:	20000a7c 	.word	0x20000a7c
 80a1980:	ffff0000 	.word	0xffff0000

080a1984 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1984:	4b02      	ldr	r3, [pc, #8]	; (80a1990 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1986:	681a      	ldr	r2, [r3, #0]
 80a1988:	4b02      	ldr	r3, [pc, #8]	; (80a1994 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a198a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a198c:	4770      	bx	lr
 80a198e:	bf00      	nop
 80a1990:	200009cc 	.word	0x200009cc
 80a1994:	20000a8c 	.word	0x20000a8c

080a1998 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a1998:	4770      	bx	lr

080a199a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a199a:	7441      	strb	r1, [r0, #17]
}
 80a199c:	4770      	bx	lr

080a199e <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a199e:	4770      	bx	lr

080a19a0 <_ZN11USARTSerial17availableForWriteEv>:
{
 80a19a0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a19a2:	7c00      	ldrb	r0, [r0, #16]
 80a19a4:	f7ff fcc0 	bl	80a1328 <hal_usart_available_data_for_write>
}
 80a19a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a19ac:	bd08      	pop	{r3, pc}

080a19ae <_ZN11USARTSerial9availableEv>:
{
 80a19ae:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a19b0:	7c00      	ldrb	r0, [r0, #16]
 80a19b2:	f7ff fc91 	bl	80a12d8 <hal_usart_available>
}
 80a19b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a19ba:	bd08      	pop	{r3, pc}

080a19bc <_ZN11USARTSerial4peekEv>:
{
 80a19bc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a19be:	7c00      	ldrb	r0, [r0, #16]
 80a19c0:	f7ff fc9a 	bl	80a12f8 <hal_usart_peek>
}
 80a19c4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a19c8:	bd08      	pop	{r3, pc}

080a19ca <_ZN11USARTSerial4readEv>:
{
 80a19ca:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a19cc:	7c00      	ldrb	r0, [r0, #16]
 80a19ce:	f7ff fc8b 	bl	80a12e8 <hal_usart_read>
}
 80a19d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a19d6:	bd08      	pop	{r3, pc}

080a19d8 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a19d8:	7c00      	ldrb	r0, [r0, #16]
 80a19da:	f7ff bc95 	b.w	80a1308 <hal_usart_flush>

080a19de <_ZN11USARTSerial5writeEh>:
{
 80a19de:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a19e0:	7c46      	ldrb	r6, [r0, #17]
{
 80a19e2:	4604      	mov	r4, r0
 80a19e4:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a19e6:	b12e      	cbz	r6, 80a19f4 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a19e8:	4629      	mov	r1, r5
 80a19ea:	7c20      	ldrb	r0, [r4, #16]
}
 80a19ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a19f0:	f7ff bc6a 	b.w	80a12c8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a19f4:	7c00      	ldrb	r0, [r0, #16]
 80a19f6:	f7ff fc97 	bl	80a1328 <hal_usart_available_data_for_write>
 80a19fa:	2800      	cmp	r0, #0
 80a19fc:	dcf4      	bgt.n	80a19e8 <_ZN11USARTSerial5writeEh+0xa>
}
 80a19fe:	4630      	mov	r0, r6
 80a1a00:	bd70      	pop	{r4, r5, r6, pc}

080a1a02 <_ZN11USARTSerialD0Ev>:
 80a1a02:	b510      	push	{r4, lr}
 80a1a04:	4604      	mov	r4, r0
 80a1a06:	2114      	movs	r1, #20
 80a1a08:	f000 fad2 	bl	80a1fb0 <_ZdlPvj>
 80a1a0c:	4620      	mov	r0, r4
 80a1a0e:	bd10      	pop	{r4, pc}

080a1a10 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a1a10:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1a14:	b510      	push	{r4, lr}
 80a1a16:	4604      	mov	r4, r0
 80a1a18:	4608      	mov	r0, r1
 80a1a1a:	4611      	mov	r1, r2
 80a1a1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1a20:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a1a24:	4a04      	ldr	r2, [pc, #16]	; (80a1a38 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a1a26:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1a28:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a1a2a:	2201      	movs	r2, #1
 80a1a2c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a1a2e:	461a      	mov	r2, r3
 80a1a30:	f7ff fc42 	bl	80a12b8 <hal_usart_init>
}
 80a1a34:	4620      	mov	r0, r4
 80a1a36:	bd10      	pop	{r4, pc}
 80a1a38:	080a22bc 	.word	0x080a22bc

080a1a3c <_Z22__fetch_global_Serial1v>:
{
 80a1a3c:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1a3e:	4d0c      	ldr	r5, [pc, #48]	; (80a1a70 <_Z22__fetch_global_Serial1v+0x34>)
 80a1a40:	7829      	ldrb	r1, [r5, #0]
 80a1a42:	f3bf 8f5b 	dmb	ish
 80a1a46:	f011 0401 	ands.w	r4, r1, #1
 80a1a4a:	d10f      	bne.n	80a1a6c <_Z22__fetch_global_Serial1v+0x30>
 80a1a4c:	4628      	mov	r0, r5
 80a1a4e:	f7fe fb26 	bl	80a009e <__cxa_guard_acquire>
 80a1a52:	b158      	cbz	r0, 80a1a6c <_Z22__fetch_global_Serial1v+0x30>
 80a1a54:	4621      	mov	r1, r4
 80a1a56:	4b07      	ldr	r3, [pc, #28]	; (80a1a74 <_Z22__fetch_global_Serial1v+0x38>)
 80a1a58:	4a07      	ldr	r2, [pc, #28]	; (80a1a78 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1a5a:	4808      	ldr	r0, [pc, #32]	; (80a1a7c <_Z22__fetch_global_Serial1v+0x40>)
 80a1a5c:	f7ff ffd8 	bl	80a1a10 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a1a60:	4628      	mov	r0, r5
 80a1a62:	f7fe fb21 	bl	80a00a8 <__cxa_guard_release>
 80a1a66:	4806      	ldr	r0, [pc, #24]	; (80a1a80 <_Z22__fetch_global_Serial1v+0x44>)
 80a1a68:	f000 faa6 	bl	80a1fb8 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1a6c:	4803      	ldr	r0, [pc, #12]	; (80a1a7c <_Z22__fetch_global_Serial1v+0x40>)
 80a1a6e:	bd38      	pop	{r3, r4, r5, pc}
 80a1a70:	20000a90 	.word	0x20000a90
 80a1a74:	20000b18 	.word	0x20000b18
 80a1a78:	20000a94 	.word	0x20000a94
 80a1a7c:	20000b9c 	.word	0x20000b9c
 80a1a80:	080a199f 	.word	0x080a199f

080a1a84 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1a84:	7441      	strb	r1, [r0, #17]
}
 80a1a86:	4770      	bx	lr

080a1a88 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1a88:	4770      	bx	lr

080a1a8a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1a8a:	4770      	bx	lr

080a1a8c <_ZN9USBSerial4readEv>:
{
 80a1a8c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1a8e:	2100      	movs	r1, #0
 80a1a90:	7c00      	ldrb	r0, [r0, #16]
 80a1a92:	f7ff fc69 	bl	80a1368 <HAL_USB_USART_Receive_Data>
}
 80a1a96:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1a9a:	bd08      	pop	{r3, pc}

080a1a9c <_ZN9USBSerial4peekEv>:
{
 80a1a9c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1a9e:	2101      	movs	r1, #1
 80a1aa0:	7c00      	ldrb	r0, [r0, #16]
 80a1aa2:	f7ff fc61 	bl	80a1368 <HAL_USB_USART_Receive_Data>
}
 80a1aa6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1aaa:	bd08      	pop	{r3, pc}

080a1aac <_ZN9USBSerial17availableForWriteEv>:
{
 80a1aac:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1aae:	7c00      	ldrb	r0, [r0, #16]
 80a1ab0:	f7ff fc52 	bl	80a1358 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1ab4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1ab8:	bd08      	pop	{r3, pc}

080a1aba <_ZN9USBSerial9availableEv>:
{
 80a1aba:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1abc:	7c00      	ldrb	r0, [r0, #16]
 80a1abe:	f7ff fc43 	bl	80a1348 <HAL_USB_USART_Available_Data>
}
 80a1ac2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1ac6:	bd08      	pop	{r3, pc}

080a1ac8 <_ZN9USBSerial5writeEh>:
{
 80a1ac8:	b538      	push	{r3, r4, r5, lr}
 80a1aca:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1acc:	7c00      	ldrb	r0, [r0, #16]
{
 80a1ace:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1ad0:	f7ff fc42 	bl	80a1358 <HAL_USB_USART_Available_Data_For_Write>
 80a1ad4:	2800      	cmp	r0, #0
 80a1ad6:	dc01      	bgt.n	80a1adc <_ZN9USBSerial5writeEh+0x14>
 80a1ad8:	7c60      	ldrb	r0, [r4, #17]
 80a1ada:	b128      	cbz	r0, 80a1ae8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1adc:	4629      	mov	r1, r5
 80a1ade:	7c20      	ldrb	r0, [r4, #16]
 80a1ae0:	f7ff fc4a 	bl	80a1378 <HAL_USB_USART_Send_Data>
 80a1ae4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a1ae8:	bd38      	pop	{r3, r4, r5, pc}

080a1aea <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a1aea:	7c00      	ldrb	r0, [r0, #16]
 80a1aec:	f7ff bc4c 	b.w	80a1388 <HAL_USB_USART_Flush_Data>

080a1af0 <_ZN9USBSerialD0Ev>:
 80a1af0:	b510      	push	{r4, lr}
 80a1af2:	4604      	mov	r4, r0
 80a1af4:	2114      	movs	r1, #20
 80a1af6:	f000 fa5b 	bl	80a1fb0 <_ZdlPvj>
 80a1afa:	4620      	mov	r0, r4
 80a1afc:	bd10      	pop	{r4, pc}

080a1afe <__tcf_1>:
 80a1afe:	4770      	bx	lr

080a1b00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1b00:	b510      	push	{r4, lr}
 80a1b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1b06:	4604      	mov	r4, r0
 80a1b08:	4608      	mov	r0, r1
 80a1b0a:	2100      	movs	r1, #0
 80a1b0c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1b10:	4b04      	ldr	r3, [pc, #16]	; (80a1b24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a1b12:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1b14:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a1b16:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a1b18:	4611      	mov	r1, r2
  _blocking = true;
 80a1b1a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a1b1c:	f7ff fc0c 	bl	80a1338 <HAL_USB_USART_Init>
}
 80a1b20:	4620      	mov	r0, r4
 80a1b22:	bd10      	pop	{r4, pc}
 80a1b24:	080a22ec 	.word	0x080a22ec

080a1b28 <_Z19acquireSerialBufferv>:
{
 80a1b28:	b510      	push	{r4, lr}
 80a1b2a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1b2c:	2214      	movs	r2, #20
 80a1b2e:	2100      	movs	r1, #0
 80a1b30:	f000 fa64 	bl	80a1ffc <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a1b34:	4b05      	ldr	r3, [pc, #20]	; (80a1b4c <_Z19acquireSerialBufferv+0x24>)
}
 80a1b36:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a1b38:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1b3a:	4b05      	ldr	r3, [pc, #20]	; (80a1b50 <_Z19acquireSerialBufferv+0x28>)
 80a1b3c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1b3e:	f240 1301 	movw	r3, #257	; 0x101
 80a1b42:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1b44:	2381      	movs	r3, #129	; 0x81
 80a1b46:	8223      	strh	r3, [r4, #16]
}
 80a1b48:	bd10      	pop	{r4, pc}
 80a1b4a:	bf00      	nop
 80a1b4c:	20000be0 	.word	0x20000be0
 80a1b50:	20000ce1 	.word	0x20000ce1

080a1b54 <_Z16_fetch_usbserialv>:
{
 80a1b54:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1b56:	4d0e      	ldr	r5, [pc, #56]	; (80a1b90 <_Z16_fetch_usbserialv+0x3c>)
{
 80a1b58:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1b5a:	a801      	add	r0, sp, #4
 80a1b5c:	f7ff ffe4 	bl	80a1b28 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1b60:	7829      	ldrb	r1, [r5, #0]
 80a1b62:	f3bf 8f5b 	dmb	ish
 80a1b66:	f011 0401 	ands.w	r4, r1, #1
 80a1b6a:	d10e      	bne.n	80a1b8a <_Z16_fetch_usbserialv+0x36>
 80a1b6c:	4628      	mov	r0, r5
 80a1b6e:	f7fe fa96 	bl	80a009e <__cxa_guard_acquire>
 80a1b72:	b150      	cbz	r0, 80a1b8a <_Z16_fetch_usbserialv+0x36>
 80a1b74:	4621      	mov	r1, r4
 80a1b76:	aa01      	add	r2, sp, #4
 80a1b78:	4806      	ldr	r0, [pc, #24]	; (80a1b94 <_Z16_fetch_usbserialv+0x40>)
 80a1b7a:	f7ff ffc1 	bl	80a1b00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1b7e:	4628      	mov	r0, r5
 80a1b80:	f7fe fa92 	bl	80a00a8 <__cxa_guard_release>
 80a1b84:	4804      	ldr	r0, [pc, #16]	; (80a1b98 <_Z16_fetch_usbserialv+0x44>)
 80a1b86:	f000 fa17 	bl	80a1fb8 <atexit>
	return _usbserial;
}
 80a1b8a:	4802      	ldr	r0, [pc, #8]	; (80a1b94 <_Z16_fetch_usbserialv+0x40>)
 80a1b8c:	b007      	add	sp, #28
 80a1b8e:	bd30      	pop	{r4, r5, pc}
 80a1b90:	20000bb0 	.word	0x20000bb0
 80a1b94:	20000bb8 	.word	0x20000bb8
 80a1b98:	080a1a89 	.word	0x080a1a89

080a1b9c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1b9c:	b510      	push	{r4, lr}
 80a1b9e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1ba0:	2214      	movs	r2, #20
 80a1ba2:	2100      	movs	r1, #0
 80a1ba4:	f000 fa2a 	bl	80a1ffc <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1ba8:	4b05      	ldr	r3, [pc, #20]	; (80a1bc0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1baa:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a1bac:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1bae:	4b05      	ldr	r3, [pc, #20]	; (80a1bc4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1bb0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1bb2:	f240 1301 	movw	r3, #257	; 0x101
 80a1bb6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1bb8:	2381      	movs	r3, #129	; 0x81
 80a1bba:	8223      	strh	r3, [r4, #16]
}
 80a1bbc:	bd10      	pop	{r4, pc}
 80a1bbe:	bf00      	nop
 80a1bc0:	20000d62 	.word	0x20000d62
 80a1bc4:	20000e63 	.word	0x20000e63

080a1bc8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1bc8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1bca:	4c0e      	ldr	r4, [pc, #56]	; (80a1c04 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a1bcc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1bce:	a801      	add	r0, sp, #4
 80a1bd0:	f7ff ffe4 	bl	80a1b9c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1bd4:	7823      	ldrb	r3, [r4, #0]
 80a1bd6:	f3bf 8f5b 	dmb	ish
 80a1bda:	07db      	lsls	r3, r3, #31
 80a1bdc:	d40e      	bmi.n	80a1bfc <_Z17_fetch_usbserial1v+0x34>
 80a1bde:	4620      	mov	r0, r4
 80a1be0:	f7fe fa5d 	bl	80a009e <__cxa_guard_acquire>
 80a1be4:	b150      	cbz	r0, 80a1bfc <_Z17_fetch_usbserial1v+0x34>
 80a1be6:	2101      	movs	r1, #1
 80a1be8:	aa01      	add	r2, sp, #4
 80a1bea:	4807      	ldr	r0, [pc, #28]	; (80a1c08 <_Z17_fetch_usbserial1v+0x40>)
 80a1bec:	f7ff ff88 	bl	80a1b00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1bf0:	4620      	mov	r0, r4
 80a1bf2:	f7fe fa59 	bl	80a00a8 <__cxa_guard_release>
 80a1bf6:	4805      	ldr	r0, [pc, #20]	; (80a1c0c <_Z17_fetch_usbserial1v+0x44>)
 80a1bf8:	f000 f9de 	bl	80a1fb8 <atexit>
  return _usbserial1;
}
 80a1bfc:	4802      	ldr	r0, [pc, #8]	; (80a1c08 <_Z17_fetch_usbserial1v+0x40>)
 80a1bfe:	b006      	add	sp, #24
 80a1c00:	bd10      	pop	{r4, pc}
 80a1c02:	bf00      	nop
 80a1c04:	20000bb4 	.word	0x20000bb4
 80a1c08:	20000bcc 	.word	0x20000bcc
 80a1c0c:	080a1aff 	.word	0x080a1aff

080a1c10 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a1c10:	2200      	movs	r2, #0
 80a1c12:	6840      	ldr	r0, [r0, #4]
 80a1c14:	4611      	mov	r1, r2
 80a1c16:	f7ff bc0b 	b.w	80a1430 <network_ready>

080a1c1a <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a1c1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1c1c:	4615      	mov	r5, r2
 80a1c1e:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a1c20:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a1c22:	460e      	mov	r6, r1
 80a1c24:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a1c26:	2100      	movs	r1, #0
 80a1c28:	a803      	add	r0, sp, #12
 80a1c2a:	f000 f9e7 	bl	80a1ffc <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1c2e:	4628      	mov	r0, r5
 80a1c30:	f000 fa44 	bl	80a20bc <strlen>
 80a1c34:	2700      	movs	r7, #0
 80a1c36:	b281      	uxth	r1, r0
 80a1c38:	6873      	ldr	r3, [r6, #4]
 80a1c3a:	4628      	mov	r0, r5
 80a1c3c:	9700      	str	r7, [sp, #0]
 80a1c3e:	aa03      	add	r2, sp, #12
 80a1c40:	f7ff fbaa 	bl	80a1398 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1c44:	b130      	cbz	r0, 80a1c54 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a1c46:	4639      	mov	r1, r7
 80a1c48:	4620      	mov	r0, r4
 80a1c4a:	f7ff fd09 	bl	80a1660 <_ZN9IPAddressC1Em>
    }
 80a1c4e:	4620      	mov	r0, r4
 80a1c50:	b009      	add	sp, #36	; 0x24
 80a1c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1c54:	4620      	mov	r0, r4
 80a1c56:	a903      	add	r1, sp, #12
 80a1c58:	f7ff fcf0 	bl	80a163c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a1c5c:	e7f7      	b.n	80a1c4e <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a1c5e <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a1c5e:	2200      	movs	r2, #0
 80a1c60:	6840      	ldr	r0, [r0, #4]
 80a1c62:	4611      	mov	r1, r2
 80a1c64:	f7ff bc04 	b.w	80a1470 <network_listening>

080a1c68 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a1c68:	2200      	movs	r2, #0
 80a1c6a:	6840      	ldr	r0, [r0, #4]
 80a1c6c:	4611      	mov	r1, r2
 80a1c6e:	f7ff bc0f 	b.w	80a1490 <network_get_listen_timeout>

080a1c72 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a1c72:	2200      	movs	r2, #0
 80a1c74:	6840      	ldr	r0, [r0, #4]
 80a1c76:	f7ff bc03 	b.w	80a1480 <network_set_listen_timeout>

080a1c7a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1c7a:	2200      	movs	r2, #0
 80a1c7c:	6840      	ldr	r0, [r0, #4]
 80a1c7e:	f081 0101 	eor.w	r1, r1, #1
 80a1c82:	f7ff bbed 	b.w	80a1460 <network_listen>

080a1c86 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a1c86:	2300      	movs	r3, #0
 80a1c88:	6840      	ldr	r0, [r0, #4]
 80a1c8a:	461a      	mov	r2, r3
 80a1c8c:	4619      	mov	r1, r3
 80a1c8e:	f7ff bbdf 	b.w	80a1450 <network_off>

080a1c92 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a1c92:	2300      	movs	r3, #0
 80a1c94:	6840      	ldr	r0, [r0, #4]
 80a1c96:	461a      	mov	r2, r3
 80a1c98:	4619      	mov	r1, r3
 80a1c9a:	f7ff bbd1 	b.w	80a1440 <network_on>

080a1c9e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a1c9e:	2200      	movs	r2, #0
 80a1ca0:	6840      	ldr	r0, [r0, #4]
 80a1ca2:	4611      	mov	r1, r2
 80a1ca4:	f7ff bbb4 	b.w	80a1410 <network_connecting>

080a1ca8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1ca8:	2200      	movs	r2, #0
 80a1caa:	2102      	movs	r1, #2
 80a1cac:	6840      	ldr	r0, [r0, #4]
 80a1cae:	f7ff bbb7 	b.w	80a1420 <network_disconnect>

080a1cb2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a1cb2:	2300      	movs	r3, #0
 80a1cb4:	6840      	ldr	r0, [r0, #4]
 80a1cb6:	461a      	mov	r2, r3
 80a1cb8:	f7ff bba2 	b.w	80a1400 <network_connect>

080a1cbc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1cbc:	2204      	movs	r2, #4
 80a1cbe:	4b02      	ldr	r3, [pc, #8]	; (80a1cc8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1cc0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1cc2:	4a02      	ldr	r2, [pc, #8]	; (80a1ccc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1cc4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a1cc6:	4770      	bx	lr
 80a1cc8:	20000ee4 	.word	0x20000ee4
 80a1ccc:	080a231c 	.word	0x080a231c

080a1cd0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a1cd0:	4b01      	ldr	r3, [pc, #4]	; (80a1cd8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a1cd2:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a1cd4:	4770      	bx	lr
 80a1cd6:	bf00      	nop
 80a1cd8:	200009d0 	.word	0x200009d0

080a1cdc <serialEventRun>:
{
 80a1cdc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1cde:	4b13      	ldr	r3, [pc, #76]	; (80a1d2c <serialEventRun+0x50>)
 80a1ce0:	b143      	cbz	r3, 80a1cf4 <serialEventRun+0x18>
 80a1ce2:	f7ff ff37 	bl	80a1b54 <_Z16_fetch_usbserialv>
 80a1ce6:	6803      	ldr	r3, [r0, #0]
 80a1ce8:	691b      	ldr	r3, [r3, #16]
 80a1cea:	4798      	blx	r3
 80a1cec:	2800      	cmp	r0, #0
 80a1cee:	dd01      	ble.n	80a1cf4 <serialEventRun+0x18>
        serialEvent();
 80a1cf0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a1cf4:	4b0e      	ldr	r3, [pc, #56]	; (80a1d30 <serialEventRun+0x54>)
 80a1cf6:	b143      	cbz	r3, 80a1d0a <serialEventRun+0x2e>
 80a1cf8:	f7ff fea0 	bl	80a1a3c <_Z22__fetch_global_Serial1v>
 80a1cfc:	6803      	ldr	r3, [r0, #0]
 80a1cfe:	691b      	ldr	r3, [r3, #16]
 80a1d00:	4798      	blx	r3
 80a1d02:	2800      	cmp	r0, #0
 80a1d04:	dd01      	ble.n	80a1d0a <serialEventRun+0x2e>
        serialEvent1();
 80a1d06:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a1d0a:	4b0a      	ldr	r3, [pc, #40]	; (80a1d34 <serialEventRun+0x58>)
 80a1d0c:	b10b      	cbz	r3, 80a1d12 <serialEventRun+0x36>
 80a1d0e:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1d12:	4b09      	ldr	r3, [pc, #36]	; (80a1d38 <serialEventRun+0x5c>)
 80a1d14:	b143      	cbz	r3, 80a1d28 <serialEventRun+0x4c>
 80a1d16:	f7ff ff57 	bl	80a1bc8 <_Z17_fetch_usbserial1v>
 80a1d1a:	6803      	ldr	r3, [r0, #0]
 80a1d1c:	691b      	ldr	r3, [r3, #16]
 80a1d1e:	4798      	blx	r3
 80a1d20:	2800      	cmp	r0, #0
 80a1d22:	dd01      	ble.n	80a1d28 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a1d24:	f3af 8000 	nop.w
}
 80a1d28:	bd08      	pop	{r3, pc}
 80a1d2a:	bf00      	nop
	...

080a1d3c <_post_loop>:
{
 80a1d3c:	b508      	push	{r3, lr}
	serialEventRun();
 80a1d3e:	f7ff ffcd 	bl	80a1cdc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1d42:	f7ff fa4f 	bl	80a11e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1d46:	4b01      	ldr	r3, [pc, #4]	; (80a1d4c <_post_loop+0x10>)
 80a1d48:	6018      	str	r0, [r3, #0]
}
 80a1d4a:	bd08      	pop	{r3, pc}
 80a1d4c:	20000f04 	.word	0x20000f04

080a1d50 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1d50:	4805      	ldr	r0, [pc, #20]	; (80a1d68 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a1d52:	4a06      	ldr	r2, [pc, #24]	; (80a1d6c <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a1d54:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1d56:	1a12      	subs	r2, r2, r0
 80a1d58:	4905      	ldr	r1, [pc, #20]	; (80a1d70 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a1d5a:	f000 f941 	bl	80a1fe0 <memcpy>
    __backup_sram_signature = signature;
 80a1d5e:	4b05      	ldr	r3, [pc, #20]	; (80a1d74 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a1d60:	4a05      	ldr	r2, [pc, #20]	; (80a1d78 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a1d62:	601a      	str	r2, [r3, #0]
}
 80a1d64:	bd08      	pop	{r3, pc}
 80a1d66:	bf00      	nop
 80a1d68:	40024000 	.word	0x40024000
 80a1d6c:	40024004 	.word	0x40024004
 80a1d70:	080a2370 	.word	0x080a2370
 80a1d74:	40024000 	.word	0x40024000
 80a1d78:	9a271c1e 	.word	0x9a271c1e

080a1d7c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1d7c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1d7e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1d80:	461a      	mov	r2, r3
 80a1d82:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1d86:	9300      	str	r3, [sp, #0]
 80a1d88:	f7ff fb20 	bl	80a13cc <system_ctrl_set_result>
}
 80a1d8c:	b003      	add	sp, #12
 80a1d8e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1d94 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a1d94:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1d96:	8843      	ldrh	r3, [r0, #2]
 80a1d98:	2b0a      	cmp	r3, #10
 80a1d9a:	d008      	beq.n	80a1dae <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1d9c:	2b50      	cmp	r3, #80	; 0x50
 80a1d9e:	d10b      	bne.n	80a1db8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a1da0:	4b09      	ldr	r3, [pc, #36]	; (80a1dc8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1da2:	681b      	ldr	r3, [r3, #0]
 80a1da4:	b14b      	cbz	r3, 80a1dba <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a1da6:	b003      	add	sp, #12
 80a1da8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a1dac:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a1dae:	f7ff ffe5 	bl	80a1d7c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a1db2:	b003      	add	sp, #12
 80a1db4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1db8:	2300      	movs	r3, #0
 80a1dba:	461a      	mov	r2, r3
 80a1dbc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1dc0:	9300      	str	r3, [sp, #0]
 80a1dc2:	f7ff fb03 	bl	80a13cc <system_ctrl_set_result>
}
 80a1dc6:	e7f4      	b.n	80a1db2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a1dc8:	20000ef0 	.word	0x20000ef0

080a1dcc <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a1dcc:	2100      	movs	r1, #0
{
 80a1dce:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a1dd0:	4811      	ldr	r0, [pc, #68]	; (80a1e18 <module_user_init_hook+0x4c>)
 80a1dd2:	f7ff fb95 	bl	80a1500 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a1dd6:	4b11      	ldr	r3, [pc, #68]	; (80a1e1c <module_user_init_hook+0x50>)
 80a1dd8:	681a      	ldr	r2, [r3, #0]
 80a1dda:	4b11      	ldr	r3, [pc, #68]	; (80a1e20 <module_user_init_hook+0x54>)
 80a1ddc:	429a      	cmp	r2, r3
 80a1dde:	bf0c      	ite	eq
 80a1de0:	2201      	moveq	r2, #1
 80a1de2:	2200      	movne	r2, #0
 80a1de4:	4b0f      	ldr	r3, [pc, #60]	; (80a1e24 <module_user_init_hook+0x58>)
 80a1de6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1de8:	d001      	beq.n	80a1dee <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a1dea:	f7ff ffb1 	bl	80a1d50 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1dee:	f7ff f9e9 	bl	80a11c4 <HAL_RNG_GetRandomNumber>
 80a1df2:	4604      	mov	r4, r0
    srand(seed);
 80a1df4:	f000 f90a 	bl	80a200c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1df8:	4b0b      	ldr	r3, [pc, #44]	; (80a1e28 <module_user_init_hook+0x5c>)
 80a1dfa:	b113      	cbz	r3, 80a1e02 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a1dfc:	4620      	mov	r0, r4
 80a1dfe:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1e02:	2100      	movs	r1, #0
 80a1e04:	4808      	ldr	r0, [pc, #32]	; (80a1e28 <module_user_init_hook+0x5c>)
 80a1e06:	f7ff faf3 	bl	80a13f0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1e0e:	2100      	movs	r1, #0
 80a1e10:	4806      	ldr	r0, [pc, #24]	; (80a1e2c <module_user_init_hook+0x60>)
 80a1e12:	f7ff bad1 	b.w	80a13b8 <system_ctrl_set_app_request_handler>
 80a1e16:	bf00      	nop
 80a1e18:	080a1cd1 	.word	0x080a1cd1
 80a1e1c:	40024000 	.word	0x40024000
 80a1e20:	9a271c1e 	.word	0x9a271c1e
 80a1e24:	20000eec 	.word	0x20000eec
 80a1e28:	00000000 	.word	0x00000000
 80a1e2c:	080a1d95 	.word	0x080a1d95

080a1e30 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a1e30:	4b02      	ldr	r3, [pc, #8]	; (80a1e3c <__tcf_0+0xc>)
 80a1e32:	6898      	ldr	r0, [r3, #8]
 80a1e34:	b108      	cbz	r0, 80a1e3a <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a1e36:	f7ff b9bd 	b.w	80a11b4 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a1e3a:	4770      	bx	lr
 80a1e3c:	20000ef8 	.word	0x20000ef8

080a1e40 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a1e40:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a1e42:	b570      	push	{r4, r5, r6, lr}
 80a1e44:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a1e46:	d901      	bls.n	80a1e4c <pinAvailable+0xc>
    return false;
 80a1e48:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a1e4a:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a1e4c:	f1a0 030d 	sub.w	r3, r0, #13
 80a1e50:	2b02      	cmp	r3, #2
 80a1e52:	d90b      	bls.n	80a1e6c <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a1e54:	2801      	cmp	r0, #1
 80a1e56:	d824      	bhi.n	80a1ea2 <pinAvailable+0x62>
 80a1e58:	f000 f878 	bl	80a1f4c <_Z19__fetch_global_Wirev>
 80a1e5c:	2100      	movs	r1, #0
 80a1e5e:	7c00      	ldrb	r0, [r0, #16]
 80a1e60:	f7ff fa08 	bl	80a1274 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1e64:	f080 0001 	eor.w	r0, r0, #1
 80a1e68:	b2c0      	uxtb	r0, r0
 80a1e6a:	e7ee      	b.n	80a1e4a <pinAvailable+0xa>
 80a1e6c:	4e12      	ldr	r6, [pc, #72]	; (80a1eb8 <pinAvailable+0x78>)
 80a1e6e:	7831      	ldrb	r1, [r6, #0]
 80a1e70:	f3bf 8f5b 	dmb	ish
 80a1e74:	f011 0501 	ands.w	r5, r1, #1
 80a1e78:	d10d      	bne.n	80a1e96 <pinAvailable+0x56>
 80a1e7a:	4630      	mov	r0, r6
 80a1e7c:	f7fe f90f 	bl	80a009e <__cxa_guard_acquire>
 80a1e80:	b148      	cbz	r0, 80a1e96 <pinAvailable+0x56>
 80a1e82:	4629      	mov	r1, r5
 80a1e84:	480d      	ldr	r0, [pc, #52]	; (80a1ebc <pinAvailable+0x7c>)
 80a1e86:	f7ff fce5 	bl	80a1854 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a1e8a:	4630      	mov	r0, r6
 80a1e8c:	f7fe f90c 	bl	80a00a8 <__cxa_guard_release>
 80a1e90:	480b      	ldr	r0, [pc, #44]	; (80a1ec0 <pinAvailable+0x80>)
 80a1e92:	f000 f891 	bl	80a1fb8 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a1e96:	4b09      	ldr	r3, [pc, #36]	; (80a1ebc <pinAvailable+0x7c>)
 80a1e98:	7818      	ldrb	r0, [r3, #0]
 80a1e9a:	f7ff fa05 	bl	80a12a8 <hal_spi_is_enabled>
 80a1e9e:	2800      	cmp	r0, #0
 80a1ea0:	d1d2      	bne.n	80a1e48 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1ea2:	3c12      	subs	r4, #18
 80a1ea4:	2c01      	cmp	r4, #1
 80a1ea6:	d805      	bhi.n	80a1eb4 <pinAvailable+0x74>
 80a1ea8:	f7ff fdc8 	bl	80a1a3c <_Z22__fetch_global_Serial1v>
 80a1eac:	7c00      	ldrb	r0, [r0, #16]
 80a1eae:	f7ff fa33 	bl	80a1318 <hal_usart_is_enabled>
 80a1eb2:	e7d7      	b.n	80a1e64 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a1eb4:	2001      	movs	r0, #1
 80a1eb6:	e7c8      	b.n	80a1e4a <pinAvailable+0xa>
 80a1eb8:	20000ef4 	.word	0x20000ef4
 80a1ebc:	20000ef8 	.word	0x20000ef8
 80a1ec0:	080a1e31 	.word	0x080a1e31

080a1ec4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1ec4:	2817      	cmp	r0, #23
{
 80a1ec6:	b538      	push	{r3, r4, r5, lr}
 80a1ec8:	4604      	mov	r4, r0
 80a1eca:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1ecc:	d80a      	bhi.n	80a1ee4 <pinMode+0x20>
 80a1ece:	29ff      	cmp	r1, #255	; 0xff
 80a1ed0:	d008      	beq.n	80a1ee4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a1ed2:	f7ff ffb5 	bl	80a1e40 <pinAvailable>
 80a1ed6:	b128      	cbz	r0, 80a1ee4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a1ed8:	4629      	mov	r1, r5
 80a1eda:	4620      	mov	r0, r4
}
 80a1edc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a1ee0:	f7ff b988 	b.w	80a11f4 <HAL_Pin_Mode>
}
 80a1ee4:	bd38      	pop	{r3, r4, r5, pc}

080a1ee6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1ee6:	b538      	push	{r3, r4, r5, lr}
 80a1ee8:	4604      	mov	r4, r0
 80a1eea:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1eec:	f7ff f98a 	bl	80a1204 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1ef0:	28ff      	cmp	r0, #255	; 0xff
 80a1ef2:	d010      	beq.n	80a1f16 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a1ef4:	2806      	cmp	r0, #6
 80a1ef6:	d804      	bhi.n	80a1f02 <digitalWrite+0x1c>
 80a1ef8:	234d      	movs	r3, #77	; 0x4d
 80a1efa:	fa23 f000 	lsr.w	r0, r3, r0
 80a1efe:	07c3      	lsls	r3, r0, #31
 80a1f00:	d409      	bmi.n	80a1f16 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1f02:	4620      	mov	r0, r4
 80a1f04:	f7ff ff9c 	bl	80a1e40 <pinAvailable>
 80a1f08:	b128      	cbz	r0, 80a1f16 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1f0a:	4629      	mov	r1, r5
 80a1f0c:	4620      	mov	r0, r4
}
 80a1f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a1f12:	f7ff b97f 	b.w	80a1214 <HAL_GPIO_Write>
}
 80a1f16:	bd38      	pop	{r3, r4, r5, pc}

080a1f18 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1f18:	4770      	bx	lr
	...

080a1f1c <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a1f1c:	2300      	movs	r3, #0
{
 80a1f1e:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a1f20:	2520      	movs	r5, #32
 80a1f22:	8043      	strh	r3, [r0, #2]
 80a1f24:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1f26:	4e08      	ldr	r6, [pc, #32]	; (80a1f48 <_Z17acquireWireBufferv+0x2c>)
{
 80a1f28:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a1f2a:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1f2c:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a1f2e:	6085      	str	r5, [r0, #8]
 80a1f30:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1f32:	4628      	mov	r0, r5
 80a1f34:	f000 f83e 	bl	80a1fb4 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1f38:	4631      	mov	r1, r6
	};
 80a1f3a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1f3c:	4628      	mov	r0, r5
 80a1f3e:	f000 f839 	bl	80a1fb4 <_ZnajRKSt9nothrow_t>
	};
 80a1f42:	60e0      	str	r0, [r4, #12]
}
 80a1f44:	4620      	mov	r0, r4
 80a1f46:	bd70      	pop	{r4, r5, r6, pc}
 80a1f48:	080a2350 	.word	0x080a2350

080a1f4c <_Z19__fetch_global_Wirev>:
{
 80a1f4c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1f4e:	4d0e      	ldr	r5, [pc, #56]	; (80a1f88 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a1f50:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1f52:	7829      	ldrb	r1, [r5, #0]
 80a1f54:	f3bf 8f5b 	dmb	ish
 80a1f58:	f011 0401 	ands.w	r4, r1, #1
 80a1f5c:	d111      	bne.n	80a1f82 <_Z19__fetch_global_Wirev+0x36>
 80a1f5e:	4628      	mov	r0, r5
 80a1f60:	f7fe f89d 	bl	80a009e <__cxa_guard_acquire>
 80a1f64:	b168      	cbz	r0, 80a1f82 <_Z19__fetch_global_Wirev+0x36>
 80a1f66:	a801      	add	r0, sp, #4
 80a1f68:	f7ff ffd8 	bl	80a1f1c <_Z17acquireWireBufferv>
 80a1f6c:	4621      	mov	r1, r4
 80a1f6e:	aa01      	add	r2, sp, #4
 80a1f70:	4806      	ldr	r0, [pc, #24]	; (80a1f8c <_Z19__fetch_global_Wirev+0x40>)
 80a1f72:	f7ff fb21 	bl	80a15b8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a1f76:	4628      	mov	r0, r5
 80a1f78:	f7fe f896 	bl	80a00a8 <__cxa_guard_release>
 80a1f7c:	4804      	ldr	r0, [pc, #16]	; (80a1f90 <_Z19__fetch_global_Wirev+0x44>)
 80a1f7e:	f000 f81b 	bl	80a1fb8 <atexit>
	return wire;
}
 80a1f82:	4802      	ldr	r0, [pc, #8]	; (80a1f8c <_Z19__fetch_global_Wirev+0x40>)
 80a1f84:	b007      	add	sp, #28
 80a1f86:	bd30      	pop	{r4, r5, pc}
 80a1f88:	20000f08 	.word	0x20000f08
 80a1f8c:	20000f0c 	.word	0x20000f0c
 80a1f90:	080a1f19 	.word	0x080a1f19

080a1f94 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1f94:	2300      	movs	r3, #0
 80a1f96:	b507      	push	{r0, r1, r2, lr}
 80a1f98:	461a      	mov	r2, r3
 80a1f9a:	4619      	mov	r1, r3
 80a1f9c:	9300      	str	r3, [sp, #0]
 80a1f9e:	4803      	ldr	r0, [pc, #12]	; (80a1fac <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a1fa0:	f7ff fb74 	bl	80a168c <_ZN9IPAddressC1Ehhhh>
 80a1fa4:	b003      	add	sp, #12
 80a1fa6:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1faa:	bf00      	nop
 80a1fac:	20000f20 	.word	0x20000f20

080a1fb0 <_ZdlPvj>:
 80a1fb0:	f7fe b873 	b.w	80a009a <_ZdlPv>

080a1fb4 <_ZnajRKSt9nothrow_t>:
 80a1fb4:	f7fe b86f 	b.w	80a0096 <_Znaj>

080a1fb8 <atexit>:
 80a1fb8:	2300      	movs	r3, #0
 80a1fba:	4601      	mov	r1, r0
 80a1fbc:	461a      	mov	r2, r3
 80a1fbe:	4618      	mov	r0, r3
 80a1fc0:	f000 b884 	b.w	80a20cc <__register_exitproc>

080a1fc4 <memcmp>:
 80a1fc4:	b530      	push	{r4, r5, lr}
 80a1fc6:	2400      	movs	r4, #0
 80a1fc8:	3901      	subs	r1, #1
 80a1fca:	42a2      	cmp	r2, r4
 80a1fcc:	d101      	bne.n	80a1fd2 <memcmp+0xe>
 80a1fce:	2000      	movs	r0, #0
 80a1fd0:	e005      	b.n	80a1fde <memcmp+0x1a>
 80a1fd2:	5d03      	ldrb	r3, [r0, r4]
 80a1fd4:	3401      	adds	r4, #1
 80a1fd6:	5d0d      	ldrb	r5, [r1, r4]
 80a1fd8:	42ab      	cmp	r3, r5
 80a1fda:	d0f6      	beq.n	80a1fca <memcmp+0x6>
 80a1fdc:	1b58      	subs	r0, r3, r5
 80a1fde:	bd30      	pop	{r4, r5, pc}

080a1fe0 <memcpy>:
 80a1fe0:	440a      	add	r2, r1
 80a1fe2:	4291      	cmp	r1, r2
 80a1fe4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a1fe8:	d100      	bne.n	80a1fec <memcpy+0xc>
 80a1fea:	4770      	bx	lr
 80a1fec:	b510      	push	{r4, lr}
 80a1fee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1ff2:	4291      	cmp	r1, r2
 80a1ff4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1ff8:	d1f9      	bne.n	80a1fee <memcpy+0xe>
 80a1ffa:	bd10      	pop	{r4, pc}

080a1ffc <memset>:
 80a1ffc:	4603      	mov	r3, r0
 80a1ffe:	4402      	add	r2, r0
 80a2000:	4293      	cmp	r3, r2
 80a2002:	d100      	bne.n	80a2006 <memset+0xa>
 80a2004:	4770      	bx	lr
 80a2006:	f803 1b01 	strb.w	r1, [r3], #1
 80a200a:	e7f9      	b.n	80a2000 <memset+0x4>

080a200c <srand>:
 80a200c:	b538      	push	{r3, r4, r5, lr}
 80a200e:	4b0d      	ldr	r3, [pc, #52]	; (80a2044 <srand+0x38>)
 80a2010:	4604      	mov	r4, r0
 80a2012:	681d      	ldr	r5, [r3, #0]
 80a2014:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a2016:	b97b      	cbnz	r3, 80a2038 <srand+0x2c>
 80a2018:	2018      	movs	r0, #24
 80a201a:	f7ff fa51 	bl	80a14c0 <malloc>
 80a201e:	4a0a      	ldr	r2, [pc, #40]	; (80a2048 <srand+0x3c>)
 80a2020:	4b0a      	ldr	r3, [pc, #40]	; (80a204c <srand+0x40>)
 80a2022:	63a8      	str	r0, [r5, #56]	; 0x38
 80a2024:	e9c0 2300 	strd	r2, r3, [r0]
 80a2028:	4b09      	ldr	r3, [pc, #36]	; (80a2050 <srand+0x44>)
 80a202a:	2201      	movs	r2, #1
 80a202c:	6083      	str	r3, [r0, #8]
 80a202e:	230b      	movs	r3, #11
 80a2030:	8183      	strh	r3, [r0, #12]
 80a2032:	2300      	movs	r3, #0
 80a2034:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2038:	2200      	movs	r2, #0
 80a203a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a203c:	611c      	str	r4, [r3, #16]
 80a203e:	615a      	str	r2, [r3, #20]
 80a2040:	bd38      	pop	{r3, r4, r5, pc}
 80a2042:	bf00      	nop
 80a2044:	200009d0 	.word	0x200009d0
 80a2048:	abcd330e 	.word	0xabcd330e
 80a204c:	e66d1234 	.word	0xe66d1234
 80a2050:	0005deec 	.word	0x0005deec

080a2054 <rand>:
 80a2054:	4b13      	ldr	r3, [pc, #76]	; (80a20a4 <rand+0x50>)
 80a2056:	b510      	push	{r4, lr}
 80a2058:	681c      	ldr	r4, [r3, #0]
 80a205a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a205c:	b97b      	cbnz	r3, 80a207e <rand+0x2a>
 80a205e:	2018      	movs	r0, #24
 80a2060:	f7ff fa2e 	bl	80a14c0 <malloc>
 80a2064:	4a10      	ldr	r2, [pc, #64]	; (80a20a8 <rand+0x54>)
 80a2066:	4b11      	ldr	r3, [pc, #68]	; (80a20ac <rand+0x58>)
 80a2068:	63a0      	str	r0, [r4, #56]	; 0x38
 80a206a:	e9c0 2300 	strd	r2, r3, [r0]
 80a206e:	4b10      	ldr	r3, [pc, #64]	; (80a20b0 <rand+0x5c>)
 80a2070:	2201      	movs	r2, #1
 80a2072:	6083      	str	r3, [r0, #8]
 80a2074:	230b      	movs	r3, #11
 80a2076:	8183      	strh	r3, [r0, #12]
 80a2078:	2300      	movs	r3, #0
 80a207a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a207e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a2080:	480c      	ldr	r0, [pc, #48]	; (80a20b4 <rand+0x60>)
 80a2082:	690a      	ldr	r2, [r1, #16]
 80a2084:	694b      	ldr	r3, [r1, #20]
 80a2086:	4350      	muls	r0, r2
 80a2088:	4c0b      	ldr	r4, [pc, #44]	; (80a20b8 <rand+0x64>)
 80a208a:	fb04 0003 	mla	r0, r4, r3, r0
 80a208e:	fba2 3404 	umull	r3, r4, r2, r4
 80a2092:	1c5a      	adds	r2, r3, #1
 80a2094:	4404      	add	r4, r0
 80a2096:	f144 0000 	adc.w	r0, r4, #0
 80a209a:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80a209e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80a20a2:	bd10      	pop	{r4, pc}
 80a20a4:	200009d0 	.word	0x200009d0
 80a20a8:	abcd330e 	.word	0xabcd330e
 80a20ac:	e66d1234 	.word	0xe66d1234
 80a20b0:	0005deec 	.word	0x0005deec
 80a20b4:	5851f42d 	.word	0x5851f42d
 80a20b8:	4c957f2d 	.word	0x4c957f2d

080a20bc <strlen>:
 80a20bc:	4603      	mov	r3, r0
 80a20be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a20c2:	2a00      	cmp	r2, #0
 80a20c4:	d1fb      	bne.n	80a20be <strlen+0x2>
 80a20c6:	1a18      	subs	r0, r3, r0
 80a20c8:	3801      	subs	r0, #1
 80a20ca:	4770      	bx	lr

080a20cc <__register_exitproc>:
 80a20cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a20d0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a2190 <__register_exitproc+0xc4>
 80a20d4:	4606      	mov	r6, r0
 80a20d6:	f8d8 0000 	ldr.w	r0, [r8]
 80a20da:	461f      	mov	r7, r3
 80a20dc:	460d      	mov	r5, r1
 80a20de:	4691      	mov	r9, r2
 80a20e0:	f000 f858 	bl	80a2194 <__retarget_lock_acquire_recursive>
 80a20e4:	4b26      	ldr	r3, [pc, #152]	; (80a2180 <__register_exitproc+0xb4>)
 80a20e6:	681c      	ldr	r4, [r3, #0]
 80a20e8:	b934      	cbnz	r4, 80a20f8 <__register_exitproc+0x2c>
 80a20ea:	4c26      	ldr	r4, [pc, #152]	; (80a2184 <__register_exitproc+0xb8>)
 80a20ec:	601c      	str	r4, [r3, #0]
 80a20ee:	4b26      	ldr	r3, [pc, #152]	; (80a2188 <__register_exitproc+0xbc>)
 80a20f0:	b113      	cbz	r3, 80a20f8 <__register_exitproc+0x2c>
 80a20f2:	681b      	ldr	r3, [r3, #0]
 80a20f4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a20f8:	6863      	ldr	r3, [r4, #4]
 80a20fa:	2b1f      	cmp	r3, #31
 80a20fc:	dd07      	ble.n	80a210e <__register_exitproc+0x42>
 80a20fe:	f8d8 0000 	ldr.w	r0, [r8]
 80a2102:	f000 f849 	bl	80a2198 <__retarget_lock_release_recursive>
 80a2106:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a210a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a210e:	b35e      	cbz	r6, 80a2168 <__register_exitproc+0x9c>
 80a2110:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a2114:	b988      	cbnz	r0, 80a213a <__register_exitproc+0x6e>
 80a2116:	4b1d      	ldr	r3, [pc, #116]	; (80a218c <__register_exitproc+0xc0>)
 80a2118:	b923      	cbnz	r3, 80a2124 <__register_exitproc+0x58>
 80a211a:	f8d8 0000 	ldr.w	r0, [r8]
 80a211e:	f000 f83a 	bl	80a2196 <__retarget_lock_release>
 80a2122:	e7f0      	b.n	80a2106 <__register_exitproc+0x3a>
 80a2124:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a2128:	f7ff f9ca 	bl	80a14c0 <malloc>
 80a212c:	2800      	cmp	r0, #0
 80a212e:	d0f4      	beq.n	80a211a <__register_exitproc+0x4e>
 80a2130:	2300      	movs	r3, #0
 80a2132:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a2136:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a213a:	2201      	movs	r2, #1
 80a213c:	6863      	ldr	r3, [r4, #4]
 80a213e:	2e02      	cmp	r6, #2
 80a2140:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a2144:	fa02 f203 	lsl.w	r2, r2, r3
 80a2148:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a214c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a2150:	ea43 0302 	orr.w	r3, r3, r2
 80a2154:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a2158:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a215c:	bf02      	ittt	eq
 80a215e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a2162:	431a      	orreq	r2, r3
 80a2164:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a2168:	6863      	ldr	r3, [r4, #4]
 80a216a:	f8d8 0000 	ldr.w	r0, [r8]
 80a216e:	1c5a      	adds	r2, r3, #1
 80a2170:	3302      	adds	r3, #2
 80a2172:	6062      	str	r2, [r4, #4]
 80a2174:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a2178:	f000 f80e 	bl	80a2198 <__retarget_lock_release_recursive>
 80a217c:	2000      	movs	r0, #0
 80a217e:	e7c4      	b.n	80a210a <__register_exitproc+0x3e>
 80a2180:	20000fc4 	.word	0x20000fc4
 80a2184:	20000f38 	.word	0x20000f38
 80a2188:	00000000 	.word	0x00000000
 80a218c:	080a14c1 	.word	0x080a14c1
 80a2190:	20000a34 	.word	0x20000a34

080a2194 <__retarget_lock_acquire_recursive>:
 80a2194:	4770      	bx	lr

080a2196 <__retarget_lock_release>:
 80a2196:	4770      	bx	lr

080a2198 <__retarget_lock_release_recursive>:
 80a2198:	4770      	bx	lr

080a219a <link_code_end>:
	...

080a219c <dynalib_user>:
 80a219c:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a21ac:	0000 0000 6425 202c 6425 202c 6425 202c     ....%d, %d, %d, 
 80a21bc:	6425 6c00 6769 7468 7449 7200 7365 7465     %d.lightIt.reset
 80a21cc:	7449 0000 0004 0000 0004 0000 0004 0000     It..............
	...
 80a21ec:	0002 0000 0002 0000 0002 0000 0002 0000     ................
 80a21fc:	0002 0000 0002 0000 0002 0000 0002 0000     ................
	...

080a221c <_ZTV7TwoWire>:
	...
 80a2224:	155f 080a 15a9 080a 1581 080a 1561 080a     _...........a...
 80a2234:	1589 080a 1591 080a 1599 080a 15a1 080a     ................

080a2244 <_ZTV9IPAddress>:
	...
 80a224c:	15ed 080a 15dd 080a 15df 080a 7061 0070     ............app.

080a225c <_ZTVN5spark12NetworkClassE>:
	...
 80a2264:	16b5 080a 16bf 080a 16c9 080a 16d3 080a     ................
 80a2274:	16dd 080a 16e9 080a 16f5 080a 16fd 080a     ................
 80a2284:	1705 080a 1711 080a 1719 080a 1723 080a     ............#...
 80a2294:	172d 080a 5925 252d 2d6d 6425 2554 3a48     -...%Y-%m-%dT%H:
 80a22a4:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

080a22b4 <_ZTV11USARTSerial>:
	...
 80a22bc:	1999 080a 1a03 080a 19df 080a 1791 080a     ................
 80a22cc:	19af 080a 19cb 080a 19bd 080a 19d9 080a     ................
 80a22dc:	199b 080a 19a1 080a                         ........

080a22e4 <_ZTV9USBSerial>:
	...
 80a22ec:	1a8b 080a 1af1 080a 1ac9 080a 1791 080a     ................
 80a22fc:	1abb 080a 1a8d 080a 1a9d 080a 1aeb 080a     ................
 80a230c:	1aad 080a 1a85 080a                         ........

080a2314 <_ZTVN5spark9WiFiClassE>:
	...
 80a231c:	1cb3 080a 1ca9 080a 1c9f 080a 1c11 080a     ................
 80a232c:	1c93 080a 1c87 080a 16f5 080a 16fd 080a     ................
 80a233c:	1c7b 080a 1c73 080a 1c69 080a 1c5f 080a     {...s...i..._...
 80a234c:	1c1b 080a                                   ....

080a2350 <_ZSt7nothrow>:
	...

080a2351 <link_const_variable_data_end>:
 80a2351:	00          	.byte	0x00
	...

080a2354 <link_constructors_location>:
 80a2354:	080a16a5 	.word	0x080a16a5
 80a2358:	080a177d 	.word	0x080a177d
 80a235c:	080a1849 	.word	0x080a1849
 80a2360:	080a1961 	.word	0x080a1961
 80a2364:	080a1985 	.word	0x080a1985
 80a2368:	080a1cbd 	.word	0x080a1cbd
 80a236c:	080a1f95 	.word	0x080a1f95
